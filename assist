#!/usr/bin/env php
<?php 

define('CLI_ENV', true);

if (!defined('ASSIST_TOKEN'))
{
    // include system paths.
    include_once __DIR__ . "/system/Inc/paths.php";

    // require composer
    require_once HOME . 'vendor/autoload.php';

    // include dependencies
    include_once PATH_TO_CORE . 'coreDependencies.php';
}

// console tables
include_once PATH_TO_CONSOLE . 'Table.php';

/**Ëš
 * @package Moorexa CLI Assist Manager
 * @version 0.0.1
 * @author  Ifeanyi Amadi <amadiify.com>
 */

class Assist
{
    // version, not to worry! This is incremental.
    private static $version = '0.0.1';

    // available commands
    public static $commands = [
        'commands' => 'List all the avaliable commands',
        'help' => "Displays a list of available commands",
        'generate' => 'Generates encryption key, csrf salt key',
        'about' => "Short information about moorexa",
        'backup' => "Creates a complete backup of app",
        'migrate' => "Performs a database migration",
        'restore' => "Restore from last backup",
        'clean' => "Cleans code base. Everythings leaves.",
        'new' => "Can be used to add the following, [arguments] (page, model, package, hyphe templates, middleware, auth, event, route, table, cli command, provider, vp).",
        'doc' => "Gives you a comprehensive documentation about moorexa for quick guide.",
        'version' => "Shows moorexa,assist,composer versions.",
        'database' => "Can add database configuration, clean database config file, set defaults.",
        'table' => 'Can add a table to database, update, delete, insert, describe, get rows, show records, drop, clean, generate data',
        'serve' => 'Opens up PHP built in sever for this app.',
        'credits' => 'Shows a list of packages running on this version and credits the authors who wrote them.',
        'page' => 'Allows you set a page as default, generate avialiable routes',
        'config' => 'Allows you update, reset, add attributes to config.xml',
        '<function>' => 'Call a function that exists within application',
        'cache' => 'Cleans the cache system. Removes all cached files.',
        'vcs' => 'Provides a mechanism for local version control in a development or production environment.',
        'deploy' => 'Deploy project to production server',
        'optimize' => 'Optimize application for an improved performance.',
        'system' => 'Allows you check for system updates and make them.'
    ];

    // assist path
    public static $assistPath = HOME;

    // controller base path
    public static $controllerBasePath = HOME . 'pages';

    // avaliable options
    public static $options = [
        '-h' => "will call help for a command or show general help usage. Usage 'assist -h' 'assist open -h' etc",
        '-v' => "will call the version command. Usage 'assist -v'"
    ];

    // commands help
    public static $commandHelp = [
        'new package' => [
            'info' => 'Create a re-usable package in pages/<page>/packages and can be shared between controllers.'
        ],
        'new hy' => [
            'info' => 'Generates a Reusable Template Syntax for Dynamic HTML',
            'optional commands' => [
                'new hy <component> -<path>'
            ],
            'usage' => 
            [
                'php assist new hy <component>' => 'Generate/Overwrite and save to ./chs/',
                'php assist new hy <component> -<path>' => 'Generate/Overwrite and save to <path>',
                'php assist new hy <component>,<component> -<path>' => 'Generate/Overwrite and save to <path>'
            ],

            'component naming style' => [
                'component-body' => 'becomes ComponentBody',
                'componentBody' => 'becomes ComponentBody',
                'component' => 'becomes Component',
                'Component' => 'remains Component'
            ]
        ],
        'new auth' => [
            'info' => 'Generates an authentication handler',
            'optional commands' => [
                'new auth <name> -<path>'
            ],
            'usage' => 
            [
                'php assist new auth <name>' => 'Generate/Overwrite and save to ./utility/authentication/',
                'php assist new auth <name> -<path>' => 'Generate/Overwrite and save to <path>',
                'php assist new auth <name>,<name> -<path>' => 'Generate/Overwrite and save to <path>'
            ],

            'auth naming style' => [
                'name' => 'becomes NameAuth',
                'nameBody' => 'becomes NameBodyAuth',
                'Name' => 'remains NameAuth'
            ]
        ],
        'new table' => [
            'info' => 'Generates a database table php file for defining table structure, renaming, dropping etc.',
            'options' => [
                '-<path>'
            ],
            'usage' => [
                'php assist new table <tableName>',
                'php assist new table <tableName> -<path>' => 'Generates table file and save to path.',
                'php assist new <assistCommand>:new <tableName>'
            ]
        ],
        'new console' => [
            'info' => 'Generates a console helper file in utility/console/helper for additional CLI Assist commands.',
            'register' => 'Generated console helper must be registered in kernel/assist.php, see example below;
                    "<shortcut-pointer>" => [
                        "path" => PATH_TO_CONSOLE <or your path>,
                        "assist" => PATH_TO_CONSOLE . "<console-filename>.php"
                    ]
                ',
            'options' => [
                '-<path>' => 'Change save path to user prefarred directory.'
            ],
            'usage' => [
                'php assist new console <helper-name>',
                'php assist new console <helper-name> -<path>',
                'php assist new clihelper <helper-name> -<path>',
                'php assist new clihelper <helper-name>',
            ]
        ],
        'backup' => [
            'info' => 'Creates a backup and saves in lab/backup directory. Format : backupYear-Month-Day.zip',
            'usage' => 'php assist backup'
        ],
        'restore' => [
            'info' => 'Restores from last backup or you can pass additional condition',
            'usage' => [
                'php assist restore',
                'php assist restore <backup name>'
            ]
        ],
        'clean' => [
            'info' => 'Command wipes everything and restores default behavior. In essence, all files that\'s not default would be lost.',
            'options' => [
                '-keep=dirs' => "reserves directory after clean up. seperate path with comma (,) eg"
            ],
            'usage' => [
                'php assist clean',
                'php assist clean -keep=pages,lab/backup'
            ]
        ],
        'cache' => [
            'info' => 'Cleans the cache system. Removes all cached files.',
            'usage' => [
                'php assist cache clear',
                'php assist cache clear views',
                'php assist cache clear chs'
            ]
        ],
        'new page' => [
            'info' => 'creates a new page',
            'options' => [
                '-default' => 'sets page as the default page'
            ],
            'usage' => [
                'php assist new page <pagename>',
                'php assist new page <pagename> -default',
                'php assist new page <pagename>,<pagename> -default'
            ],
            'page naming style' => [
                'page-name' => 'becomes PageName',
                'pageName' => 'becomes PageName',
                'pagename' => 'becomes Pagename',
                'Pagename' => 'remains Pagename'
            ]
        ],
        'new middleware' => [
            'info' => 'creates a new middleware',
            'usage' => [
                'php assist new middleware <name>',
                'php assist new middleware <name>,<name>'
            ],
            'page naming style' => [
                'middle-ware' => 'becomes MiddleWare',
                'middleWare' => 'becomes MiddleWare',
                'middleware' => 'becomes Middleware',
                'Middleware' => 'remains Middleware'
            ]
        ],
        'new event' => [
            'info' => 'creates a new event',
            'usage' => [
                'php assist new event <name>',
                'php assist new event <name>,<name>',
                'php assist new event <folder>/<name>',
            ],
            'event naming style' => [
                'event-name' => 'becomes EventName',
                'eventName' => 'becomes EventName',
                'eventname' => 'becomes EventName',
                'EventName' => 'remains EventName'
            ]
        ],
        'vcs' => [
            'info' => 'Provides a mechanism for local version control in a development or production environment.',
            'commands' => [
                'publish',
                'push',
                'rollback',
                'set',
                'peek'
            ],
            'options' => [
                '-dev, -development' => 'publish for development',
                '-prod, -live, -production' => 'publish for production',
                '-include' => 'Include directories',
                '-remote' => 'run command on remote server.',
                '-note' => 'Opens a screen for inserting release note when pushing a new or existing version.'
            ],
            'push usage' => [
                'php assist vcs push <version>',
                'php assist vcs push 0.0.1',
                'php assist vcs push 0.0.1 -remote' => 'Push version 0.0.1 to remote server.',
                'php assist vcs push 0.0.1 -note' => 'Push version and add a release note.',
                'php assist vcs push 0.0.1 -include=system,public',
            ],
            'publish usage' => [
                'php assist vcs publish <version> <option>',
                'php assist vcs publish -prod' => 'Publish most recent version for production',
                'php assist vcs publish 0.0.3 -dev' => 'Publish version 0.0.3 for development',
                'php assist vcs publish 0.0.3 -remote' => 'Publish version 0.0.3 on remote server',
            ],
            'rollback usage' => [
                'php assist vcs rollback' => 'Rollback to most recent version or default',
                'php assist vcs rollback -note' => 'Rollback to most recent version or default and add a note',
                'php assist vcs rollback <YYYYMMDDGGMMSS>' => 'Rollback to date',
                'php assist vcs rollback -prod' => 'Rollback production version',
                'php assist vcs rollback -dev' => 'Rollback development version',
                'php assist vcs rollback -remote' => 'Rollback on production server',
            ],
            'set usage' => [
                'php assist vcs set <version> to <version>',
                'php assist vcs set <version> to <version> -remote',
                'php assist vcs set <version> to <version> -note',
                'php assist vcs set 0.0.2-beta to 0.0.2-stable',
            ],
            'peek usage' => [
                'php assist vcs peek',
                'php assist vcs peek -remote' => 'Peek versions on the remote server',
            ]
        ],
        'new model' => [
            'info' => 'Creates or overwrite a model. Also pushes model to <page> controller.',
            'options' => [
                '-table=<table-name>' => 'Use table for all requests. default is the model name',
                '-switchdb=<database-config>' => 'Use this database for table. Would ignore default database',
                '-addview' => 'Add a view wrapper method to controller class for Model name'
            ],
            'usage' => [
                'php assist new model <page>/<model>',
                'php assist new model <page>/<model> -addview',
                'php assist new model <model> (would save model in the default page)',
                'php assist new model <page>/<model> -table=<tablename>',
                'php assist new model <page>/<model> -table=<tablename> -switchdb=<database>',
                'php assist new model <page>/<model>,<page>/<model> -table=<tablename> -switchdb=<database>'
            ],
            'model naming style' => [
                'model-name' => 'becomes ModelName',
                'modelName' => 'becomes ModelName',
                'modelname' => 'becomes Modelname',
                'Modelname' => 'remains Modelname'
            ]
        ],
        'new api:m' => [
            'info' => 'Creates or overwrite an api route model.',
            'usage' => [
                'php assist new api:m <handler>/<route>',
                'php assist new api:model <handler>/<route>'
            ],
            'model naming style' => [
                'model-name' => 'becomes ModelName',
                'modelName' => 'becomes ModelName',
                'modelname' => 'becomes Modelname',
                'Modelname' => 'remains Modelname'
            ]
        ],
        'new vp' => [
            'info' => 'Creates or overwrite a controller view provider.',
            'usage' => [
                'php assist new vp <viewName>',
                'php assist new vp <page|controller>/<viewName>'
            ],
            'provider naming style' => [
                'provider-name' => 'becomes providerName',
                'providerName' => 'remains providerName'
            ]
        ],
        'new api:p' => [
            'info' => 'Creates or overwrite an api route provider.',
            'usage' => [
                'php assist new api:p <handler>/<methodRoute>',
                'php assist new api:provider <handler>/<methodRoute>'
            ],
            'provider naming style' => [
                'provider-name' => 'becomes providerName',
                'providerName' => 'remains providerName'
            ]
        ],
        'new route' => [
            'info' => 'Generate a new route for controller.',
            'options' => [
                '-render=<name>|<path>' => 'Set render view'
            ],
            'usage' => [
                'php assist new route <page>/<method>',
                'php assist new model <method> (would save model in the default page)',
                'php assist new model <page>/<method> -render=<method>',
                'php assist new model <page>/<method> -render=<folder>/<method>',
                'php assist new model <page>/<method>,<page>/<method>'
            ],
            'method naming style' => [
                'method-name' => 'becomes methodName',
                'methodName' => 'becomes methodName',
                'methodname' => 'remains methodname',
                'Methodname' => 'becomes methodname'
            ]
        ],
        'new api' => [
            'info' => 'Creates a new REST Api handler.',
            'options' => [
                '-table=<table-name>' => 'Use table for all requests. default is the handler class name',
                '-switchdb=<database-config>' => 'Use this database for table. Would ignore default database'
            ],
            'usage' => [
                'php assist new api <handler>',
                'php assist new api <handler> -table=<tablename>',
                'php assist new api <handler> -table=<tablename> -switchdb=<database>',
                'php assist new api <handler>,<handler> -table=<tablename> -switchdb=<database>',
            ],
            'handler naming style' => [
                'handler-name' => 'becomes HandlerName',
                'handlerName' => 'becomes HandlerName',
                'handlername' => 'becomes Handlername',
                'Handlername' => 'remains Handlername'
            ]
        ],
        'new provider' => [
            'info' => 'Generates a provider file. Contains a boot method that can be registered in kernel/registry.php',
            'options' => [
                '-namespace' => 'Add a custom Namespace'
            ],
            'usage' => [
                'php assist new provider <name>',
                'php assist new provider <name> <option>',
                'php assist new provider startscreen -namespace=custom'
            ]
        ],
        'generate' => [
            'info' => 'Generates csrf key, security key',
            'usage' => [
                'php assist generate key',
                'php assist generate csrf-key'
            ]
        ],
        'generate key' => [
            'info' => 'Generates a security key',
            'usage' => [
                'php assist generate key'
            ]
        ],
        'generate csrf-key' => [
            'info' => 'Generates a CSRF key',
            'usage' => [
                'php assist generate csrf-key'
            ]
        ],
        'database clean' => [
            'info' => 'Cleans out database config file. Reset to default',
            'usage' => 'php assist database clean'
        ],
        'database add' => [
            'info' => 'Adds a database configuration to kernel/database.php',
            'prompt' => [
                'driver' => 'would be from (mysql,sqlite,pgsql)',
                'host' => 'database connection host. eg localhost',
                'user' => 'database user',
                'pass' => 'database password',
                'name' => 'database name'
            ],
            'options' => [
                '-default=dev' => 'sets as active development database',
                '-default=live' => 'sets as active production database'
            ],
            'usage' => [
                'php assist database add <target-name>',
                'php assist database add <target-name> -default=dev',
                'php assist database add <target-name> -default=live'
            ]
        ],
        'database create' => [
            'info' => 'Creates a new database.',
            'options' => [
                '-pass' => 'DBMS connection password (optional)',
                '-host' => 'DBMS connection host (optional) default is "localhost"',
                '-driver' => 'DBMS connection driver.'
            ],
            'usage' => [
                'php assist database create <name>',
                'php assist database create <name> -pass=password',
                'php assist database create <name> -pass=password -driver=mysql|sqlite|pgsql',
                'php assist database create <name> -pass=password -driver=mysql|sqlite|pgsql -host=localhost',
            ]
        ],
        'database destroy' => [
            'info' => 'Destroys a database. Removes it from your DBMS',
            'options' => [
                '-pass' => 'DBMS connection password (optional)',
                '-host' => 'DBMS connection host (optional) default is "localhost"',
                '-driver' => 'DBMS connection driver.'
            ],
            'usage' => [
                'php assist database destroy <name>',
                'php assist database destroy <name> -pass=password',
                'php assist database destroy <name> -pass=password -driver=mysql|sqlite|pgsql',
                'php assist database destroy <name> -pass=password -driver=mysql|sqlite|pgsql -host=localhost',
            ]
        ],
        'database reset' => [
            'info' => 'cleans up a database. Removes all tables',
            'options' => [
                '-keep' => 'remove others except ?..',
                '-pass' => 'DBMS connection password (optional)',
                '-host' => 'DBMS connection host (optional) default is "localhost"',
                '-driver' => 'DBMS connection driver.'
            ],
            'usage' => [
                'php assist database reset <name>',
                'php assist database reset <name> -keep=account,users',
                'php assist database reset <name> -pass=password',
                'php assist database reset <name> -pass=password -driver=mysql|sqlite|pgsql',
                'php assist database reset <name> -pass=password -driver=mysql|sqlite|pgsql -host=localhost',
            ]
        ],
        'database empty' => [
            'info' => 'empties all tables in a database',
            'options' => [
                '-keep' => 'empty others except ?..',
                '-pass' => 'DBMS connection password (optional)',
                '-host' => 'DBMS connection host (optional) default is "localhost"',
                '-driver' => 'DBMS connection driver.'
            ],
            'usage' => [
                'php assist database empty <name>',
                'php assist database empty <name> -keep=account,users',
                'php assist database empty <name> -pass=password',
                'php assist database empty <name> -pass=password -driver=mysql|sqlite|pgsql',
                'php assist database empty <name> -pass=password -driver=mysql|sqlite|pgsql -host=localhost',
            ]
        ],
        'database' => [
            'info' => 'when attached to a table you can generate dummy data, empty or reset table. Else see commands that runs on a database.',
            'table usage' => [
                'clean' => 'php assist database <table> clean',
                'empty' => 'php assist database <table> empty',
                'generate' => 'php assist database <table> generate -table=20 (default is 5)'
            ],
            'table generate options' => [
                '-table' => 'a number of dummy data to generate',
                'field=val' => 'set a default value for a field row. eg image=lady.png username=moorexa'
            ],
            'other usage' => [
                'clean' => '{%database clean/info%}. see php assist database clean -h',
                'add' => '{%database add/info%}. see php assist database add -h',
                'create' => '{%database create/info%}. see php assist database create -h',
                'destroy' => '{%database destroy/info%}. see php assist database destroy -h',
                'reset' => '{%database reset/info%}. see php assist database reset -h',
                'empty' => '{%database empty/info%}. see php assist database empty -h',
            ],
            'options' => [
                '-pass' => 'DBMS connection password (optional)',
                '-host' => 'DBMS connection host (optional) default is "localhost"',
                '-driver' => 'DBMS connection driver.'
            ]
        ],
        'table add' => [
            'info' => 'Adds a table and prepares it for migration.',
            'options' => [
                '-migrate' => 'Migrate after creating table',
                '-database' => 'Switch to database or use default'
            ],
            'usage' => [
                'php assist table add <table>',
                'php assist table add <table> -migrate',
                'php assist table add <table> -migrate -database=<database-source>',
            ],
            'optional' => [
                '-database=<databse-source>'
            ]
        ],
        'table drop' => [
            'info' => 'drops a table and removes it from local dbms,sql files.',
            'usage' => [
                'php assist table drop <table>',
                'php assist table drop <table> -database=<databse-source>'
            ],
            'optional' => [
                '-database=<databse-source>'
            ]
        ],
        'table empty' => [
            'info' => 'truncates a table. ',
            'usage' => [
                'php assist table empty <table>',
                'php assist table empty <table> -database=<databse-source>'
            ],
            'optional' => [
                '-database=<databse-source>'
            ]
        ],
        'table show' => [
            'info' => 'shows all the rows and column in a table. ',
            'usage' => [
                'php assist table show <table>',
                'php assist table show <table> -database=<databse-source>',
                'php assist table show <table> -column=<col>,<col>',
                'php assist table show <table> -database=<databse-source> -where= userid=2 -end',
                'php assist table show <table> -database=<databse-source> -where= userid=2 -end -orderby=id desc',
                'php assist table show <table> -database=<databse-source> -where= userid=2 -end -orderby=id desc -end -limit=0,3'
            ],
            'optional' => [
                '-database=<databse-source>',
                '-column=<col>,<col>',
                '-where= userid={id} -end',
                '-orderby=id desc -end -limit=0,3'
            ]
        ],
        'table describe' => [
            'info' => 'describes a table. ',
            'usage' => [
                'php assist table describe <table>',
                'php assist table describe <table> -database=<databse-source>'
            ],
            'optional' => [
                '-database=<databse-source>'
            ]
        ],
        'table all' => [
            'info' => 'shows all the tables in a database. ',
            'usage' => [
                'php assist table all',
                'php assist table all -database=<databse-source>'
            ],
            'optional' => [
                '-database=<databse-source>'
            ]
        ],
        'table rows' => [
            'info' => 'returns the total rows in a table. ',
            'usage' => [
                'php assist table rows <table>',
                'php assist table rows <table> -database=<databse-source>',
                'php assist table rows <table> -database=<databse-source> -where= userid=2 -end',
                'php assist table rows <table> -database=<databse-source> -where= userid=2 -end -orderby=id desc',
                'php assist table rows <table> -database=<databse-source> -where= userid=2 -end -orderby=id desc -end -limit=0,3'
            ],
            'optional' => [
                '-database=<databse-source>'
            ]
        ],
        'table delete' => [
            'info' => 'deletes a record from a table. ',
            'usage' => [
                'php assist table delete <table> -database=<databse-source> -where= userid=2'
            ],
            'optional' => [
                '-database=<databse-source>'
            ]
        ],
        'table insert' => [
            'info' => 'inserts a record into a table. ',
            'usage' => [
                'php assist table insert <table> -database=<databse-source> -set= userid=2, password=\'moorexa\''
            ],
            'optional' => [
                '-database=<databse-source>'
            ]
        ],
        'table update' => [
            'info' => 'updates a record in a table. ',
            'usage' => [
                'php assist table update <table> -database=<databse-source> -set= userid=2, password=\'moorexa\' -where= id=2'
            ],
            'optional' => [
                '-database=<databse-source>'
            ]
        ],
        'serve' => [
            'info' => 'Starts PHP development server.',
            'usage' => [
                'php assist serve',
                'php assist serve -notab',
                'php assist serve <port>',
                'php assist serve 9090',
                'php assist serve 9090 -notab',
            ]
        ],
        'page' => [
            'info' => 'Allows you set a page as default, also generate avialiable routes.',
            'usage' => [
                'php assist page <page> -default' => 'Sets page as default controller',
                'php assist page <page> routes' => 'Generates avialiable routes'
            ]
        ],
        'config' => [
            'info' => 'Allows you update, reset, add attributes to config.xml',
            'usage' => [
                'php assist config reset' => 'Reset config.xml',
                'php assist config -title=new page' => 'Change title',
                'php assist config -title=new page -end reset' => 'Change title and reset config. Changes would be lost',
                'php assist config reset -title=new page' => 'Reset config and change title. Changes would not be lost',
                'php assist config -support.email=hello@example.com' => 'Add or update support attribute',
                'php assist config -support.email=hello@example.com -title=new page' => 'Add or update support attribute, change title',
            ]
        ],
        'migrate' => [
            'info' => 'performs a database migration',
            'options' => [
                '-tables' => 'Migrate tables in lab/tables directory or list of tables to migrate, seperated with comma. (Optional)',
                '-database' => 'database to migrate to. (Optional) default would be used.',
                '-from' => 'performs a migration from a file',
                '-prod' => 'Migrate to production database',
                '-drop' => 'Drop tables',
                '-options'  => 'Run table options',
                '--force' => 'Force Migration'
            ],
            'usage' => [
                'php assist migrate',
                'php assist migrate --force',
                'php assist migrate -prod',
                'php assist migrate -drop -tables=users',
                'php assist migrate -drop',
                'php assist migrate -prod -tables=users,account',
                'php assist migrate -options -tables=users,account',
                'php assist migrate -tables=account,users',
                'php assist migrate -tables',
                'php assist migrate <table-name> -tables',
                'php assist migrate <table-name>,<table-name> -tables',
                'php assist migrate -database=moorexa',
                'php assist migrate table -from=pages/app/packages/auth'
            ]
        ],
        'deploy' => [
            'info' => 'Deploy project to production server.',
            'usage' => [
                'php assist deploy' => 'Run deployment to production server.',
                'php assist deploy --notrack' => 'Deploy without keeping track of deploys.',
                'php assist deploy -<filename>|<directory>' => 'Deploy file or every file inside a directory. You can seperate more values with (,)',
                'php assist deploy -exclude=<filename>|<directory>' => 'Deploy and exclude file or directory.'
            ]
        ],
    ];

    // option mapping
    public static $optionMapping = [
        '-h' => 'commandHelp'
    ];

    // database instance
    private static $instance = [];

    // database migrate option
    private static $migrateOption = false;

    // private storage
    private static $storage = [];


    // ansii codes
    private $ansii = [
        'reset' => "\033[0m",
        'save'  =>  "\0337",
        'green1' => "\033[32;1m",
        'green' => "\033[32m",
        'bold' => "\033[1m",
        'clean' => "\033[K",
        'return' => "\0338",
        'red' => "\033[31m",
        'red1' => "\033[31;1m",
        'line' => "\033[4m",
        'clear-screen' => "\033[2J",
        'quit-bg' => "\033[37;41;1m",
        'quit-color' => "\033[37m"
    ];

    // constructor
    public function __construct()
    {
        // running from a browser ?
        if (defined('ASSIST_TOKEN'))
        {
            $this->ansii['reset'] = '</span>';
            $this->ansii['save'] = '';
            $this->ansii['clean'] = '';
            $this->ansii['quit-bg'] = '<span style="background-color:#f90; color:#000">';
            $this->ansii['quit-color'] = '<span style="color:#f90">';
            $this->ansii['line'] = '<span>';
            $this->ansii['clear-screen'] = '';
            $this->ansii['return'] = '<span style="display:block;">';
            $this->ansii['green1'] = '<span style="color:#090; font-weight:bold;">';
            $this->ansii['red1'] = '<span style="color:#f00; font-weight:bold;">';
            $this->ansii['green'] = '<span style="color:#090;">';
            $this->ansii['red'] = '<span style="color:#f00;">';
            $this->ansii['bold'] = '<span style="font-weight:bold">';
        }
    }

    // get ansii codes
    public function ansii($code = 'reset')
    {
        if (strtolower(PHP_SHLIB_SUFFIX) == 'dll')
        {
            //window
            return null;
        }
        else
        {
            return $this->ansii[$code];
        }
    }

    // handle backups
    public static function backup()
    {
       fwrite(STDOUT, "\0337");
       self::out("\033[1m"."\nBackup\n");

       $dir = self::$assistPath . 'lab/Backup/';

       if (!is_dir($dir))
       {
           // create dir
           self::sleep("Creating directory.");
           mkdir($dir, 0777);
           self::sleep("Backup folder added to lab. Path => ". $dir);
       }

       self::out("Starting backup..");

       $i = 0;

       $complete = false;
       $files = [];

        $zip = new ZipArchive();

        $zipfile = $dir . 'backup'.date('Y-M-D').'.zip';

        if ($zip->open($zipfile, ZipArchive::CREATE) === true)
        {
            $data = glob(self::$assistPath .'{,.}*', GLOB_BRACE);

            foreach ($data as $i => $f)
            {
                if ($f != '.' && $f != '..')
                {
                    if (is_file($f))
                    {
                        $zip->addFile($f);
                    }
                    elseif (is_dir($f) && basename($f) != 'backup')
                    {
                        $dr = getAllFiles($f);

                        $single = reduce_array($dr);

                        if (count($single) > 0)
                        {
                            foreach ($single as $z => $d)
                            {
                                $zip->addFile($d);
                            }
                        }
                    }
                }
            }

            $close = false;

            for($i=0; $i <= 100; $i++)
            {
                fwrite(STDOUT, "\0337");
                $step = intval($i/10);
                fwrite(STDOUT, "\033[32m"."[". str_repeat('#', $step). str_repeat('.', 10 - $step) ."]"."\033[0m");
                fwrite(STDOUT, "{$i}% complete");
                fwrite(STDOUT, "\0338");
                
                if ($close == false)
                {
                    usleep(100000);
                    $close = $zip->close();
                }
                else
                {
                    usleep(10000);
                }
            }

            fwrite(STDOUT, PHP_EOL);
        }

       self::out("Backup zip file created >> "."\033[32m". $zipfile ."\n");
    }
    
    // restore backup
    public static function restore($args)
    {
        fwrite(STDOUT, "\0337");

        self::out("\033[1m"."\Restore\n");

        $dir = self::$assistPath . 'lab/Backup/';

        if (is_dir($dir))
        {
            if (count($args) > 0)
            {
                $file = $dir . rtrim($args[0], '.zip').'.zip';
            }
            else
            {
                $files = glob($dir.'*');
                $file = null;

                foreach ($files as $i => $fil)
                {
                    $created = date('Y-M-d', filemtime($fil));
                    if ($created == date('Y-M-d'))
                    {
                        $file = $fil;
                        break;
                    }
                }
                
                if ($file == null)
                {
                    $file = count($files) > 0 ? end($files) : $dir;
                }
            }

            if (is_file($file))
            {
                self::sleep("Staging "."\033[32m".$file."\033[0m"." for restore.\n");
                $zip = new ZipArchive();
                $res = $zip->open($file);

                if ($res === true)
                {
                    self::sleep("Restore started..");
                    fwrite(STDOUT, "Should we continue (y/n)? ");
                    $answer = strtolower(trim(fgets(STDIN)));

                    if ($answer == 'y')
                    {
                        $zip->extractTo(self::$assistPath);

                        $close = false;

                        for($i=0; $i <= 100; $i++)
                        {
                            fwrite(STDOUT, "\0337");
                            $step = intval($i/10);
                            fwrite(STDOUT, "\033[32m"."[". str_repeat('#', $step). str_repeat('.', 10 - $step) ."]"."\033[0m");
                            fwrite(STDOUT, "{$i}% complete");
                            fwrite(STDOUT, "\0338");
                            
                            if ($close == false)
                            {
                                usleep(100000);
                                $close = $zip->close();
                            }
                            else
                            {
                                usleep(10000);
                            }
                        }

                        fwrite(STDOUT, PHP_EOL);
                    }
                    else
                    {
                        self::out("\033[31m"."Restore canceled..\n");
                    }
                }
            }
            else
            {
                self::out("\033[31m"."No backup found to restore\n");
            }
        }   
        else
        {
            self::out("\033[31m"."No backup found to restore\n");
        }

        return 0;
    }

    // show text and sleep for 100000 milleseconds.
    protected static function sleep($text)
    {
        fwrite(STDOUT, $text . PHP_EOL);
        usleep(100000);
    }
    
    // help method
    public static function help()
    {
        $ass = new Assist;
        
        $text = 'czo5MTQ6Ijsiczo4OTY6Ik5qZE9hd3FjY21nY2dhdkJXVzRkY3RYdWl2azJ2Q2VhRVdXbDBSS04rbGx3dkZ3dE1oRjRWTVRYK3BGOGtJRXZMOHlEeFVYYVBKa2Z1WmxOemsxa2pGSmlDQVd6Y0dmMCtOS0FKc2Jqc1N0c2luWHRST05BSnlEOG1qUVRJWUVSZHNFdHlSOGdGQ3hISUt1Mk5WdTZBamVIcUpnUGJRWnN5b25jTytLRk9tcTJnMTYwZ1IzY1AyR2NCV2tGVzBvQ3lIWDRsdUkxSE9kVUN4SkIwcCtSek85TlZOcWpBZUNoZzRxRXJuS0FuakpNSHFhaWtwYU5lN282dDJJa2x2YmhDY2xUYVFXcm15ejV4b1NhSlN5cVF4VmRkR2pZUEt3aytFN2hkdjkrY1RJelBZVXVqcU5LQ2xZZ2ZRY0pYdUtJcTM1QS8va05RcGRjOFlCR0N0eWo5UXFOTFpzUUFaQWVxcGdTWlhsZG9EQllWOFhyMHQ1bk9NMWR1VFNOK1pueTlKd0xzSWlBZWpGS0ZpVk1IQWFXNTJBc21BODdWTzA2c0gvbGQ1d3A2WVNtUWE3ZncwOWNsSlRQZ05xdW5xS01PYWhhMWJjQjAvWjd3c0NianJOTzBkYndKZW1DdVVDaE9MWVY0TWhYUmpsQkV2T0J2L1VNL0dVNHpPN21KdWU0RC9aV0lnckRqLzd3ME1VL1pVSXNvcmZ2RDdWWW8vK1ZKakJRZ1dFdC93Z3haeDF3cG9RdS92c2FybjR1OGZ1NnJ5bHFkc21FNWZMV0g0WVg0anlnam4vOWJMVE1lbldKajlMeWRmdEZCSDNPc2ljSCtFYUdOUVVlOWFWNWhjSCtXZENIRkxjcUg5Z0wzUHJCSldwS2Foa3RGQTUvZ3VXd0VHaS9sTms3Tklsb0JPbWZGVWhSYlVsZm92V2dMWWRySnZWUXdGcmx0SkFnWnl6THhDMzdxcU5yZUEvemtqUzlnTVRQUUZjdU4rZStFN0hOcFpNNm9ESCtTY1I5M3E1YzVVczFyRXVvTEIwRFJmTTI2MW9TMWR6eGFxWEd6Q05yanlnMHF0OEZpVXY5Zmx2em9QQVZ5QmVVZldCWXZ6WUtqTERUMEJJaVBnNENVMHpkcndJYXpCVHVPSTVFdWlpVTZIMm5XYngrWEN3TVBEVFZ5QUZPOTZPUThJQm44algxIjsiOjUwOTpzIjs=';

        fwrite(STDOUT, $ass->ansii('save'));
        fwrite(STDOUT, $ass->ansii('green') . decryptAssist($text). $ass->ansii(). PHP_EOL);

        self::out("\nMoorexa version 1.0 <www.moorexa.com/assist/commands> ".date('Y-m-d g:i:s a'));
        self::out($ass->ansii('green1'). "Usage:");
        self::out("\tCommand [arguments] [options]");
        self::out($ass->ansii('green1'). "\n\nAvailable Commands:");
        foreach (self::$commands as $command => $info)
        {
            self::out($command."\t\t--\t".$info);
        }

        self::out($ass->ansii('green1'). "\n\nAvailable Options:");
        foreach (self::$options as $command => $info)
        {
            self::out($command."\t\t--\t".$info);
        }

        // listen for command
        self::listen();
    }

    // send output to screen
    protected static function out($text, $code = null)
    {
        $ass = new Assist;

        if ($code === null)
        {
            $code = $ass->ansii('reset');
        }
        
        fwrite(STDOUT, $code . $text . $ass->ansii() . PHP_EOL);
    }

    // about moorexa
    public static function about()
    {
        $ass = new Assist;

        $text = 'czo5MTQ6Ijsiczo4OTY6Ik5qZE9hd3FjY21nY2dhdkJXVzRkY3RYdWl2azJ2Q2VhRVdXbDBSS04rbGx3dkZ3dE1oRjRWTVRYK3BGOGtJRXZMOHlEeFVYYVBKa2Z1WmxOemsxa2pGSmlDQVd6Y0dmMCtOS0FKc2Jqc1N0c2luWHRST05BSnlEOG1qUVRJWUVSZHNFdHlSOGdGQ3hISUt1Mk5WdTZBamVIcUpnUGJRWnN5b25jTytLRk9tcTJnMTYwZ1IzY1AyR2NCV2tGVzBvQ3lIWDRsdUkxSE9kVUN4SkIwcCtSek85TlZOcWpBZUNoZzRxRXJuS0FuakpNSHFhaWtwYU5lN282dDJJa2x2YmhDY2xUYVFXcm15ejV4b1NhSlN5cVF4VmRkR2pZUEt3aytFN2hkdjkrY1RJelBZVXVqcU5LQ2xZZ2ZRY0pYdUtJcTM1QS8va05RcGRjOFlCR0N0eWo5UXFOTFpzUUFaQWVxcGdTWlhsZG9EQllWOFhyMHQ1bk9NMWR1VFNOK1pueTlKd0xzSWlBZWpGS0ZpVk1IQWFXNTJBc21BODdWTzA2c0gvbGQ1d3A2WVNtUWE3ZncwOWNsSlRQZ05xdW5xS01PYWhhMWJjQjAvWjd3c0NianJOTzBkYndKZW1DdVVDaE9MWVY0TWhYUmpsQkV2T0J2L1VNL0dVNHpPN21KdWU0RC9aV0lnckRqLzd3ME1VL1pVSXNvcmZ2RDdWWW8vK1ZKakJRZ1dFdC93Z3haeDF3cG9RdS92c2FybjR1OGZ1NnJ5bHFkc21FNWZMV0g0WVg0anlnam4vOWJMVE1lbldKajlMeWRmdEZCSDNPc2ljSCtFYUdOUVVlOWFWNWhjSCtXZENIRkxjcUg5Z0wzUHJCSldwS2Foa3RGQTUvZ3VXd0VHaS9sTms3Tklsb0JPbWZGVWhSYlVsZm92V2dMWWRySnZWUXdGcmx0SkFnWnl6THhDMzdxcU5yZUEvemtqUzlnTVRQUUZjdU4rZStFN0hOcFpNNm9ESCtTY1I5M3E1YzVVczFyRXVvTEIwRFJmTTI2MW9TMWR6eGFxWEd6Q05yanlnMHF0OEZpVXY5Zmx2em9QQVZ5QmVVZldCWXZ6WUtqTERUMEJJaVBnNENVMHpkcndJYXpCVHVPSTVFdWlpVTZIMm5XYngrWEN3TVBEVFZ5QUZPOTZPUThJQm44algxIjsiOjUwOTpzIjs=';
        
        fwrite(STDOUT, $ass->ansii('green') . decryptAssist($text). $ass->ansii(). PHP_EOL);
        self::out($ass->ansii('bold')."History");
        
        $history = "\nMoorexa started off as a personal framework late 2016 formally 'PIHYPE' by Ifeanyi Amadi for building web apps as a freelancer. He wanted enough flexibility in PHP and freedom to build without worries so he open sourced Pihype, see repo (https://github.com/xchriscode/pihype) and in 2017 he decided to make it a whole lot better and ready for enterprise apps for PHP Geeks around the world.\n\nBefore Moorexa, he had experimented with several framework architectures and interfaced with PHP developers to know what works for them and to build a strong secure system that's ready for any web application in record time.\n\nPihype was finally renamed to Moorexa and became bigger with more power. On the 23rd of April 2018 it was released for Beta Testing and had over 220 downloads and was later removed August 26th, 2018 in preperation for a stable release.\n\nMoorexa was built out of pihype for amazing possibilities on any skill level. Means beginners can build secure apps with little effort and proffessionals can just whisper and 'whoola' we have a app. \n\n";
        
        self::out(wordwrap($history, 50));

        self::out($ass->ansii('bold')."About");

        $about = "\nMoorexa is an eloquent Open-Source PHP MVC Framework provided by wekiwork for developing modern web applications that explains power, freedom, creativity, relationship, speed, flexibility and rapid growth. it's a framework for PHP Geeks who wish to build PHP apps for faster and improved web experience, rapid in behavior, friendly to humans and scales as the project grows.\n";

        self::out(wordwrap($about, 50));

        // listen for new input
        self::listen("Try another command, ");
        return 0;
    }
    
    // clean application
    public static function clean($other)
    {
        $ass = new Assist;

        $starter = self::$assistPath . 'help/Starter/starter.zip';

        if (is_file($starter))
        {
            self::out($ass->ansii('bold')."\nClean\n");

            $dirs = glob(self::$assistPath . '*');
            $totalDirs = 0;
            $files = get_files_count(self::$assistPath) - 1;
            $rootDirs = [];
            $rootFiles = [];

            foreach ($dirs as $i => $x)
            {
                if (is_dir($x))
                {
                    $totalDirs += 1;
                    $rootDirs[] = $x;
                }
                else
                {
                    $rootFiles[] = $x;
                }
            }
            

            self::sleep("({$totalDirs}) top directories found with ({$files}) files");

            fwrite(STDOUT, "Are you sure we should continue (y/n)? ");
            $answer = strtolower(trim(fgets(STDIN)));

            if ($answer == 'y')
            {

                self::out($ass->ansii('green')."Clean up started..\n");
                $finished = false;

                if (count($other) > 0)
                {
                    foreach ($other as $i => $arg)
                    {
                        if (strpos($arg, '=') > 2)
                        {
                            $option = substr($arg, 0, strpos($arg,'='));
                            if ($option == '-keep')
                            {
                                $zip = new ZipArchive();
                                $zipfile = self::$assistPath . 'keep.zip';

                                $dirs = explode(',', substr($arg, strpos($arg,'=') + 1));
                                foreach ($dirs as $x => $y)
                                {
                                    $dir = self::$assistPath . ltrim(trim($y), self::$assistPath);

                                    if (is_dir($dir))
                                    {
                                        if ($zip->open($zipfile, ZipArchive::CREATE) === true)
                                        {
                                            $data = glob($dir .'*');

                                            if (count($data) > 0)
                                            {
                                                foreach ($data as $i => $f)
                                                {
                                                    if (is_file($f))
                                                    {
                                                        $zip->addFile($f);
                                                    }
                                                    elseif (is_dir($f))
                                                    {
                                                        $dr = getAllFiles($f);

                                                        $single = reduce_array($dr);

                                                        if (count($single) > 0)
                                                        {
                                                            foreach ($single as $z => $d)
                                                            {
                                                                $zip->addFile($d);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                $zip->close();
                                
                            }
                        }
                    }
                }

                self::__cleandir($rootDirs, 0, $files, $rootFiles, $status);
                fwrite(STDOUT, PHP_EOL);

                self::out($ass->ansii('clean').$ass->ansii('green')."Finishing up..\n");
                
                if (($status - 1) == $files)
                {
                    self::__rmdirs($rootDirs);

                    $zip = new ZipArchive();
                    
                    if ($zip->open($starter))
                    {
                        $zip->extractTo(self::$assistPath);

                        $close = false;

                        for($i=0; $i <= 100; $i++)
                        {
                            fwrite(STDOUT, $ass->ansii('save'));
                            $step = intval($i/10);
                            fwrite(STDOUT, $ass->ansii('green')."[". str_repeat('#', $step). str_repeat('.', 10 - $step) ."]".$ass->ansii());
                            fwrite(STDOUT, "{$i}% complete");
                            fwrite(STDOUT, $ass->ansii('return'));
                            
                            if ($close == false)
                            {
                                usleep(100000);
                                $close = $zip->close();
                            }
                            else
                            {
                                usleep(10000);
                            }
                        }

                        fwrite(STDOUT, PHP_EOL);
                    }

                    if (file_exists(self::$assistPath . 'keep.zip'))
                    {
                        $zip = new ZipArchive();
                        if ($zip->open(self::$assistPath . 'keep.zip'))
                        {
                            $zip->extractTo(self::$assistPath);
                            if ($zip->close())
                            {
                                unlink(self::$assistPath . 'keep.zip');
                            }
                        }
                    }
                }
                
            }
            else
            {
                self::out($ass->ansii('red')."Operation ended..\n");
            }
        }
        else
        {
            self::out($ass->ansii('red')."Starter file missing. Clean up failed.");
        }

        return 0;
    }
    
    // sub function for clean
    private static function __rmdirs($dirs, $parent = [])
    {
        if (is_array($dirs))
        {
            foreach ($dirs as $x => $dir)
            {
                if (is_dir($dir))
                {
                    $dig = glob($dir.'/*');

                    if (count($dig) > 0)
                    {
                        foreach ($dig as $i => $path)
                        {
                            if (is_dir($path))
                            {
                                $files = glob($path . "/*");

                                if (count($files) == 0)
                                {
                                    @rmdir($path);
                                }
                                else
                                {
                                    $newdirs = [];

                                    foreach($files as $z => $fl)
                                    {
                                        if (is_dir($fl))
                                        {
                                            $newdirs[] = $fl;
                                        }
                                    }

                                    if (count($newdirs) > 0)
                                    {
                                        self::__rmdirs($newdirs, $dirs);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        if (is_dir($dir))
                        {
                            @rmdir($dir);
                        }
                    }
                }
            }
        }
    }
    
    // sub function for clean
    private static function __cleandir($dir, $id, $filecount, &$rootFiles, &$status)
    {
        $continue = false;
        $rootused = false;
        static $track = 0;
        $complete = false;

        if (isset($dir[$id]))
        {
            static $current;
            $current = $dir[$id];

            static $files;
            $files = getAllFiles($current);

            static $flatten;

            $flatten = reduce_array($files);
            $continue = true;
        }
        else
        {
            $continue = true;
            $flatten = $rootFiles;
            $rootused = true;
        }


        if ($continue)
        {   
            $ass = new Assist;

            if (count($flatten) > 0)
            {
                foreach ($flatten as $i => $path)
                {
                    fwrite(STDOUT, $ass->ansii('save'));
                    fwrite(STDOUT, "({$track}/{$filecount}) Complete.");
                    fwrite(STDOUT, $ass->ansii('return'));

                    
                    if (basename($path) != 'assist' && basename($path) != 'composer' && basename($path) != 'starter.zip')
                    {
                        unlink($path);
                    }

                    $sleep = (100000 / $filecount) + $filecount;
                    usleep($sleep);

                    $track += 1;

                    $status = $track;

                    if ($i == count($flatten)-1 && $rootused == false)
                    {
                        $id++;
                        self::__cleandir($dir, $id, $filecount, $rootFiles, $status);
                    }
                    elseif ($i == count($flatten)-1 && $rootused == true)
                    {
                        $complete = true;
                    }
                }
            }
            else
            {
                $id++;
                self::__cleandir($dir, $id, $filecount, $rootFiles, $status);
            }
        }
        
        return $complete;
    }

    // listen for commands
    protected static function listen($text = "Enter a command to try, ")
    {
        $ass = new Assist();

        fwrite(STDOUT, $ass->ansii('save'));
        fwrite(STDOUT, $ass->ansii('quit-color'). "\n{$text}".$ass->ansii('reset').$ass->ansii('quit-bg')."'quit'".$ass->ansii('reset')." to cancel: ");
        $start = microtime(true);

        while($line = fgets(STDIN))
        {
            $line = trim(strtolower($line));
            $breakLine = explode(" ", $line);

            if ($breakLine[0] == 'assist')
            {
                unset($breakLine[0]);
                sort($breakLine);
            }

            if (trim($line) == 'quit' || trim($line) == 'clear' || trim($line) == 'cls')
            {
                $end = microtime(true) - $start;
                self::out($ass->ansii('red')."Terminated successfully... ". $end .'ms'."\n");
                fwrite(STDOUT, $ass->ansii('return'));
                return 0;
            }
            else
            {
                $line = $breakLine[0];

                if (isset(self::$commands[$line]))
                {
                    if (self::hasOption($breakLine, $option, $command))
                    {
                        self::generateQuickHelp($option, $command);
                        return 0;
                    }
                    else
                    {
                        fwrite(STDOUT, $ass->ansii('clear-screen')); // clear screen
                        $other = array_splice($breakLine, 1);
                        $line = lcfirst(preg_replace('/[\s]/','',ucwords($line)));

                        self::{$line}($other);
                        fwrite(STDOUT, $ass->ansii('return'));
                        return 0;
                    }
                }
                else
                {
                    // failed.
                    self::invalid($line);
                }
            }
        }
    }
    
    // invalid command
    public static function invalid($line, $class = 'assist', $commands = [])
    {
        $ass = new Assist();

        if (count($commands) == 0)
        {
            $commands = self::$commands;
        }

        self::out($ass->ansii('red1')."\n".'---'.$ass->ansii('reset')."Invalid {$class} command '".$line.$ass->ansii('bold')."\n\nAvaliable Commands:\n");

        $commands = array_keys($commands);
        $table = new Console_Table();
        $table->setHeaders(['Command', 'Hint']);
        foreach($commands as $i => $command)
        {
            $table->addRow(["assist ".$command, substr_replace(self::$commands[$command], '.. -h for more', 50)]);
        }
        self::out($table->getTable());
    }

    // generate command
    public static function generate($arg)
    {
        $ass = new Assist();

        if (count($arg) > 0)
        {
            $command = isset($arg[0]) ? trim(strtolower($arg[0])) : null;

            self::out($ass->ansii('bold')."\ngenerate {$command}\n");
  
            $char = range('A','Z');
            shuffle($char);
            $char2 = range('a','z');
            shuffle($char2);
            
            $num = range(1,1000);
            shuffle($num);

            
            $start = mt_rand(1,5);
            $end = mt_rand(5,10);

            $string = implode("",array_splice($char, $start, $end)).'-'.implode("", array_splice($char2, $start, $end));
            $string = strtoupper(str_shuffle($string));
            
            
            $sep = mt_rand($end, 800);
            $number = implode($sep, array_splice($num, $start, $end));

            
            $string = str_shuffle($string.'-'.$number);
            $string = hash('sha256', $string);
            
            if (function_exists('password_hash'))
            {
                $string = password_hash(sha1(time().date('Y-m-d g:i:s').'kegen-'.$string), PASSWORD_BCRYPT);
            }
            else
            {
                $string = crypt(sha1(time().date('Y-m-d g:i:s').'kegen-'.$string), CRYPT_BLOWFISH);
            }
                
            $key = sha1(hash('sha256', $string));
            
            $content = file_get_contents(self::$assistPath . 'kernel/config.php');

            switch ($command)
            {
                case 'key':
                    $start = strstr($content, "'secret_key'");
                    $end = strpos($start, ',');
                    $new = "'secret_key' => '$key'";
                    $line = substr($start, 0, $end);
                    $content = str_replace($line, $new, $content);
                    file_put_contents(self::$assistPath . 'kernel/config.php', $content);
                    self::out("New Security Key ($key) generated ". $ass->ansii('green')."successfully.");
                break;

                case 'assist_token':
                case 'assist-token':
                case 'clitoken':
                    $key = sha1($key);
                    $start = strstr($content, "'assist_token'");
                    $end = strpos($start, ',');
                    $new = "'assist_token' => '$key'";
                    $line = substr($start, 0, $end);
                    $content = str_replace($line, $new, $content);
                    file_put_contents(self::$assistPath . 'kernel/config.php', $content);
                    self::out("New Assist CLI Token ($key) generated ". $ass->ansii('green')."successfully.");
                break;

                case 'csrf-key':
                    $start = strstr($content, "'csrf_salt'");
                    $end = strpos($start, ',');
                    $new = "'csrf_salt' => '$key'";
                    $line = substr($start, 0, $end);
                    $content = str_replace($line, $new, $content);
                    file_put_contents(self::$assistPath . 'kernel/config.php', $content);
                    self::out("New CSRF Key ($key) generated ". $ass->ansii('green')."successfully.");
                break;

                default:
                    self::out($ass->ansii('red')."Command '$command' not a valid command. try (key or csrf-key)");
            }

            self::out(PHP_EOL);
        }
    }
    
    // generate quick help
    public static function generateQuickHelp( $structure,  $command)
    {
        $ass = new Assist();

        // title
        fwrite(STDOUT, $ass->ansii('green')."\n==>".$ass->ansii('reset')." Command '". $command ."' help". $ass->ansii('reset'). PHP_EOL);

        // ilterate
        foreach ($structure as $name => $info)
        {
            // top layer
            self::out($ass->ansii('green1')."\n".ucwords($name));
            if (!is_array($info))
            {
                self::out($info);
            }
            else
            {
                foreach ($info as $i => $inf)
                {
                    if (preg_match('/({%)/', $inf))
                    {
                        $start = ltrim(strstr($inf, '{%'), '{%');
                        $text = substr($start, 0, strpos($start, '%}'));
                        $break = explode('/', $text);
                        $current = self::$commandHelp;
                        $text = "";

                        foreach ($break as $x => $key)
                        {
                            $text = $current[$key];
                            if (is_array($current[$key]))
                            {
                                $current = $current[$key];
                            }
                        }

                        $inf = $text;
                    }

                    if (is_string($i))
                    {
                        self::out($ass->ansii('bold').$i." : ".$ass->ansii('reset').$inf."\n"); 
                    }
                    else
                    {
                        self::out("- ".$inf."\n"); 
                    }
                      
                }
            }
        }
        fwrite(STDOUT, "\n");
    }
    
    // check if request has an option tag
    public static function hasOption($stdin, &$option, &$command)
    {
        $has = false;

        foreach ($stdin as $i => $line)
        {
            if (isset(self::$options[$line]))
            {
                if (isset(self::$optionMapping[$line]))
                {
                    $goto = self::$optionMapping[$line];

                    $before = $stdin[$i-1];
                    // get the last benchmark
                    $new = array_splice($stdin,0,$i);
                    // get command used
                    $newArray = array_splice($new, 0, 2);
                    $command = trim(implode(' ', $newArray));
                    
                    if (isset(self::${$goto}[$command]))
                    {
                        $option = self::${$goto}[$command];
                        $has = true;
                    }
                    elseif (isset(self::${$goto}[$newArray[0]]))
                    {
                        $option = self::${$goto}[$newArray[0]];
                        $command = $newArray[0];
                        $has = true;
                    }
                }

                break;
            }
        }

        return $has;
    }
    
    // call static
    public static function __callStatic($method, $args)
    {
        if ($method == 'new')
        {
            $method = '_new';
        }
        elseif ($method == 'system')
        {
            $method = '_system';
        }

        // handle errors
        self::invalid($method);
    }
    
    // creates new page, model, packages, headers, footers etc.
    public static function _new($arg)
    {
        if (count($arg) > 0)
        {
            $ass = new Assist();

            $command = isset($arg[0]) ? trim(strtolower($arg[0])) : null;

            self::out($ass->ansii('bold')."\nnew {$command}\n");

            switch ($command)
            {
                case 'page':

                    $page = $arg[1];
                    $exp = explode(',', $page);

                    foreach ($exp as $i => $page)
                    {
                        $page = preg_replace('/[^a-zA-Z_0-9]/', ' ', $page);
                        $page = ucwords($page);
                        $page = preg_replace('/[\s]/','',$page);

                        $check = self::$controllerBasePath . '/'. $page;

                        if (!is_dir($check))
                        {
                            // good we can create page
                            $directories = ['Models', 'Static', 'Partials', 'Packages', 'Providers', 'Custom', 'Views'];

                            $header = 'czo1MTA6Ijsiczo0OTI6Ij1jalNNbzRGRHNQd1h0eWNkeW8rMlMwMmd1L1IrVGU2K05LT1ljbEhlVGRKUEVZc2kvVSsxUE5sZEpOc1VoWGhMdEY4Sk4wR3Y4MVNnZnJzT25Ua3M2a0ozWEpsZUs2bGJZdW9YWmlNR1Q5TWJTUkVCTVhlSnFGN0gzQnEra1ZTN3ErTWtCWFZ4NWh0Uzc1aVFSM0JibGdpYitXNkhzak1XeDl0ZDJINHNuUitWOTFMd1gwU2VOR1pxblg2aWswU25GWFBCNUQvd2VOQ2t5MHNLY0pFcTlGTDQ2RkdYQVNqbHZma25hdFB2VHJ2NFBTQXl0OFFmTXpHY2x3SjQ2aTZtZHhDUDErMTZZeWE4WHRGNVZmWG5wWVVyZGZ3WHFzUVFPdHlRT1BLRnpTUVByQXErZmgyUG8xM0NHN3l5SHlWcWVHSWh1dTErWUVLUGZwSkUyRU9SN21GdEFLTDI4NitMZ2pDcmNLWkhtem41RnpSVGhmT1JTVkFlcktxaVdEY3J1b3RDZ0tNRGQ1Y2V3VWtkdDhRd0FmcW5qVExkOW1HNHV1Vlp1L1RCajNiRW42T3hHM0FXMXZvVWdKQU1yV3BJQk4ydXZ3YU9yeFFveEpwdXQ3K1lnZTMyYm8xYit3a2hGT2o0MDNVYjdESCI7IjoxMDU6cyI7';
                            $controller = 'czo3NjY6Ijsiczo3NDg6Ij1BQkVJWWtzbUxZVTlCSHlGZWRSNTk0SWxrdzl0YkRDUEVnSTVDazVuZms1bkxTZGVGYmdveUZkRGZTQlZJRFJLaWRKVFljSGRMcGxJYmxLTW1FK2F5Y2hHZ3FsUVZmOGJlMEYxK0RGclF2cWlHZHl0c1JaaG5mcmY1dFIrU2tTL3pad0Q0RkFIamxhOXEwYzcvSXhQQmZqV2JiQnhTM3FqK0NqZHpzU29NSVZuZzVUUHJrNDhhNlNCbzd1K0ZwL1drSU05YXo5dFp0NUZjbHMvbTdxREhwWmN5Nmc3Q3ZnVERYTzNBMFZBLzBhUW5CRmV0N0pWRm1GZ2VZZkNwY2czdTgzbXNOWTVOWnVJckR1QmZnTWhBZWJmSW5yZy9vcHFXNlA0alRiRmdaSSsxM0ZXcCtWUitCaHJSOGdhU3haSXd3aFhEOFFwVzc3YUVHNTJZSHFTU0t4VE5QZUJoOERIVzJJejRKYkx0dWM3UEpVeGFldWxoRE9BNFB0VTArdFR3bWhFN09rZ1I1K1JDZ01Fem05MHMxbEQzVGxHUUdmOVZIYmMvTFNwSjVLYUVtOS9nNlBzSTlmMWVtckdqMGVtY3Z6UVRsV0JOamNxRzhCWVF6Ulh1UmE1R0VBOTdCa3REamlhaTB6V1BGTVJFcWdZUDU5Z0ZURU5SSXVNaUIwbXJ6Y3MrQWtqNFFNRXA4VXJoNXZHcnRMeS8wb000SzVFdVZVdElyOStxa01NTmdwZ20vUnQ5MHNDNWloZzN1NkV6cnRrNEVtTWVNUnZsMHhoMVhsenZZWlNuTkw1MXJRZnZnS3Fha0dPYzNWVVEyRkVjR1ltbzlRVFJvT0RJZ1NTQzNTbGlmT0l3NEVEcThFbXpBbHphelErQnVqclhZRmcwbTE3TW41ZFgyRnBSMjNtL0NuTkd1NDJ5SWg2aHlmbTFvd2t2dmtyOVdZRW5aNVdicnhRNkJzYnlRYmJ5RnFWbkt6RkowbUNUdDciOyI6NzU3OnMiOw==';
                            $readme = 'czoxMzAwOiI7InM6MTI4MDoiSzA0STV0RkpveGNVRFNGV3F0dU5rcHJKN3VUeXpmUGpJZVcxbEVyUjB4K2t5Tzd0SEVtclMzNlVGYW5GcWJocmhJSnVqVTZJQTdnL0U1LzBraUdwejVUWERkWkc5cnJnN3FSczRXbTdlUnU1T2xOMm4zOG9HQnBaWmx3M1FydG84WlVaMWoyZkJWWXd1Yk5XVXlKb20yYlNKYmdyaUw5TnNiYkhFWm55UDVVMHREUzcybm9vdk9IUVZZZGZDMDJQdi8rVTFZT1o1S1FvZ3Z4UHZDNzJvN21RaUxydmhuc0NneVA0RjBabCtTL1k2MWhXWnlObzllZCswVU9Jd2VlQUFsWU9HUCtuVktXekNVSW9RS3AxVG9BMlpCdjcxOVRNVm85ZkREMk5Nem00S1ZYbjlFcmpvRTVQSmNjeTJoMTBDWmFWY0xLT3NCZmhrdUs3eEVSdGkyS3Zydk12N3dwdGZwdjduSWNpVmF3TFRIa1VrT0l0RW4za0lDeVZKbGZ4bGEyN1VPdnhVU2lwSnBVaVdoU0RaUWNlb2M3MU9BWDJYTklORGxocm5BMndaUUtzYWthZ05EbXFRRFdQSUFXWXljYnc4NXVieE9WUzdPelJsa1BXblphaDJSS0x6SXhYc25qSHZ4enlTMHVuRVRmemFrK0ljZE4zMk5nVW1GMTdiN2Z1eUhxa1RYUFcrWTd1K2U3RFE3OUhGUkNjSno4RlFUejY3UXRqMjVUSVNnbDBvanQzZnZZT0hjYzRJSk9nMStzY3kwbXpCaXNtb3UrdGU2SnFrMEdvRmZIb1FUVWlJajFUU3F1VFJpbHRTa3h6TTR5Mi9yT3hEcXRERGNtazBFem5aOWdiaDN4SlZUSm9LUXAwcmxRdDlIeXVCQ2N0RXdWalQ2bU5oMG94a1BvSVJpUk82ZHFnbmsyZmJuK3hYb1lUZlBneVdteUV5OHFtS1pjck84TWFFL1ZYUFdaNGRCQzQwVDF4QkFlRXN4V1F5S05rUVVkN1NVRlFkN0QvaHFLSUJ5OUluenR0TDVCZVFJaGljZHZRbE1TeTRubGFCY1BEeHI0ZHNlZ1IzRnpiYlRXUjQxWjNzQkl6aytFTXJZT2txckd6ZWdvRXhzclFUc2tFMmpLbWsxNFdEWStUWjFkTU83RXBLM1RJNFJ1USt0V3VjdWNhV1M2aTM3VmVZR0F4OXpHQ0hiOHBza2RzRjgvWVBULzgzOTFENVdzWFdwTHBYckNUaVVUWlN6ekIyL2FFZTRiaUJxbUVUVVJqd1RhL1FEVnpOUUlEYVp3VXdJa3c2b09UMVRHY2JPQmNMTUVrRkJOMFlPQXhKcDllbytKbDBickpibkpkNTBCUTlkdDFNYVd4QWNzK3E4V1U1STdHMWdKbjEvbUlaNUNLcjFwR1MwYjQ4T3NBaUozVHdydHlSYk4yanNCbmN5WFFseXRTcWFHS29ad2RxVzNCZFFzRVlyK1lmek84UjRseTRnMktRQTVzK0xBcEprY1JEZ0ZSc1pvZVIwcml5VTRUeTN1Tm5YZDA3ZThRZVdJcUN4d1hCcWx6cG44TTEzakJJYis1Wm1zNjU3TkRYeW5XUURkcjZyclg4Sll5TGZtTmZDOGROZlZxdlhjZU5HWHU4YnQyNHQ2RjZWeWxjSmFPTkhETUpKVldwQWNIU2Y3MnN0ekpVM3dIQi8zaThNbkwiOyI6MDkyMTpzIjs=';
                            //$actionsheet = 'czoyMzQ6IjsiczoyMTY6Ij09QTZra1RBNGF0alBuTEU4ek9Xc0NCTWc4R3lzb1lIdCtmaktRU0VVeUY0L3JWMFh2cE1sdTN3L0t4ZDkydzZGSVhJZVIzT0JCM1dvM2JBSUhQV21uMk9Ed3dmbUVUcEdxRlRjT2g4aHYrckE1WmJKNFVPdzhhT3dIV0JBWmJzMWtET0ZLbkdCRGZVSVk3WDdHdkh1VkxORitIczYybHcwdm9MR0JoU3Q1dDNRNjIyOUlCZ0VsTTdRTm10cHNIWTBmN3NFWXN5eFZaaDJxbGVCMW8zRlJWUiI7Ijo1MjI6cyI7';
                            $file = [];
                            $viewprovider = 'czo2ODI6Ijsiczo2NjQ6Ij09QWphOWt6Wjh6YW5WUXJ1bTEzSUlJdzdURXJmaUhuWU5KeVl5U3RJYnpjdU1kQndpY3pxZXNqSzF0VHBPUXRwbTU3azk2WjBjWXFXdFNDZVNZU013amRKcnQ3YlREekROaXJHancveFhJVEJIZTlybEs3dzdlMG9rQUlweVFFY0dScEJ6Smt1cDVEZ245eklGQWUzWUFnQlhmZDg3YWg0NkNvdDhVUFZETSs4S0txN2pwcVlBMTgrdVlHZlovcDZTUGxwN0V5WFR6RWtBanF1M1l6bUU1UnRXbVhhM3Y2QXdjRy9Fd08rc2VJWWRleVJNWldab3FldHFlVityMkFkZXRzdVpqNGY4UnRTUUpmcWRoejlSOE9YMjJlSEdvOHdadDlnbng3dTZoSTNkZmxxMFpsUGk3a3FJWlF2eUtiVG5TU0QrZktqUG5WNytYYnUzSDdTNEM4MVM0WDEwOHdLcUdrU2w3bGlhNUtuZjVNVmNMRWxhbWRSdHFFMDh3YXpWZTZPL2RIQnJ1YWxFeHBKS1FDT2pjUTY5TDh3OTQ3Y0hMMEl3MDlMM0EwcU5oRThuQk4yeG9FUzdDT0w1QjI3REs4VzRXeDVCMi9QaTRZZlJLNTEyaXpzdW80WW9Cci9vK1RGOTEybFd3dHpXOXdoYnl2ODgyaUdjSVloTUdRMEpqZUJ5cnkraXAvTXRIcUlVNzdjZXVpRTZ6T2NXT0RBZ2dtQTNmRk0rNFplWTcvUTJxVS85YnkwVjFqc1k1V0dhbVJKdUJwR2puWW90dWlhTDQxTlkzTHM2b1BpNlFFU01VOHMybzZCSE1VcmJRZ1RzS0Z3dWlnS1QzQWRqNjRUZUlOby9nZ0VIbFB6QUJBbHhBYWpEUXEiOyI6Mzc2OnMiOw==';
                            $provider = 'czo4NzQ6Ijsiczo4NTY6Ij09UUdoeFF6cE1xNTZlRmpZN2N5b24xbzFGTGlnWlhhRUFwSzVJZmVyemlNeE1KZGN0QWkybExFV3pvZm16Q3kycXREZEhGS0VibzZaS0xoa2FDbGRRY1BHN1JWWmRneVlvcE5lRTdvZm10VUNYZjh0c2VpMmd1WmRPcU52blhSR0FyZFFYdmZIMXB3WmtRMDlFVW9oMUEyUURTRG1lcXVYNWtBOXdrZXZZYnY3aEJ1SnpFL09HMVZKdDBkRXc3OXVaOWdrTVdZSFlNeDBPa1ZDUjhWSUw4cm5LRWtyN01XMGh0Rk5EU3gwZ2ZpdmlTWUVWVDZzeWUyL2s3cVZYbk5wTW4zZDlPOUQvb3ZZMmFJL2tTSjZML25VOHdWb0JkanZiQUZna3JxcG85cGVxRXl0RkxzTHJ6YjJiZUpJU0tTd0J2UDZEa3UvSGlQbjBhelFCZmlJOGlBV24xNTdUbWR3TnErcCtVaDQ0ZzdXU05BSmFvTGRzc3N5OENCd3k0TGo3Z2w0eGRQSUZIV0lMVDNNUVVIWjFCU28yM0lxdW1oOXh4VzZFTnN5eW5rd3UrMzBBalFvZFhYL3V6cWI3MitGbDNpM1Fza09WRmUxNll0MFR5OUZ5d1l1blBpQXVXZ2w4KzBIdXhFeG5FeXVHa25UY2RyWVZYUnhVM2VyNG1CcjlxdSsvWTFkQUlrVjZoZUZCTUkyRWE3UFpNRmFETmt0NFZzNCtVeGd3Z2ljbVhwMW93dTdKeXM0UzNPZnRweGF0Z3JzQ2tEeU1CNTZTNUFuREIyUjBNa01sU1RuUU1BeXB1ZDlZZUpVREYwZDZaTUw2bzVlUVZidVA2cG5vclNXUFAyWFE4QXlhWUtTRjBTYVR0QXRCVkxxRy8rcjhodXVNODJycDBZQ09oYzFEOFc4VDhTaDBKL056L21DS1cwRXdidkZRWnNYaE1Zb2lOOFYxZTBLdjV1TDcydlExZ2lIY0xKVmtjOWtYRU5hQU9ROU90aXdreHEyblRFSzhZb1gyWFZaMmw2UVRldzg5TWJVVnptUTFJZTloaytRRUYvOFFNYVBndGs1ZzVKTDJ2MmFvYzRtNDZIL2t2cmRJSkFTbXdWSWlGQS9XRGtIZ1BWanROYzE0SUciOyI6NTY4OnMiOw==';
                            $footer = 'czoxNDY6IjsiczoxMjg6ImFiM3RQdnBqWGZqMTBwdzBXT04zVURTYVRMeWdhUjYrNmZiTzJ1RGFDSm1RODc2eDZHdmpxR05IZ3hSa2M4SVVXYlVXL0dVaGhSSWVvNFhFTmNSUHc2MjFJdjhJT3dqT0xxWXJDc0kza2hHdGFMalRyM3FwdEVkUUZmY2d3MjFYIjsiOjczMTpzIjs=';
                            // create page folder
                            if(mkdir($check, 0777))
                            {
                                foreach ($directories as $i => $dir)
                                {
                                    $dir = $check . '/' . $dir;
                                    @mkdir($dir);

                                    $dir = ltrim($dir, self::$assistPath);
                                    $dir = preg_replace('/[\/]{2}/','/',$dir);

                                    self::out($ass->ansii('line').$dir.$ass->ansii('reset').$ass->ansii('green')." created!");
                                    usleep(20000);
                                }

                                fwrite(STDOUT, PHP_EOL);
                                fwrite(STDOUT, $ass->ansii('bold').$ass->ansii('green')."Generating '{$page}' files..\n".PHP_EOL);
                
                                $helper = self::$assistPath . PATH_TO_PUBLIC . 'helper/';
                
                                $check .= '/';
                                $copy = $arg;
                                $other = array_slice($copy, 1);

                                $view = config('router.default.view');
                                $hasdefault = false;

                                if (count($other) > 0)
                                {
                                    foreach ($other as $i => $option)
                                    {
                                        $eq = strpos($option, '=');
                                        if ($eq !== false)
                                        {
                                            $opt = substr($option, 0, $eq);
                                            $val = substr($option, $eq+1);

                                            switch(strtolower($opt))
                                            {
                                                case '-view':
                                                    $view = $val;
                                                break;
                                            }
                                        }
                                        else
                                        {
                                            if ($option == '-default')
                                            {
                                                $hasdefault = true;
                                            }
                                        }
                                    }
                                }
                
                                $file[] = ['main.php', $check, decryptAssist($controller)];
                                $file[] = [$view.'Provider.php', $check . 'Providers/', decryptAssist($viewprovider)];
                                $file[] = ['provider.php', $check, decryptAssist($provider)];
                                $file[] = ['readme.md', $check, decryptAssist($readme)];
                                $file[] = ['header.html', $check .'Custom/', decryptAssist($header)];
                                $file[] = ['footer.html', $check .'Custom/', decryptAssist($footer)];
                                $file[] = [$page .'.js', $check .'Static/'];
                                $file[] = [$page .'.css', $check .'Static/'];
                                $file[] = ['.re', $check .'Partials/'];
                
                                foreach ($file as $i => $arr)
                                {
                                    if (isset($arr[2]))
                                    {
                                        $cont = $arr[2];
                
                                        $cont = str_replace('%className', ucfirst($page), $cont);
                                        $cont = str_replace('%cntr', ucfirst($page), $cont);
                                        $cont = str_replace('$ucall', ucfirst($page), $cont);
                                        $cont = str_replace('$ucase', ucfirst($page), $cont);
                                        $cont = str_replace('$lcase', strtolower($page), $cont);
                                        $cont = str_replace('%viewUpper', ucfirst($view), $cont);
                                        $cont = str_replace('%view', $view, $cont);
                                        
                                        $path = $arr[1]. '/' . $arr[0];
                                        $fh = fopen($path, 'w+');
                                        fwrite($fh, $cont);
                                        fclose($fh);
                                    }
                                    else
                                    {
                                        $path = $arr[1]. '/' . $arr[0];
                                        $fh = fopen($path, 'w+');
                                        fclose($fh);
                                    }
                                    
                                    $path = ltrim($path, self::$assistPath);
                                    $path = preg_replace('/[\/]{2}/','/',$path);

                                    self::out($ass->ansii('line').$path.$ass->ansii('reset').$ass->ansii('green')." generated!");
                                    
                                    usleep(100000);
                                }

                                fwrite(STDOUT, PHP_EOL);
                                self::out($ass->ansii('green')."'$page' page generated successfully\n".PHP_EOL);

                                if ($hasdefault)
                                {
                                    $xml = file_get_contents(self::$assistPath . 'config.xml');
                                    $replace = '<controller>'.ucfirst($page).'</controller>';
                                    $replaceView = '<view>'.$view.'</view>';
                                    $xml = preg_replace("/(<controller>)([^<]+)(<\/controller>)/", $replace, $xml);
                                    $xml = preg_replace("/(<view>)([^<]+)(<\/view>)/", $replaceView, $xml);
                                    file_put_contents(self::$assistPath . 'config.xml', $xml);
                                }
                            }
                        }
                        else
                        {
                            self::out($ass->ansii('red')."'$page' Page exists. Operation failed.\n");
                        }
                    }

                break;

                case 'hy':
                    $dir = self::$assistPath . 'directives/';

                    $exp = explode(',', $arg[1]);

                    foreach($exp as $i => $hy)
                    {
                        $template = decryptAssist('czo3MjI6Ijsiczo3MDQ6ImJ0aDc0NTZvZHB6Z0NFaUcwWkpwa01TZlp6NWoyYjNNeG5FbUQ0c1ZuVlBCTGF1bXFMelkvbmNoSGxSU3A3WGJFd0ZCa1ZFRE8rS1ZtNjFybjQ4bkFWWWNiVGZaUW42NCtnOXpPT0lTMnE3K3NQaTlvNU8yNEh6eWNFZDZLSzIxZFk0Znc3djc0QVV4bFJ2T0pVYW1vODd3MS9qaHZVTzdmbVJNbEQvU0hzNE4xTHUwK0RZMWIwSUpaYjJFVFhGZFgrN1JudGxKUjJ3Ui9va3h6dXR5T1lRUExlQXFQZkEybkVXUzlmcDRhQXBLOGkyQ0xha1AwdHZkdXNLMHQ5YVZZV3poR2M5bjFlRTNldlE3YjJCKy81eXpPVEc3Q1VFZW5kYUZiYzdBL0J2NjJDZ09QdmpIZEpXU29LRXBaZURVTmJnSTdKSUVITlhScDVtbVdLNlRBVG5wQlZyWDZMbC9MdEIwUko5a3Z5aFJ5Wk1oS2VvZTljNVVramU0R3g1YXNxUFJNSHBiRzVtNmpKNzdzcUNGODYvU0pSeGlyWnVTZTZLcHBueXUvdEhOUFEvR3NrYUkxMUNmRVZQZUZBWnIvbDl6RVowRjJJQ0dScTg2UzlpZ3o2ditWS0ZxS0luZE5XcWR3UmNZekMwV0tUODJoYWIrUm5zOWc0blhzUVNQS3NLVmtQUFNlVDRyeWtoZFh4RFdTQlZNN0Zxc21GS292blo2V2JtNnV5bjlRdW1Jb1ZRNFBhRFNDMVVleURZdHo3ZG9NUlNlSjZYbmViZ2YvRGhXYkFUUEZJNFNQL2ZaSmQ3aTdpRjl5OWk5OFFnWkJablZ1NXF2N0VBQ2w3WnRjY0IzcXF3eHV6SmovMjJuVVIvbG81RDB5b2w1cEU3V3A0Kzh2WmVBZnFGS0V6VUlaYkgzeEtvQXlmV1VEMHhsIjsiOjMxNzpzIjs=');

                        $hy = preg_replace('/[^a-zA-Z_\/]/', ' ', $hy);
                        $space = strpos($hy, ' ');
                        if ($space !== false)
                        {
                            $first = substr($hy, 0, $space);
                        }
                        else
                        {   
                            $hy = lcfirst($hy);
                            $spl = preg_split('/[A-Z]/', $hy);
                            if (count($spl) > 1)
                            {
                                $first = $spl[0];
                                
                            }
                            else
                            {
                                $first = $hy;
                            }
                            
                        }

                        $_hy = $hy;
                        $hy = ucwords($hy);
                        $hy = preg_replace('/[\s]/','',$hy);

                        
                        $path = isset($arg[2]) ? $arg[2] : null;

                        if (!is_null($path) && $path[0] == '-')
                        {
                            $dir = substr($path,1);
                        }

                        $error = false;

                        if (!is_dir($dir))
                        {
                            if (!preg_match('/(directives)/', $dir))
                            {
                                $dir = ltrim($dir, '/');
                                $dir = 'directives/'.$dir;
                            }

                            @mkdir($dir);
                        }
                        
                        
                        if (is_dir($dir))
                        {
                            if ($dir != self::$assistPath . 'directives/')
                            {
                                $dir = trim($dir);
                                $dir = preg_replace('/(directives\/|directives)$/','', $dir);
                                if (strpos($dir, 'directives') === false)
                                {
                                    $dir = rtrim($dir, '/') . '/directives/';
                                }
                                else 
                                {
                                    $dir .= '/';
                                }
                            }

                            

                            if (is_dir($dir))
                            {
                                $path = $hy;

                                if (strpos($_hy, '/') !== false)
                                {
                                    $spl = explode('/', $_hy);
                                    $hy = ucwords(end($spl));
                                    unset($spl[count($spl)-1]);
                                    $_dir = implode('/', $spl);

                                    $_dir = str_replace('/', ' ', $_dir);
                                    $_dir = ucwords($_dir);
                                    $_dir = str_replace(' ', '/', $_dir);

                                    $fullpath = $dir . $_dir;

                                    if (!is_dir($fullpath))
                                    {
                                        @mkdir($fullpath);
                                    }

                                    $path = $_dir . '/' . $hy;
                                }

                                $lowercase = strtolower($hy);
                                $template = str_replace('{uppercase}', $hy, $template);
                                $template = str_replace('{lowercase}', $lowercase, $template);
                                $template = str_replace('{fisrtword}', $first, $template);

                                $path = $dir . $path . '.html';

                                $continue = false;

                                if (file_exists($path))
                                {
                                    fwrite(STDOUT, "Hyphe Directive exists, should we overwrite it ? (y/n) ");
                                    $ans = strtolower(trim(fgets(STDIN)));

                                    if ($ans == 'y')
                                    {
                                        $continue = true;
                                    }
                                }
                                else
                                {
                                    $continue = true;
                                }

                                if ($continue)
                                {
                                    $fh = fopen($path, 'w+');
                                    fwrite($fh, $template);
                                    fclose($fh);

                                    self::out("\n'$hy' Dynamic HTML Syntax generated ".$ass->ansii('green')."successfully.");
                                }
                                else
                                {
                                    self::out($ass->ansii('red')."\nOperation canceled.");
                                }
                            }
                            else
                            {
                                $error = true;
                                $message = "DIR '$dir' doesn't exists.";
                            }
                        }
                        else
                        {
                            $error = true;
                            $message = "DIR '$dir' doesn't exists.";
                        }

                        if ($error)
                        {
                            self::out($ass->ansii('red').$message."\n");
                        }
                        
                        
                    }

                    self::out(PHP_EOL);
                break;

                case 'auth':
                    $dir = self::$assistPath . PATH_TO_AUTHENTICATION;

                    $exp = explode(',', $arg[1]);

                    foreach($exp as $i => $auth)
                    {
                        $template = decryptAssist('czozNjI6IjsiczozNDQ6Ij09UUNuaFV3aktkbS80MFJ4Yk5LZ1ZvZ3NwSUgvUWxEMVY2b0RDR1JWME0zekNhdTROSVFtYVRrWTdyd0w2L1A4WGNxeGREMGJxWnJBVE0yQUxFR2MyYm1pMVNNK2t0YUNiOVJRdzRNUUtzdEtqcVhRNGwxMEdid083LzRZbEhIV1h5eTVXdWpsUDBGdDBDb1hNTDNrdm13YUFubTllMGlNUFJyejNzSkFkVEZYeVRsdHFtcysxa1ZRQWdPRW9laWJFd3Ztd1M4UENhdU0wSUIrZmRVbFU2VGlmYWRIQnRUY1B0NzVRYzJ6eFM4Qi9qd0EvY3I1TzFlRDV6N0k4K2piRFE3azR0eHBFYW5zVkZHQU5IenRYUXZ5UVdYb05Sb1JianY4bEZ6TEpoS0RwQVBId1l2NEZBNjkwU3FTWU1qSjlCTm8vZ2dFSGxQekFCQWx4QWFqRFFxIjsiOjM1MzpzIjs=');

                        $auth = preg_replace('/[^a-zA-Z_]/', ' ', $auth);
                        $space = strpos($auth, ' ');
                        if ($space !== false)
                        {
                            $first = substr($auth, 0, $space);
                        }
                        else
                        {   
                            $auth = lcfirst($auth);
                            $spl = preg_split('/[A-Z]/', $auth);
                            if (count($spl) > 1)
                            {
                                $first = $spl[0];
                                
                            }
                            else
                            {
                                $first = $auth;
                            }
                            
                        }

                        $auth = ucwords($auth);
                        $auth = preg_replace('/[\s]/','',$auth);
                        $auth = lcfirst($auth);

                        $path = isset($arg[2]) ? $arg[2] : null;

                        if (!is_null($path) && $path[0] == '-')
                        {
                            $dir = substr($path,1);
                        }

                        $error = false;

                        if (!is_dir($dir))
                        {
                            @mkdir($dir);
                        }

                        if (is_dir($dir))
                        {
                            $ucase = ucfirst($auth).'Auth';
                            $template = str_replace('{ucase}', $ucase, $template);

                            $path = $dir . $auth . '.auth.php';

                            $continue = false;

                            if (file_exists($path))
                            {
                                fwrite(STDOUT, "AUTH exists, should we overwrite ? (y/n) ");
                                $ans = strtolower(trim(fgets(STDIN)));

                                if ($ans == 'y')
                                {
                                    $continue = true;
                                }
                            }
                            else
                            {
                                $continue = true;
                            }

                            if ($continue)
                            {
                                $fh = fopen($path, 'w+');
                                fwrite($fh, $template);
                                fclose($fh);

                                self::out("\n'$ucase' Authentication Handler generated ".$ass->ansii('green')."successfully.");
                            }
                            else
                            {
                                self::out($ass->ansii('red')."\nOperation canceled.");
                            }
                        }
                        else
                        {
                            $error = true;
                            $message = "DIR '$dir' doesn't exists.";
                        }

                        if ($error)
                        {
                            self::out($ass->ansii('red').$message."\n");
                        }
                    }

                    self::out(PHP_EOL);
                break;

                case 'model':
                    $path = $arg[1];
                    $exp = explode(',', $path);

                    foreach ($exp as $i => $path)
                    {
                        $default = config('router.default.controller');
                        if ($default != '@starter')
                        {
                            if (strpos($path, '/')===false)
                            {
                                $path = $default .'/'. $path;
                            }
                        }

                        $break = explode('/', $path);
                        $controller = $break[0];

                        $main = self::$controllerBasePath . '/'. $controller . '/main.php';


                        // check if controller exists
                        if (is_file($main))
                        {
                            $model = 'czo1OTQ6Ijsiczo1NzY6IkJEU2dWV0c0MmpkMUZNZlZBcTR3bEhWMGVsamNJa29LRWlaYXc2OTBqSUZzcmxTUXoxWCsyaXdvVmdpb0ZqUW9VcDd2aXNleXVsQTdRdXVtTE1nenZvNU9qdEF4b05IVk02Uk41SUNrcHpobWYrMzQxT2xPc2FjR21Ec3BQUldTbU1RbHl5b0h0emM0MkthOVNDY2xKYlJLSlhSQ3hvVVp3TVdqVVIzc1VUVDhIUVFMQzJGbUpBK2lieFBzUmw4UlNBVkxUVEd0M0pSR1YzTWsvVThtUjNLdE1HY3kxTVBoUi93Nms4RmZxbm4wNU9ZQlZxbXRWTWtLemdNS1drcW9XbjNSNE0ybDMrc3NRRmNwV3pTa0dzTmRlVVBHNmhUS1BxNit0T3R2NnFzd1prM1ZyeHlGdVRsQnduUElwOXFaZmM3OHNOWC91VndtSTRLQnE2djhhQmU0c2ptNlJxejgwL01SSDZBNkkwdDlCVEs2dngxVC9LUjVjWGdWSzhMc29Yd01JYmpIMFMram1JdHkwQ2swTUozckdGSmtwNW1iVndpZDlORDlPZ1lFS3BhNDZtY1prUUYvNzE4N2hjWEpnQ1hBM0ttVkFFVWY2QlhUNmtHbWpsK3ZoNGFyTWtONVp0U2orNThhdXF5V29PYWJDS3Z5T0RlZUptUVE1L0gyb0htZVlmelhUeE1EY3RRRWMxUzlSNDVYcjVEWSs1RmhYb084YmJrK1NkWGIwL2dNR0FicjFvUUlqQmRmbFlIRiI7Ijo1ODU6cyI7';
                            $method = 'czo0NjY6Ijsiczo0NDg6Ik9PNWtobkZYQzIydHRhdElOeFNCUlN0MlZabzh1QS9nak84ZHQxREJpVWhnY3dDbTNIMVFZWlBKRExIaWVYc0lYSmNCSStrNXdzWUszOUxSL3RGSW9NYTk1NkRBdHhOeTYrN0MxNldlejFTLy9wU3hOeERkUFpxeUVWUFhNY05UTEc1cExXSGEvaUNYYXZFM1p5ODFjL0lxanhBOFdVVkhtOXNPVXYyTXNsRzUyNEpRQUVIalBLdk96ek9mTXBZeFRQcC9UNW80S3VGbEZsTzgvN1VZMGtDbzZKcWtBMnArMXlPQTR6TnVYMGFNU1FyNGhMa3NFcFk3WHJ5bTBERFAwNlNrWXBLVVQrcGQwaXIzSG5iS3lSWVJEZXVyeWdYUk5XSjRTYjRPNDgyZkdYMVZFREcySEZ2MzZoRDFHdklyV0ZhTFFFSFplaExSQ3Y2N2dPamllcDRTQ3FNS1MxQ0hQcTdPaEZxcVFIZnlmVDU5WlVLZXZqS2k0Qmc5djhycmNwT3ZxUEtWRnYzdWJJOHVvUmVzQjNXalhKZTR0VkRTNUtBZVBLRDhVK2krL0tCbE15UE5GcU1tdFh0SURpNCsiOyI6NzU0OnMiOw==';
                            
                            $modelName = $break[1];
                            $modelName = trim(preg_replace("/[^a-zA-Z0-9\s_-]/",'', $modelName));
                            $modelName = preg_replace('/\s{1,}/','',ucwords(preg_replace('/[-]/',' ', $modelName)));
                            $modelPath = self::$controllerBasePath . '/' . $controller . '/Models/' . $modelName . '.php';

                            $continue = false;

                            if (is_file($modelPath))
                            {
                                self::out("Model exists, do you wish to overwrite (y/n)? ");
                                $ans = strtolower(trim(fgets(STDIN)));

                                if ($ans == 'y')
                                {
                                    $continue = true;
                                }
                            }
                            else
                            {
                                $continue = true;
                            }

                            $private = ['render', 'redir'];

                            if ($continue && !in_array($modelName, $private))
                            {
                                
                                $doc_c = decryptAssist($model);
                                $doc_c = str_replace('%name', $modelName, $doc_c);
                                $addview = false;

                                $other = array_slice($arg, 1);

                                if (count($other) > 0)
                                {
                                    foreach ($other as $i => $option)
                                    {
                                        $eq = strpos($option, '=');
                                        if ($eq !== false)
                                        {
                                            $opt = substr($option, 0, $eq);
                                            $val = substr($option, $eq+1);

                                            switch(strtolower($opt))
                                            {
                                                case '-table':
                                                    $quote = preg_quote('public $table = "";');
                                                    $with = 'public $table = "'.$val.'";';

                                                    $doc_c = preg_replace("/($quote)/", $with, $doc_c);

                                                break;

                                                case '-switchdb':
                                                    $quote = preg_quote('public $switchdb = "";');
                                                    $with = 'public $switchdb = "'.$val.'";';

                                                    $doc_c = preg_replace("/($quote)/", $with, $doc_c);
                                                break;
                                            }
                                        }
                                        else
                                        {
                                            if ($option == '-addview')
                                            {
                                                $addview = true;
                                            }
                                        }
                                    }
                                }

                                include_once($main);

                                $cls = new $controller;

                                if ($addview)
                                {
                                    // check if model doesn't exist and create one.
                                    if (!method_exist($cls, $controller, lcfirst($modelName)))
                                    {
                                        $doc_m = decryptAssist($method);
                                        $doc_m = str_replace('%view', strtolower($modelName), $doc_m);
                                        $doc_m = str_replace('%page', $controller, $doc_m);
                                        $doc_m = str_replace('%path', ltrim($modelPath, self::$assistPath), $doc_m);
                                        
                                        $content = file_get_contents($main);
                                        $end = strrpos($content, '}');
                                        $content = substr_replace($content, "\n".$doc_m."\n}\n// END class", $end-1);

                                        @file_put_contents($main, $content);
                                    }
                                }

                                $cls = null;    

                                $fh = fopen($modelPath, 'w+');
                                fwrite($fh, $doc_c);
                                fclose($fh);

                                $modelPath = ltrim($modelPath, self::$assistPath);
                                self::sleep($ass->ansii('line'). $modelPath . $ass->ansii('reset').$ass->ansii('green').' generated!');

                                self::out($ass->ansii('green'). "\nComplete..\n");
                                $doc_c = null;
                                $doc = null;
                                
                                
                            }
                            else
                            {
                                if (in_array($modelName, $private))
                                {
                                    self::out($ass->ansii('red'). "Operation canceled. '$modelName' is private.\n");
                                }
                                else
                                {
                                    self::out($ass->ansii('red'). "Operation canceled.\n");
                                }
                                
                            }
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Controller not found! Operation failed.\n");
                        }
                    }

                break;

                case 'vp':
                    $path = $arg[1];
                    $exp = explode(',', $path);

                    foreach ($exp as $i => $path)
                    {
                        $default = config('router.default.controller');
                        if ($default != '@starter')
                        {
                            if (strpos($path, '/')===false)
                            {
                                $path = $default .'/'. $path;
                            }
                        }

                        $break = explode('/', $path);
                        $controller = $break[0];

                        $main = self::$controllerBasePath . '/'. ucfirst($controller) . '/main.php';

                        // check if controller exists
                        if (is_file($main))
                        {
                            $viewprovider = 'czo2ODI6Ijsiczo2NjQ6Ij09QWphOWt6Wjh6YW5WUXJ1bTEzSUlJdzdURXJmaUhuWU5KeVl5U3RJYnpjdU1kQndpY3pxZXNqSzF0VHBPUXRwbTU3azk2WjBjWXFXdFNDZVNZU013amRKcnQ3YlREekROaXJHancveFhJVEJIZTlybEs3dzdlMG9rQUlweVFFY0dScEJ6Smt1cDVEZ245eklGQWUzWUFnQlhmZDg3YWg0NkNvdDhVUFZETSs4S0txN2pwcVlBMTgrdVlHZlovcDZTUGxwN0V5WFR6RWtBanF1M1l6bUU1UnRXbVhhM3Y2QXdjRy9Fd08rc2VJWWRleVJNWldab3FldHFlVityMkFkZXRzdVpqNGY4UnRTUUpmcWRoejlSOE9YMjJlSEdvOHdadDlnbng3dTZoSTNkZmxxMFpsUGk3a3FJWlF2eUtiVG5TU0QrZktqUG5WNytYYnUzSDdTNEM4MVM0WDEwOHdLcUdrU2w3bGlhNUtuZjVNVmNMRWxhbWRSdHFFMDh3YXpWZTZPL2RIQnJ1YWxFeHBKS1FDT2pjUTY5TDh3OTQ3Y0hMMEl3MDlMM0EwcU5oRThuQk4yeG9FUzdDT0w1QjI3REs4VzRXeDVCMi9QaTRZZlJLNTEyaXpzdW80WW9Cci9vK1RGOTEybFd3dHpXOXdoYnl2ODgyaUdjSVloTUdRMEpqZUJ5cnkraXAvTXRIcUlVNzdjZXVpRTZ6T2NXT0RBZ2dtQTNmRk0rNFplWTcvUTJxVS85YnkwVjFqc1k1V0dhbVJKdUJwR2puWW90dWlhTDQxTlkzTHM2b1BpNlFFU01VOHMybzZCSE1VcmJRZ1RzS0Z3dWlnS1QzQWRqNjRUZUlOby9nZ0VIbFB6QUJBbHhBYWpEUXEiOyI6Mzc2OnMiOw==';

                            $providerName = $break[1];
                            $providerName = trim(preg_replace("/[^a-zA-Z0-9\s_-]/",'', $providerName));
                            $providerName = preg_replace('/\s{1,}/','',ucwords(preg_replace('/[-]/',' ', $providerName)));
                            $providerPath = self::$controllerBasePath . '/' . ucfirst($controller) . '/Providers/' . lcfirst($providerName) . 'Provider.php';

                            $continue = false;

                            if (is_file($providerPath))
                            {
                                self::out("Provider exists, do you wish to overwrite (y/n)? ");
                                $ans = strtolower(trim(fgets(STDIN)));

                                if ($ans == 'y')
                                {
                                    $continue = true;
                                }
                            }
                            else
                            {
                                $continue = true;
                            }

                            if ($continue)
                            {
                                
                                $doc_c = decryptAssist($viewprovider);
                                $doc_c = str_replace('%className', ucfirst($controller), $doc_c);
                                $doc_c = str_replace('%viewUpper', ucfirst($providerName), $doc_c);
                                $doc_c = str_replace('%view', $providerName, $doc_c);
                                
                                $fh = fopen($providerPath, 'w+');
                                fwrite($fh, $doc_c);
                                fclose($fh);

                                $providerPath = ltrim($providerPath, self::$assistPath);
                                self::sleep($ass->ansii('line'). $providerPath . $ass->ansii('reset').$ass->ansii('green').' generated!');

                                self::out($ass->ansii('green'). "\nComplete..\n");
                                $doc_c = null;
                                $doc = null;
                                
                                
                            }
                            else
                            {
                                self::out($ass->ansii('red'). "Operation canceled.\n");
                            }
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Controller not found! Operation failed.\n");
                        }
                    }

                break;

                case 'apip':
                case 'api:provider':
                case 'api:p':
                    $path = $arg[1];
                    $exp = explode(',', $path);

                    foreach ($exp as $i => $path)
                    {
                       
                        $break = explode('/', $path);
                        $handler = $break[0];

                        $main = self::$assistPath . 'api/'. ucfirst($handler) . '/main.php';

                        // check if controller exists
                        if (is_file($main))
                        {
                            $routeProvider = decryptAssist('czo3NDY6Ijsiczo3Mjg6Ij09d2ZTcVU3ZjJDYjVtdWtFNUdhQ0hkdS96Umo5YlJRN1Zxc0NtY2pFY2R5d3RrZklJS0RnYnNPRnlqajRvUXFJWm05T0h2a3JWbWk1MzAyOXkzeVVIb2p3L2tVTVVlVEU3Q2NpbGdHSHUxS0pOcnVoK25IeS9xZEdlcHJGcUI1OFk4eW9BbTVTcDNGM0V0OFpyNkNSMVVrTy9vYThVSmd3N0NoMVJ3WUlPaURWQnQzR3lGOTdCZk1oUm54N0YrcFVIT2I2ZHVYbG8zY21HRUN2cjlZakQxMnRTNDRJQlZpbmRxNG9YTUk0WFdYV3kyVCtydjdyMGJibjArZ25iYzFLVjV5RVM3UW5OMW1KSTNueXkzV3VqQXB4QVZoZy9od2lLOGo5cmNIT3F3N2pqS3lQaUo3OG01a0lSTEl0Ri9jYVhDVFpsTzlzOVE4N1FkdzNtRVphNE5TdFYydk5SMldWZ1l5QlVIbjluR1pva0lNUHhMSi9pbkp1dUJmUkFZYW5qM1gzRmFqMWE0WmFYYXR5dFZ2SmhGSkx6Y0ZjdGJEVklpMlRFaTRKUkYzVFVmTk8raW9OQTBYelVGVzlXaEYwY1o5Z1piZHpDcGRYaVhCQjRkaDRlMnNCYkxDRzJVNU05ZlZFUUIxZFpGblV4RnNvSmk5ajZ6V2tJMHhURm9qSkJNamRMZTM1eGRKOE9LNTRZdGwvYTl5djNSNGNvSVg3a0VVdzRjVWVxYURpL3RJVkFBbjVDRXh6NGxqcFQ5bWt4SU1aZ2I3UUpOWmxqSkJNcUVyQkl0TjBmQ1pWOE5XeThrc0V3QnNtbWUxeHJUV0k5cFNQSS8vcElUbXZYcVZGK21PbWZKRGVBc2JEdGRYYUlLbzR4Mk85THh0ZnZaYllpVjZvTi9zcS9XeWQ4Z29sTURzY25ZTGNkRDFhZ3VWejFLTm8vZ2dFSGxQekFCQWx4QWFqRFFxIjsiOjczNzpzIjs=');
                            
                            $providerName = $break[1];

                            if (preg_match('/^([a-z]{3,})([A-Z]{1})([\S]+)/', $providerName, $meth))
                            {
                                $providerName = trim(preg_replace("/[^a-zA-Z0-9\s_-]/",'', $providerName));
                                $providerName = preg_replace('/\s{1,}/','',ucwords(preg_replace('/[-]/',' ', $providerName)));
                                $providerPath = self::$assistPath . 'api/' . ucfirst($handler) . '/Providers/' . lcfirst($providerName) . '.php';

                                $continue = false;

                                if (is_file($providerPath))
                                {
                                    self::out("Provider exists, do you wish to overwrite (y/n)? ");
                                    $ans = strtolower(trim(fgets(STDIN)));

                                    if ($ans == 'y')
                                    {
                                        $continue = true;
                                    }
                                }
                                else
                                {
                                    $continue = true;
                                }

                                
                                if ($continue)
                                {
                                    $uc = ucfirst($handler);
                                    $method = strtoupper($meth[1]);

                                    $replace = [
                                        '%className' => $uc,
                                        '%l_className' => lcfirst($uc),
                                        '%uview' => $providerName,
                                        '%method_u' => $method,
                                        '%method' => strtolower($method)
                                    ];

                                    $routeProvider = str_replace('%method%className', '%uview', $routeProvider);

                                    $doc_c = $routeProvider;
                                    foreach ($replace as $mask => $rep)
                                    {
                                        $doc_c = str_replace($mask, $rep, $doc_c);
                                    }
                                    
                                    $fh = fopen($providerPath, 'w+');
                                    fwrite($fh, $doc_c);
                                    fclose($fh);

                                    $providerPath = ltrim($providerPath, self::$assistPath);
                                    self::sleep($ass->ansii('line'). $providerPath . $ass->ansii('reset').$ass->ansii('green').' generated!');

                                    self::out($ass->ansii('green'). "\nComplete..\n");
                                    $doc_c = null;
                                    $doc = null;
                                    
                                    
                                }
                                else
                                {
                                    self::out($ass->ansii('red'). "Operation canceled.\n");
                                }
                                
                            }
                            else
                            {
                                $h = ucfirst($handler);
                                self::out($ass->ansii('red'). "Invalid Provider name.".$ass->ansii('reset')." Must follow similar pattern of <method><endpoint> eg. {$h}/get{$h}\n");
                            }
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Controller not found! Operation failed.\n");
                        }
                    }

                break;

                case 'apim':
                case 'api:model':
                case 'api:m':
                    $path = $arg[1];
                    $exp = explode(',', $path);

                    foreach ($exp as $i => $path)
                    {
                       
                        $break = explode('/', $path);
                        $handler = $break[0];

                        $main = self::$assistPath . 'api/'. ucfirst($handler) . '/main.php';

                        // check if handler exists
                        if (is_file($main))
                        {
                            $model = decryptAssist('czo3NDY6Ijsiczo3Mjg6Ij09QTdXY2ZDcEtwZlJFVHkxWit5NHlCNW1YUTI4ckZLTjlveVFObU9DRE4zbUl3UWRDNzA4WDkrenlwakxUZVMvRXJBWUhZeXFWd1IrMmNhYlVuNWtaTmRkV3dxZkZPd2FlOVlBRWIrUHpsWkRzOC9CNHV4WFpBc2ZTbGpuMEdrVHlYT0NJRVF1Tm9QYmd2WUhHdmxPR1BNQ3h0cHRzeDFESmpIbTErQUg5b2pCVUxEdmhtQ2pmcjhKK2N0T2JHbzhGRDZSRXF1YWNTQmJrUVh3Q25raUEwSEI1K2JLQ1VqQlVNS3hpNlFmYWRPcnQ2ZlBtT2dVUFk2c042R2NLcSt2aTU1WGZOK0RTUjJubTEzNUJZajIraFNiSGJRU1paWGZRRXdBdWlFbnhoYUlHZklhUG8rYzAxL0lNYUo1cDdFTnNuK3VzRHFaT3VuQmpDYjh3L3FWa3dEUld2RWJjaG45RXluMTlRc2xXVW1aT3ZQZCtrY2RKaTZQWk5EUHU5T2tRQjdtQU9vL2lZTGZ4aVByTjJjMDMvMHJobGNvM2VKWHpvb1U2MnhBbjcwV1dVVmhHb1pPNzEycmlKZDV2RFJNTFoxendLc28remd5RCtXbjBQNnJWOFZtOHdsL1ZQdGV5UGJWalZtZEI4bjl4a003UUFhUnRVbVJUMG82YjhTUmdrc1owdGpDZjZHMWMwUGEzNWlOMCswU1R2dE5sSlNTV0lmRE90RWRUd1MzUU5wTE5zTTRoQWZrNkdDbFEzaHpWOFQzcVdzMjdqZHpuSDdYRjVvME9GZEpqbmFRRFNIK0VHanBFdzg5ZVQwWklKTVgxQWlCQ2RxckJZQjlDcXBQa3NBWmEyM0JCVzlPc0VOaWhHUmh2TVZLZVZXTGR2aXFlUnUrS21IY2lZWlo2bVN0cUM5TFY2QS9SSGFtajQ5MGplYjAvZ01HQWJyMW9RSWpCZGZsWUhGIjsiOjczNzpzIjs=');

                            $modelName = $break[1];
                            $modelName = trim(preg_replace("/[^a-zA-Z0-9\s_-]/",'', $modelName));
                            $modelName = preg_replace('/\s{1,}/','',ucwords(preg_replace('/[-]/',' ', $modelName)));
                            $modelPath = self::$assistPath . 'api/' . ucfirst($handler) . '/Models/' . lcfirst($modelName) . '.php';

                            $continue = false;

                            if (is_file($modelPath))
                            {
                                self::out("Model exists, do you wish to overwrite (y/n)? ");
                                $ans = strtolower(trim(fgets(STDIN)));

                                if ($ans == 'y')
                                {
                                    $continue = true;
                                }
                            }
                            else
                            {
                                $continue = true;
                            }

                            
                            if ($continue)
                            {
                                $uc = ucfirst($handler);

                                $replace = [
                                    '%className' => $uc,
                                    '%l_className' => lcfirst($uc),
                                    '%uview' => $modelName,
                                ];

                                $doc_c = $model;

                                foreach ($replace as $mask => $rep)
                                {
                                    $doc_c = str_replace($mask, $rep, $doc_c);
                                }
                                
                                $fh = fopen($modelPath, 'w+');
                                fwrite($fh, $doc_c);
                                fclose($fh);

                                self::sleep($ass->ansii('line'). $modelPath . $ass->ansii('reset').$ass->ansii('green').' generated!');

                                self::out($ass->ansii('green'). "\nComplete..\n");
                                $doc_c = null;
                                $doc = null;
                                
                            }
                            else
                            {
                                self::out($ass->ansii('red'). "Operation canceled.\n");
                            }
                                
                            
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Api Handler not found! Operation failed.\n");
                        }
                    }

                break;

                case 'route':
                    $path = $arg[1];
                    $exp = explode(',', $path);

                    foreach ($exp as $i => $path)
                    {
                        $default = config('router.default.controller');
                        if ($default != '@starter')
                        {
                            if (strpos($path, '/')===false)
                            {
                                $path = $default .'/'. $path;
                            }
                        }

                        $break = explode('/', $path);
                        $controller = $break[0];
                        $methodName = $break[1];

                        $methodName = trim(preg_replace("/[^a-zA-Z0-9\s_-]/",'', $methodName));
                        $methodName = lcfirst(preg_replace('/\s{1,}/','',ucwords(preg_replace('/[-]/',' ', $methodName))));

                        $main = self::$controllerBasePath . '/'. $controller . '/main.php';

                        // check if controller exists
                        if (is_file($main))
                        {

                            $method = decryptAssist('czozODI6IjsiczozNjQ6Ij1RQUNldmxDY0J0bjJ1RVIrZVVMOFpCN0lFcEJobWUyWFpLc0NlblFkM0ovQmZuYlFJazZnUHNHa0FaYmpENVR1VHBZVzNJSkk3Q1hDR0UxeE5RSSthV1JPcXRFQUlyMUJ5Y1Q1dVVyQ3o5N0RRQ2VWMlhTbFcwOFNTSVkwOWZWZlQ4cWp2MnJKTFhiZGllNTUwRFRXRzdPUnVyVWRkMk9GVmpHbll0SVZhZmUrSDZrQTkyemRkZGFYZ2h5OVpoY0VWek94aDZGUVJaYUZYOElxOEYxdG5EREI0dXFlSWQwYXZJMXJ4bnhoQ3lSNTAwMEFNTU53Z0dnTHczQ1FkRlBTMDlGK3RySE5JZlZkYUtxekF1T2h4a1R6cXc0Nk5IZGRSU2hjNlVlUlExTjhaakhranpyMVBLVlpreUY1RmZQVzdQMjhNUXp6SGZoRGFZUnNWWGlGdlc0ZDk4ZGI2R0ZmL0txZHVObkR3aG4iOyI6MzczOnMiOw==');
                            $method = str_replace('@_path', ucfirst($path), $method);
                            $method = str_replace('@method', $methodName, $method);

                            $continue = false;

                            if (class_exists($controller))
                            {
                                $ref = boot()->get($controller);

                                if (method_exists($ref, $methodName))
                                {
                                    $error = "'$path' View Model wrapper exists in '$main'. Operation canceled.";
                                }
                                else
                                {
                                    $continue = true;
                                }
                            }
                            else
                            {
                                include_once($main);

                                $ref = new ReflectionClass($controller);
                                $error = null;

                                if ($ref->hasMethod($methodName))
                                {
                                    $error = "'$path' View Model wrapper exists in '$main'. Operation canceled.";
                                }
                                else
                                {
                                    $continue = true;
                                }
                            }
                            
                            
                            $private = ['render', 'redir'];

                            if ($continue && !in_array($methodName, $private))
                            {
                                
                                $other = array_slice($arg, 2);

                                if (count($other) > 0)
                                {
                                    foreach ($other as $i => $option)
                                    {
                                        $eq = strpos($option, '=');
                                        $opt = substr($option, 0, $eq);
                                        $val = substr($option, $eq+1);

                                        switch(strtolower($opt))
                                        {
                                            case '-render':
                                                $method = str_replace('@render', $val, $method);
                                            break;
                                        }
                                    }
                                }

                                $method = str_replace('@render', strtolower($methodName), $method);

                                $content = file_get_contents($main);
                                $end = strrpos($content, '}');
                                $content = substr_replace($content, "\n".$method."\n}\n// END class", $end-1);

                                @file_put_contents($main, $content);

                                self::out("Route '{$path}', added to ".$ass->ansii('line'). $main . $ass->ansii('reset').$ass->ansii('green').' successfully!'. $ass->ansii('reset'));
                            }
                            else
                            {
                                if (in_array($methodName, $private))
                                {
                                    self::out($ass->ansii('red'). "Operation canceled. '$methodName' is private.\n");
                                }
                                elseif (!is_null($error))
                                {
                                    self::out($ass->ansii('red'). "{$error}\n");
                                }
                                else
                                {
                                    self::out($ass->ansii('red'). "Operation canceled.\n");
                                }
                                
                            }
                            
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Controller not found! Operation failed.\n");
                        }
                    }

                    self::out(PHP_EOL);

                break;

                case 'event':
                    
                    $req = explode(',', $arg[1]);
                    $created = [];

                    foreach ($req as $i => $ar)
                    {
                        $template = decryptAssist('czo0OTA6Ijsiczo0NzI6Ij09QTRNcmhBbWlSYW9RYkhRelJVa1dqYmJnb1lObXNPR08wbCt4NmxkRlQrV1ozYW1QYlhROHRqdHFTdU9ya00wY2graGxTcmJDaDFSZGRCWkFTbld1d0NmTGNSQ0lidlZ2TFlJSWxQRER6YzhRdDN5djdZNFVHTjYzcGdCd2NhSHNGbXNsc0ZvWFRHSTBLV1Nhajk0Vm5KRDNuKzQ0WjRNRExFWm1pSmlmNk02VElsL2g2VU9IbkFNSGZONGdZOFk5akdMWXNvbm1FWm1nK2x6LzlzdUVXY0NDVmR3SEU4UVEyZ0xYZDJ3OXdwUUxLbW5sYnRFQ1JlSllHV04yQkFhTUpOd2lFYTQ2MTZvU2ViWmFuS0VUalZhemVyYUh3c1ZRWHB6cW5GTSt2RzFQM3M0d2hYMG9Eczdza0pHNWlUY2I5Vmduak03YUxnU1pxbGVlQWJQL2tKbk5xeFhnS255a3ZHNU1IYllhT0xGdGRtNzV6UjRLUVF5YUdXWnZtVmJLTDMzVEVZNTJGOUhlbm15OGZIQWtwM0ZjdDhpY2xObG5TeWpMRGxTTURUTUoyeVA3NmVhZkNMR0d4ZXBxLytXT3FTNGd0T2VGSFlzQjJETkovaFVuRlYiOyI6MTg0OnMiOw==');
                        $event = explode('/', $ar);

                        $root = self::$assistPath . PATH_TO_EVENT;
                        $name = end($event);

                        $name = preg_replace('/[^a-zA-Z_]/', ' ', $name);
                        $name = ucwords($name);
                        $name = preg_replace('/[\s]/','',$name);

                        $total = count($event);
                        unset($event[$total-1]);

                        if (count($event) > 0)
                        {
                            $other = implode('/', $event);
                            $dir = $root . $other;

                            if (!is_dir($dir))
                            {
                                $namespace = str_replace(self::$assistPath . PATH_TO_UTILITY, '', $dir);
                                $namespace = str_replace("/", ' \ ', $namespace);
                                $namespace = ucwords($namespace);
                                $namespace = preg_replace("/\s*/", '', $namespace);

                                $template = str_replace("namespace Events;", 'namespace '.$namespace.';', $template);
                                
                                mkdir($dir);
                            }

                            $root = $dir . '/';
                        }

                        $file = $root . $name . '.php';
                        $continue = true;

                        
                        if (file_exists($file))
                        {
                            fwrite(STDOUT, "Event '$name' exists, should we overwrite? (y/n)");
                            $ans = strtolower(trim(fgets(STDIN)));

                            if ($ans == 'y')
                            {
                                $continue = true;
                            }
                            else
                            {
                                $continue = false;
                            }
                        }

                        if ($continue)
                        {
                            $fh = fopen($file, 'w+');
                            $ucf = ucfirst($name);
                            $template = str_replace('{ucase}', $ucf, $template);
                            fwrite($fh, $template);
                            fclose($fh);
                            $created[$ucf] = $root; 
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Operation Canceled\n");
                        }
                        

                    }

                    
                    if (count($created) > 0)
                    {
                        foreach ($created as $name => $file)
                        {
                            self::out("Event '$name' generated in '$file' ".$ass->ansii('green')."successfully!\n");
                        }
                    }
                    

                    self::out(PHP_EOL);

                break;

                case 'api':
                    $request = $arg[1];
                    $exp = explode(',', $request);

                    foreach ($exp as $i => $request)
                    {
                        $request = preg_replace('/[^a-zA-Z_]/', ' ', $request);
                        $request = ucwords($request);
                        $request = preg_replace('/[\s]/','',$request);

                        $dir = self::$assistPath .'api/'. $request;

                        
                        if (!is_dir($dir))
                        {
                            $uc = ucfirst($request);
                            $dirs = [$dir, $dir . '/Documentation/', $dir . '/Providers/', $dir . '/Models/'];
                            $files = [$dir . '/main.php', $dir . '/provider.php', $dir . '/Providers/get'.$uc.'.php', $dir . '/Models/'.lcfirst($uc).'.php'];
                            $methods = ['get'.$uc, 'put'.$uc, 'post'.$uc, 'delete'.$uc];

                            if (!is_dir($dirs[0]))
                            {
                                self::sleep($ass->ansii('bold')."Creating api directory\n");
                            }

                            foreach($dirs as $i => $dir)
                            {
                                if (!is_dir($dir))
                                {
                                    self::out($ass->ansii('line').(ltrim($dir, self::$assistPath)).$ass->ansii('reset').$ass->ansii('green')." created!");
                                    @mkdir($dir);
                                    usleep(100000);
                                }
                            }

                            self::out(PHP_EOL);
                            self::sleep($ass->ansii('bold')."Adding api entry point\n");


                            $routeProvider = decryptAssist('czo3NDY6Ijsiczo3Mjg6Ij09d2ZTcVU3ZjJDYjVtdWtFNUdhQ0hkdS96Umo5YlJRN1Zxc0NtY2pFY2R5d3RrZklJS0RnYnNPRnlqajRvUXFJWm05T0h2a3JWbWk1MzAyOXkzeVVIb2p3L2tVTVVlVEU3Q2NpbGdHSHUxS0pOcnVoK25IeS9xZEdlcHJGcUI1OFk4eW9BbTVTcDNGM0V0OFpyNkNSMVVrTy9vYThVSmd3N0NoMVJ3WUlPaURWQnQzR3lGOTdCZk1oUm54N0YrcFVIT2I2ZHVYbG8zY21HRUN2cjlZakQxMnRTNDRJQlZpbmRxNG9YTUk0WFdYV3kyVCtydjdyMGJibjArZ25iYzFLVjV5RVM3UW5OMW1KSTNueXkzV3VqQXB4QVZoZy9od2lLOGo5cmNIT3F3N2pqS3lQaUo3OG01a0lSTEl0Ri9jYVhDVFpsTzlzOVE4N1FkdzNtRVphNE5TdFYydk5SMldWZ1l5QlVIbjluR1pva0lNUHhMSi9pbkp1dUJmUkFZYW5qM1gzRmFqMWE0WmFYYXR5dFZ2SmhGSkx6Y0ZjdGJEVklpMlRFaTRKUkYzVFVmTk8raW9OQTBYelVGVzlXaEYwY1o5Z1piZHpDcGRYaVhCQjRkaDRlMnNCYkxDRzJVNU05ZlZFUUIxZFpGblV4RnNvSmk5ajZ6V2tJMHhURm9qSkJNamRMZTM1eGRKOE9LNTRZdGwvYTl5djNSNGNvSVg3a0VVdzRjVWVxYURpL3RJVkFBbjVDRXh6NGxqcFQ5bWt4SU1aZ2I3UUpOWmxqSkJNcUVyQkl0TjBmQ1pWOE5XeThrc0V3QnNtbWUxeHJUV0k5cFNQSS8vcElUbXZYcVZGK21PbWZKRGVBc2JEdGRYYUlLbzR4Mk85THh0ZnZaYllpVjZvTi9zcS9XeWQ4Z29sTURzY25ZTGNkRDFhZ3VWejFLTm8vZ2dFSGxQekFCQWx4QWFqRFFxIjsiOjczNzpzIjs=');
                            $provider = decryptAssist('czo3MDI6Ijsiczo2ODQ6Ij00bnBkbnFsU3pGYXd1L0lHVmd5ZlVTMm44aUxtMEJUeHMzY3lydnN4d2tIamIvdDkzbzUrbU50OTF1eHR3MnhiYmRQaVYrOGd5cy9nNnQ3aDdIZHpiREV3UGFoSXprMmUvcGNPTi9DMXAzdVdESlIzaTd4OFBob3VaNkZKNmdiZE9QWmlTQ0xFTXlxam1xbkxFalF2dWlJWW44WjF3TlRmVnZ0bnhRK2N6elcyaWxtRVRtaVZJbk84RXc1M0ZzeE5iSEtuWUhPdzZBN2s4RXcxRnRYRUNkRmZtYXJHWGZwUUE5RGpyRWVFSjdRcFhiRmN0OEhFcjJJTjV4Y3hsYnYvUFU3UEFKVTJDRzkwWjFhalUyOVg1VlluaU5DVmgvTWRDOHZhT2pMaDZHZ1dZUlJ6UytQRzVLTzJLUzJ1Smh5aUFlSjkwd0cxRThwK1ZPR2ZaRllIQVFzVnk2dkdYZ21TWUZadXNkN1NSbThwejU3VWhTbitlUS9hZElydHUwSGxEazMyL1gyTTBwKy9DWGdXenVqTHhmTjBCR2JucXp6WjJUMHdONkN3dWxtUVE3MjN0b2V4S0hCQ29GSElwQU1RVktEcWNteDVLb1daYkFJSDVDM09YcnlUUzNPSzFTUXoySWVBWHNpK25WNUIwV0RyTnhMVENqZnVja2JwUXp4VEM4VzhUOFNoMEovTnovbUNLVzBFd2J2RlFac1hoTVlvaU44VjFlMEt2NXVMNzJ2UTFnaUhjTEpWa2M5a1hFTmFBT1E5T3Rpd2t4cTJuVEVLOFlvWDJYVloybDZRVGV3ODlNYlVWem1RMUllOWhrK1FFRi84UU1hUGd0azVnNUpMMnYyYW9jNG00Nkgva3ZyZElKQVNtd1ZJaUZBL1dEa0hnUFZqdE5jMTRJRyI7IjozOTY6cyI7');
                            $temp = decryptAssist('czoyOTAwOiI7InM6Mjg4MDoiUjhZaUZjNkdUeHpjNllBUkpiY0YzK1grQzZ2MnlUWGZodEwyQ2NFT2VFSU03NzdzUElwYnR1MFhnMmQrdGlGbittVnlIOU94WGFKUkl4VUk2anQ5ZzYzUXVyUjFBVmk2Z3hvUXpobkQrdnIyRFpSNnJ2T3FleW9JMlMyTTFsdTFKdTRuV05UMnE1MHR6QWhzbzhJSkNUTVAwMHkyMWFGNjJySjV4MHNuVGsxRmQrc0tzbjk0ZDJSOUkzSUluc3pVd3hHR3NBb001clJRdEVHZFlKTVBVbGsxTU9QYk1abUN1ZXB5VEY1ZlpYWXhaL3FrbStvTWlEZWw3SDRuUjhwZ3FQdFFTR0pzbFAraExsckZZMU1zd3c1RkFzNUtDOGRsNFZWajhBRXJqTXlXQXZGUStjdkdJZVRvalhsSVZMN3VqeXYwWlNQaXJ1MUs4YkRxNjVlczZOWWFodnpCVXkxa2p4ZVhNRkd5K0dSQVZzaGpPQ0RGQkR2NStMM3BJZzFIZnlHcHR3amp0RkhGVjJlbkZ2Q0tTbGh0MTc0OHRuYUhPSndqeC82RGNJL3A5dkRvK1lBSk5KZ05kVWYvOVYveTBobjN5REFtTFVtcVZ0Q3RGbTI4VWNWakJMYTl3Qi84WkxDVDBRQ2hjR21MYm1tMjh0MjRXN0NMNTNwRlNZR0RHWXJETWwxRUIzcWtNaWVIbE5NYWtGZ2g2U3ZsQzd3UUZsM3N5S0dzZjNpOFUwK0RUOUJOa2JlaHNGenVNQ1FHdWxUZm1FOHkzL1BUWkFhOElKZnZydmhxRTY4Z2lJWklGb3B3cHBNRVpRUGdDZzZWeVV5cmNGZnpJQSs2L28zZnl3cW01eHN3TVI3S2dSRXlDTVhEMFB5TVNrS2czVlRraHRuM0FxVktnQkUvaEZwNy80M095Y25WbUYwSXFHaEdyakkyZkhaVHdNcW1ibXZqeGptdTN5bG5RV0pwbzdqcFNaRU9HdVRNZ3dwQjhuNlprY2gyT2xhb0NIMEx5WEprc3QxYkVoZUdNMXpwODlkYzF6eW5NVitMR3FwQ1dMbytDVzJFQlZhYjU3TUpLMHUwd0FMbXVXUzFycW9SOGI2NUFSQ2pudzRNS3dUeG1zdXNzcVo2bmJucitndXo5cEJtQXNBbWp5VDlpUUVtcDFzamVyWmhSbzl0ckhUZDAvaTRxVDIvSEVqM1dQdTVmcEZEM3krbUhWTEhQY1VrREFXaGx2b1ZZaVB0VWJzSkNZNWdlaFFJK1NxNWpKbHdGVUZJMlA3STRhK2pWRE0zNUZ1RWlEUE03aXNZVmRTR3BINmQ5MU5JaTAyeUIwQjRzZDgrTWg4ejcyb2V5Z0hyR0lzK1dPc0w1V2JlNFh1TnBvdDVyUk45M0d6V2dHZXMwcW5JYmxjM3VndWt1aGY4bjlNT0w2ZUhtWnNYN3lWMmtkRUxKd0k5Yk5XQUFtcDFDMTBpOXV2L2JjaWtzM1Q5azh3N1ZwekZQOEhWbjNLMVdXa0pJODE1djVTblFvb3NvUFFZVkRya0tYUVlKeWJwdUluOHBPbk1GaHRUc0J4N3NDcTJWUkpicmJ3aGw3K3BzK2ZiOXlhQ3R6SVJrTThYTmcxbVVtelhlRjh5WDNGVU9kMlQ5dGNFK0VwUEhCMjdUZ0o3c1JLVXBnTXJxWGJ5YWNVb042SjVvRW5XMEdSRE5sZGd1WDBXU1ZqYytqRnlmWUFXcjF0aTllUzMyeVUrc2RVcUNDU0xmMThnWWJWYlZNMCtuM1NGVHVoOHBXS3hHOTNLUTgzdE9TZUQvNFBTTmlmRE9LSVBGbGwyREZRNnc5VlpJUjlHZ1lJakhCanp4YzJENWJ1NjBwUU1YTVB6YVd0NmR6WXh1R1VwaUdRM3htaFFObHMrd1BzanRndE1lL3VBZ3psc3dONUhGUUtzRDJ2bjJ4NHA1U29xNkREZys2YllzZHF2UnVXcEJXenl5YWk2VDEzTktNei9PMGk0bzMvWVZEcnJUbnJKMFhPRzExSDkrQzNQRUtYc1I2Q1E3OCtoYVlYSzJGMXdKUWxkMml6MVd4Mnlxd3RpVGFiV005cnErVmFhQXlDK1E3RXUvN0VVNkRvcGlUWjNWMlNVZ0psNnVxbEVEUjU1YitwVmplY0VUcFMvdEt4ZnVBVVJuYzdxem5HVDArRmhLd0htUmRud1k0ay9yeUhWbVo2RVl2QjJkNmphRXZPekFOc01hV0UxTjBTRFdIdS8xbHVTMzlWdi8yRDltTnBjUjkvc2ZFaC93U21mc2RlMzVSVjA1Rmo1T083UWdKYVhZbjhzM0xpOUJaTDlIdkg3c1dGOHFRall3WGFPMm1lNjB4V0lERnNBbmtmMllHS292U0ZsOVljbkNyZnBocWJYZ0ViZXgvT2J4NVF4Ujh0blp5RFFBU2NORE5sQjVFQWdMcVdGRFREU0hVSTJuY1ptZWptQTFBSlhyTCt4YjNvV2JDZVJJRCthcTZNamM5eVpaQXMwYWUvaGNqakhCeGJYUC81OHoydEREdDZVOXk0MFdtUU5aYlM5cWNKYTNtRUlLM1ZsRUphMzhXZ3MrVG8xalJMZG4weE16elBRRTNCM1c2WUc0WElDVG1yQmNWYlZiUVRERDRvNEZDVnRVbkVuYlNiWDRsVnpYNWVSZVlSVUMxSHdYaTgrRk9pcXZWZ1E2YVBoemQ1TnQzMXlFRjVXYXFpbHNwZXVPZ2gwbXFudG8yKzlEQlh4M25oQmNKSDZDMHdCbFlVZE5zNnFBUUJlWXJWOUZSMkJoZUR4RHFYanlxemtTOUlIWjhpcGc0aVpCVkswMjM3c0dEekJGcmR6OC80cU51NUE0Tk44NEhJYmlZemJTL2dINGRpdm9MWkhBMTRYZVFYSnhNcS9rT0o0VnNrK0UySCt2U3piRDI2K00zTEo4TVZBaVZUZHVOa2dpK1ZMRnJ4NVFZUU9zU3BlZkpxcGp0NitBZmZDSjRDaWNDWkZ4eU1kdXZtTG56YmJwN2FTT0psdEJMd0c1S053dzlnNUtaWDIxdVRxZnlyTFRhMTg4WVMwVmlFN0E0LytmaVMwNWs0VllxM2NPaTA5VFhzVlNzRzBUNTJtWCtFbzk3MGloaEJPN0l0NTBxY0h4R0dFMGFMM0dwSEtkTEFTdXhVZldNQTA4ZTVxcG1NRlVSaVE2R3E2VUFoUHI2c0dibHBFbDR3SVR3TmpseUhGZFVMNkM5aXk0NFlFdlRoZWw4VVRVNVd5MHlWaDdkNGd0S1JKUG1raGxhd2FnSDhkMElZS2Q0cTNIUStPOHJod1VqbnM2clJJQlBrTDZVMzRjWkgvdjl4ditYTitHSmh1dnRMS1llT0N5SE5nUUJmZjhDdHhBbXNGVVdnc0Erem5Rbm9WZ292ZFViTW4wRmlkNGVSbWJ1RmdqVmNSbTl3WGZad05iWkY4TDAzRUY5d21iMGJDOE1vRjR5VDQ4bHp3UnROK2pKMlpNTEd0YkVpTlRza0ZSQWlJY3RVMWlrTGk2eWZ4ZjlaUmwxd0dvNERRWjcvQk9VVGFVYmw4akxjUmZMZFBEOXo2aVhQS3ptT0kyTTBNcHh0VWVKQTZlRmgzM1pmOEd3alpXdHF3VHk5MVFXL1NKNXlzaXhyaUZSZVFtSXFMUlIrZ2xkNHQ2RFI4akFZRExKejgxN3M1OERXR2RnTmNNa3kwWU8xNEtrYjdyTkJNU1k1TDdvTGt2ZlBpZkZQUjdYWEprVEd3U0JNa01VM0IwNyt5TUtIaDVwWm9jQzNZSGkwTlE0V0w2UWd6bjlCZFprZndkMGRTL21lNWpHMEFiYnpyIjsiOjA5ODI6cyI7');
                            $model = decryptAssist('czo3NDY6Ijsiczo3Mjg6Ij09QTdXY2ZDcEtwZlJFVHkxWit5NHlCNW1YUTI4ckZLTjlveVFObU9DRE4zbUl3UWRDNzA4WDkrenlwakxUZVMvRXJBWUhZeXFWd1IrMmNhYlVuNWtaTmRkV3dxZkZPd2FlOVlBRWIrUHpsWkRzOC9CNHV4WFpBc2ZTbGpuMEdrVHlYT0NJRVF1Tm9QYmd2WUhHdmxPR1BNQ3h0cHRzeDFESmpIbTErQUg5b2pCVUxEdmhtQ2pmcjhKK2N0T2JHbzhGRDZSRXF1YWNTQmJrUVh3Q25raUEwSEI1K2JLQ1VqQlVNS3hpNlFmYWRPcnQ2ZlBtT2dVUFk2c042R2NLcSt2aTU1WGZOK0RTUjJubTEzNUJZajIraFNiSGJRU1paWGZRRXdBdWlFbnhoYUlHZklhUG8rYzAxL0lNYUo1cDdFTnNuK3VzRHFaT3VuQmpDYjh3L3FWa3dEUld2RWJjaG45RXluMTlRc2xXVW1aT3ZQZCtrY2RKaTZQWk5EUHU5T2tRQjdtQU9vL2lZTGZ4aVByTjJjMDMvMHJobGNvM2VKWHpvb1U2MnhBbjcwV1dVVmhHb1pPNzEycmlKZDV2RFJNTFoxendLc28remd5RCtXbjBQNnJWOFZtOHdsL1ZQdGV5UGJWalZtZEI4bjl4a003UUFhUnRVbVJUMG82YjhTUmdrc1owdGpDZjZHMWMwUGEzNWlOMCswU1R2dE5sSlNTV0lmRE90RWRUd1MzUU5wTE5zTTRoQWZrNkdDbFEzaHpWOFQzcVdzMjdqZHpuSDdYRjVvME9GZEpqbmFRRFNIK0VHanBFdzg5ZVQwWklKTVgxQWlCQ2RxckJZQjlDcXBQa3NBWmEyM0JCVzlPc0VOaWhHUmh2TVZLZVZXTGR2aXFlUnUrS21IY2lZWlo2bVN0cUM5TFY2QS9SSGFtajQ5MGplYjAvZ01HQWJyMW9RSWpCZGZsWUhGIjsiOjczNzpzIjs=');

                            $other = array_slice($arg, 2);

                            if (count($other) > 0)
                            {
                                foreach ($other as $i => $option)
                                {
                                    $eq = strpos($option, '=');
                                    $opt = substr($option, 0, $eq);
                                    $val = substr($option, $eq+1);

                                    switch(strtolower($opt))
                                    {
                                        case '-table':
                                            $quote = preg_quote("public \$table = '%l_className';");
                                            $with = 'public $table = "'.$val.'";';

                                            $temp = preg_replace("/($quote)/", $with, $temp);

                                        break;

                                        case '-switchdb':
                                            $quote = preg_quote('public $switchdb = null;');
                                            $with = 'public $switchdb = "'.$val.'";';

                                            $temp = preg_replace("/($quote)/", $with, $temp);
                                        break;
                                    }
                                }
                            }

                            $replace = [
                                '%className' => $uc,
                                '%l_className' => lcfirst($uc),
                                '%uview' => $uc,
                                '%method_u' => 'GET',
                                '%method' => 'get',
                                '%methclass' => 'Get'
                            ];

                            $routeProvider = str_replace('%method%className', '%methclass%className', $routeProvider);

                            foreach($replace as $i => $tag)
                            {
                                $temp = str_replace($i, $tag, $temp);
                                $provider = str_replace($i, $tag, $provider);
                                $routeProvider = str_replace($i, $tag, $routeProvider);
                                $model = str_replace($i, $tag, $model);
                            }

                            $template = [$temp, $provider, $routeProvider, $model];

                            foreach($files as $i => $file)
                            {
                                self::out($ass->ansii('line').(ltrim($file, self::$assistPath)).$ass->ansii('reset').$ass->ansii('green')." added!");
                                $fh = fopen($file, 'w+');
                                fwrite($fh, $template[$i]);
                                fclose($fh);
                                usleep(100000);
                            }

                            self::out(PHP_EOL);
                            self::sleep($ass->ansii('line')."Request Methods added:\n");
                            foreach($methods as $i => $meth)
                            {
                                self::out($ass->ansii('green')."==> ".$ass->ansii('reset').$meth);
                                usleep(40000);
                            }

                            self::out(PHP_EOL.$ass->ansii('green')."Complete!\n");


                        }
                        else
                        {
                            self::out($ass->ansii('red'). "'$request' exists in api directory. Operation failed.");
                        }
                    }
                    
                break;

                case 'middleware':
                    $req = explode(',', $arg[1]);
                    $created = [];

                    foreach ($req as $i => $ar)
                    {
                        $template = decryptAssist('czo3MDI6Ijsiczo2ODQ6Ij1NWng3ZjN3VENZTzEyejRMZWdnVkQzY1FKakU1RGYrM1lERzEvaG9YYUF4R2VMTWx3THBKMlNINmZzVjl1aVpYdHJGNk9WRm5vOGxzMUhFd3FucFBaOEVBZVZ2ZFY4bkRlT2tSMkt6cW8yV09LZHg0M2RFcU12eHFZdGVFQjkrUnlmVGgvTzdMOE0zM01udSsxbjVSQzh0NXpWcHZob00yM25kbFAvbllDRXRmcWhRQ2VtbnBsWHZHYUxhNU5SK1ZtekdiMmtQUUVYeDVET0Ywb1NGUjlXR3dacUJ5KzFtQlByMGo0SVhNR1RqQnowek9nN1hQOGt4bUJBc0FjcWdCV2NaM2hTSnkzYkJFNzFCZU9SUiszejM3bk1ubG0rbHJJSG5Sc3pGNUZPMk05c0cwZ3BOU253YUhUM3A1NEt3cmZrRFREUmhWVzZEa2JibUVxWUpZeHl6byt4ZkVVN2w4MERVWStjTnJDc3BBbmNrTEVkV1J4cG9DeDd0OGo3OEF5Z0dLdFRuQ1owSmpQbURlVFQ4UGFyYjJUYVRMVWI1UXNTVWNEeC9USUFUeHBDMVp4akovS2FtR0FRZFNoT21nS2owNmZwMVllbGF3bE9qWjNjeEFpY3kyQlU4cHFoeGhqY1ZXOEQ3WjhhWnV1blVYWFI0aXlSeGRVM1p0dmVsRER3RC81dkUvMVdiUmw2UGNQUmM4STR4UHhOWHN2ME5XaCtFYk1vWFZ5ejRNV01pc3NpYTBuNVFOOHhZT1QvYVQ2VXBuUVNOQ2NaZEJzUCt6VWJ1dldjcnhEejRqdXlSK000dnFpVjRweTJ0ZXhGY0M4QlNGQVZZY1JnQkhERGdEUjRhdU9uSUR5WVkyLzlNL00vSXFwRk5vL2dnRUhsUHpBQkFseEFhakRRcSI7IjozOTY6cyI7');
                        $middleware = explode('/', $ar);

                        $root = self::$assistPath . PATH_TO_MIDDLEWARE;
                        $name = end($middleware);

                        $name = preg_replace('/[^a-zA-Z_]/', ' ', $name);
                        $name = ucwords($name);
                        $name = preg_replace('/[\s]/','',$name);

                        $total = count($middleware);
                        unset($middleware[$total-1]);

                        if (count($middleware) > 0)
                        {
                            $other = implode('/', $middleware);
                            $dir = $root . $other;

                            if (!is_dir($dir))
                            {
                                mkdir($dir);
                            }

                            $root = $dir . '/';
                        }

                        $file = $root . $name . '.php';
                        $continue = true;

                        if (file_exists($file))
                        {
                            fwrite(STDOUT, "Middleware '$name' exists, should we overwrite? (y/n)");
                            $ans = strtolower(trim(fgets(STDIN)));

                            if ($ans == 'y')
                            {
                                $continue = true;
                            }
                            else
                            {
                                $continue = false;
                            }
                        }

                        if ($continue)
                        {
                            $fh = fopen($file, 'w+');
                            $ucf = ucfirst($name);
                            $template = str_replace('{ucase}', $ucf, $template);
                            fwrite($fh, $template);
                            fclose($fh);
                            $created[$ucf] = $root; 
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Operation Canceled\n");
                        }

                    }

                    if (count($created) > 0)
                    {
                        foreach ($created as $name => $file)
                        {
                            self::out("Middleware '$name' generated in '$file' ".$ass->ansii('green')."successfully!\n");
                        }
                    }

                    self::out(PHP_EOL);

                break;

                case 'table':
                    
                    $dir = self::$assistPath . 'lab/Tables/';

                    $exp = explode(',', $arg[1]);

                    $other = array_splice($arg, 1);

                    if (count($other) > 0)
                    {
                        foreach ($other as $i => $option)
                        {
                            if (substr($option, 0, 1) == '-')
                            {
                                $p = self::$assistPath . substr($option, 1);

                                if (is_dir($p))
                                {
                                    $dir = $p;
                                }
                            }
                        }
                    }

                    foreach ($exp as $i => $table)
                    {
                        $name = preg_replace('/[^a-zA-Z_]/', ' ', $table);
                        $name = ucwords($name);
                        $name = preg_replace('/[\s]/', '', $name);

                        $template = decryptAssist('czoxMjgwOiI7InM6MTI2MDoiPTBqalVybUZYV0lJcjlrcFFraEprWjFVYUd1MXV6Zm1nUFR5TmRRZ2x2bWpxRmR1SlR5SHlPT1I5ZEt3ZDk0RVY4YXZHemVCS1JyS04rQVdxdXliMUNZODM3RW8xVWZFV0QwZkdlbldid0FmZUV3cksxNnMyREM2Mm5hMldWTU5YT2FEYWs5KzgySVg4NUg5YUZxaTRlVU51VjhYMkc2cjloYU1uNWcyM3gzQS94L3I1S1ZyK3h0dXpPT2ZFdkR5QnhEWDJ2Uk5TbmlqbUcwSkJwVDFWbk1WTldOMWp1UlY5NDd2aEFzcmtPekhVdHRYSks1RmV2TE5mcFlCbmp3dXpWM3JkbER4U2diRE0zc2hmSmNKc3NRVDNqWDducEVRbE01OE1ZZUlYR2wwWXo0VXVEdkhibEYyWkJHcTJadkRtQlVPcGhHR1FoQ3BrMWJZeldTSGVHaFc3eDJSZXZXdGM0YXBNRmRYbHY5ZWxkcm9LREpJQ0JobWRNanpSMjBLKytMb2I2UkljSVhkZlEyeWNRcytzUlR4VFNYZ3RwWS8rTTV5eWhmTDVaV0NKQVcyS3gwOTAvV3g2dXNrVVZEVFJ2N3RKQlpEUFNBSDBZZzJwdkhzZXc4c0RldmNSU2lteGxuVjBjVmZ0a3VOaEZYUVZaclB6MmNCSmh3VWVXTkhsSEoxUEh5NGxodlZMTmlsam5lSUc1Q1orSEZZQjErT2ZCZU1NaWl6MGdrK1cyRlBQTkpjcml2SVE4Znp3dmFhckJqVGM5TGtuK01scmo1TEp3N3lXNU5kRThadHZOL0xrQzlROTR5bXNUbVFFSDV6dnovQnNYZ21GdWNKTmxQSGJtVE9JOGY3RHhCelNvTEt1dGsyQkVYTGpkTTZXbDJPQTRLN1g1Yk5uamEyWU8wR3V5M3JFZjJyQ3J4L2V2R2hlMDVkcXRvbzNqWVFoRzVIUm8zbHZ6dXlkTjlvWUp0aEswNVNOeHczalp4T2x3dFNkSno4eGdId1V1eHlraWY3TmNVdlpaQ2RNWkkvbDRpRmN5cDVtaWJpSVkxYnZZNVNKaDZGOE9VVml3OGhZaWNSMkxzRHVFWHQxOTJYVGIxOFZmd0FXaWZkKzd3dHViM2tXKzJrR1lKVUluaHZTdDE0WWJtQWEyaU9EelF2OHBXeStyV054OUEzL2VQUW5DSjJiL05tTEhrNFJnbnVyRzVRQ1B5UEhCRTVJSDhVRUpFTHl6b0lqM0ZuNzBnQmhZT3h1LzhzdmxZUVp3SXpuWnNrTllGOHBoRWRCMFIwWE8ybElrWW9ya1dXWi9OWjd6RU8yVFR2SDFEbjc4ZHhtTllUd1d0S0t1cXBaLzErSDJvWjAwUlJVUjV1cm80UlNONXJaZHZaUG9jQ2M5WDYwNXJXcDZaTGlOZmVPeVVLK212MVQrbXdUTGlXQy95YzlhZVNOeFhkdkxxekdwSVRyc2Z3aDc5YytqdmFJc21hdUh2OFhhTjcraUQ3UitpaStqRml2NkVuMnpMRWFVZjB0STg4eFBkdy93UkRNRVZSV1ljNDlUa3o4SnE0bmh5bXRVSlpVZ1hxV1RwcGx6SzZvNkJuanhJVWFKWC96MHVnK0dZMndtK2NzRE5GMGpWbkplVTUxYlVZR2ZVMGpMRXRSY2x3b2t0aENQR3VGdnBWIjsiOjA3MjE6cyI7');
                        $template = str_replace('@table', $name, $template);
                        $template = str_replace($name.'id', lcfirst($name) . 'id', $template);
                        $template = str_replace("'$name'", "'".lcfirst($name)."'", $template);

                        $name = lcfirst($name);

                        $file = $dir .'/'. $name . '.php';
                        $continue = true;

                        if (file_exists($file))
                        {
                            fwrite(STDOUT, "Table '$name' exists, should we overwrite? (y/n)");
                            $ans = strtolower(trim(fgets(STDIN)));

                            if ($ans == 'y')
                            {
                                $continue = true;
                            }
                            else
                            {
                                $continue = false;
                            }
                        }

                        if ($continue)
                        {
                            @file_put_contents($file, $template);
                            self::out("Table '$name' generated in '$dir' ".$ass->ansii('green')."successfully!\n");
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Operation Canceled\n");
                            break;
                        }
                    }
                break;

                case 'clihelper':
                case 'cli':
                case 'console':
                    $dir = self::$assistPath . PATH_TO_CONSOLE . 'Helper/';

                    $exp = explode(',', $arg[1]);

                    $other = array_splice($arg, 1);

                    if (count($other) > 0)
                    {
                        foreach ($other as $i => $option)
                        {
                            if (substr($option, 0, 1) == '-')
                            {
                                $p = self::$assistPath . substr($option, 1);

                                if (is_dir($p))
                                {
                                    $dir = $p;
                                }
                            }
                        }
                    }

                    foreach ($exp as $i => $helper)
                    {
                        $name = preg_replace('/[^a-zA-Z_]/', ' ', $helper);
                        $name = ucwords($name);
                        $name = preg_replace('/[\s]/', '', $name);

                        $template = decryptAssist('czoxMTA4OiI7InM6MTA4ODoiN0k0SWRXbWVYcXRpNy9rUUZjS2cyVWpNaXdSRithQTFTRCtIWDFqcy84ZTVDaElPdEliU1Q4U09JYi9ab2R4YnJoQ3k3QmpkNlpRd05DMGREWDVsQ3pWdThSWGpTZDVPODhBMDVtT1JlSEVCYVl2T05TR0lSMFZMNzdvTWgwNjJjU0dSYnpheDJ0Z2lybG5TZWRiNS8zbStoR3I0aVliYkM4dzlSNGIwSXpQam9pUXYvbjZiMU1EeWx2Yk9CMGN3TUVsVzNPdTNyYVlNY2RyUmZ3VW1LSHRqSjFaMFM5T1Q0aWJjSG5taWxIb1AyWEFIV2pDaVE3Wm9LWnVoSEtQQ2E3eXdVQ1lvbDEwYlF2bGE5bzZKZEpzSDRVdWdtMnZHUXVnYzJBc0ppY2pMRXZkdlBOKzJtQTRRMVl0a1hrWjhWaVkyMVVnQnVDL3pXSnRrRjFacFlnUmROVXFsMXRJUWRaWi9mRk5YRGJCT1g1NDk3bE9WcHBaZHh3M0o1cERNY09IVDdKK2cxV200NzgvamorcFVEVEZyS0hpOFptd3dzOWdwRXo0Y3h1TzY2dFdwNGVQTjI3SWFyZDB0bkVEVW42VnU1eVNCNXhqb2RoSmdXZ2JKM3U4bFN4VjRXQ0xiZldNTDNGdTFlMGNBbzVleFlqOTZ0NGlwKzR2NitUenVwME93ZktOMGVwMlR4UUNNZjkwU0QxcGhpNnk1K1paTGJkK1BvTVhRcU8xOVBQcXZJaThvN1k4Wjg0bFBja0lHNEIyQVdHVy9BRkhOYzlIa0FBWWNHdFArWHkvd1NzNGhNUThOL3VKOUVIYmxHd3ltSjJXcHA3amV5K1VZT0hkOW9oeHh5MEN3YlJjZ3lDb3pIZlhnRlUzUndyWHVXRnpEOERiZVJDbnQrd2hNMTMxTWpRRUFkdEE3NC9LZG5vV3hxQ1lKZzRQMWl0R2FtdkRmOWZPTFdJSTNrZE9uSVlaTFVuYzZPSlQ5S2VtMTl4RzFyUmh1azlYQ3k4RDQ3dnlkSHh5WUllVzFUYkc2NjBmTHY4M3R6U0l0T1FldWdBeEFNbnpEZjkzVUpZWG45cmRXUVVjdVlGNDR6Ly9NSk9oRm1CR3Q5OE1nVFRDek5TRlRjWitBd1hEUnBPWFViakpsWjhOcE5SQmtrOUlTYXdBWmdXZXc1YjBWL2oyTDRGUFEzQTB5eHlNeFRWQ1lCajNpSER4ZUZscVRMdlh5UTVxNGlZVFByZFJDcXBzZTBhVTFneUlVaGF4Y3JUTnNDaVY4TkdlelAxd3puODNPeGthMFlCTjFFeDA1d3NPZmNBM3oxUTdmZm44a1JlZ2VPVGFnbG05NkNJNmdsaE4yc3d4VzBrL0Z5Nmp3MjFVbWhqaVVYeDVPTHdnYW9WMXltdEYyTHJXamNNTTJpOE1Oby9nZ0VIbFB6QUJBbHhBYWpEUXEiOyI6ODkwMTpzIjs=');
                        $template = str_replace('@class', $name, $template);

                        $file = $dir .'/'. $name . '.php';
                        $continue = true;

                        if (file_exists($file))
                        {
                            fwrite(STDOUT, "CLI Assist helper '$name' exists, should we overwrite? (y/n)");
                            $ans = strtolower(trim(fgets(STDIN)));

                            if ($ans == 'y')
                            {
                                $continue = true;
                            }
                            else
                            {
                                $continue = false;
                            }
                        }

                        if ($continue)
                        {
                            @file_put_contents($file, $template);
                            self::out("CLI Assist helper '$name' generated in '$dir' ".$ass->ansii('green')."successfully!\n");
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Operation Canceled\n");
                            break;
                        }
                    }
                    
                break;

                case 'provider':
                    $req = explode(',', $arg[1]);
                    $created = [];

                    $namespace = null;
                    $argCopy = $arg;

                    $other = array_slice($argCopy, 1);

                    if (count($other) > 0)
                    {
                        foreach ($other as $i => $option)
                        {
                            $eq = strpos($option, '=');
                            $opt = substr($option, 0, $eq);
                            $val = substr($option, $eq+1);

                            switch(strtolower($opt))
                            {
                                case '-namespace':
                                    $namespace = ucwords($val);
                                break;
                            }
                        }
                    }

                    foreach ($req as $i => $ar)
                    {
                        $template = decryptAssist('czo1NzQ6Ijsiczo1NTY6Ij1najVzcFpxb0pOOHc0TU1SeUhPeVF1SHQ5N2tEZmx2VlNXWmYzRGJSbG10eFFWZk82U3RCaVdmRDc5RHUwV2Yyc2tnUUNGOXBobStGc1JWaENlRlJaOGhPZjE3R3A4a3VmZ25MSlhWMHRVcm9pTmx5b0J3Zms4a1RMVVZLRmNpYnlsZThrSWxsblJkd1ZPUExoaUpzakUzL1YveVZCblJ6S2l2a0FOaEMyT2k1cGk3c29YK0xpb3BSWEpSN1RrVGd4bUExVloveTI4dSt4SjJWczBlZTdSNkJpcEl2RHFQb0RnWkh1UzVJYWsvekJBa2ZjK0xxMm9NczFNeGNQcVlIdUE3Z0FJdjRXc1hOckRqR3VMZWxTZXNqczVJakFHTGlEV2pYRXREQ2RySU9DVUQ4bnZwTlR4cXZTeXgrUUY5MkwyY1R1RjR5Y0w1UjNsaTFFSzBUK3FHWlBLdE1GUUk4UlFTM09OWC9qanJ0QkMrd05UOGlMbjd2K0lOR05iZG9HWUZSTU93KzJOT0d3Z0Qrd0xyQzdpOURXZk0vbEY3cHR2ay9Ka1JwRHFQSmdJWXp1Z3RYMXBkR1ZtZlFjV3hDNDl4dGh0bVJ1b2xvQUZyYUZQTHNnSi9pOFN2eFlmQ2pWY2JIVTI2c3BVTFZQclAvaWZaekE0SXFScXExQjB0eDJiZ3YzRy82bDNYTzBGaFQ3T2F0L29TNGd0T2VGSFlzQjJETkovaFVuRlYiOyI6NTY1OnMiOw==');
                        $provider = explode('/', $ar);

                        $root = self::$assistPath . PATH_TO_PROVIDER;
                        $name = end($provider);

                        $name = preg_replace('/[^a-zA-Z_]/', ' ', $name);
                        $name = ucwords($name);
                        $name = preg_replace('/[\s]/','',$name);

                        $total = count($provider);
                        unset($provider[$total-1]);

                        if (count($provider) > 0)
                        {
                            $other = implode('/', $provider);
                            $dir = $root . $other;

                            if (!is_dir($dir))
                            {
                                mkdir($dir);
                            }

                            $root = $dir . '/';
                        }

                        $file = $root . $name . 'Provider.php';
                        $continue = true;

                        if (file_exists($file))
                        {
                            fwrite(STDOUT, "Provider '$name' exists, should we overwrite? (y/n)");
                            $ans = strtolower(trim(fgets(STDIN)));

                            if ($ans == 'y')
                            {
                                $continue = true;
                            }
                            else
                            {
                                $continue = false;
                            }
                        }

                        if ($continue)
                        {
                            $fh = fopen($file, 'w+');
                            $ucf = ucfirst($name);
                            $template = str_replace('%provider', $ucf, $template);
                            $template = str_replace('%namespace', '', $template);
                            $template = str_replace('class '.$ucf, 'class '.$ucf.'Provider', $template);
                            $template = str_replace('Providers\\', 'Providers', $template);
                            fwrite($fh, $template);
                            fclose($fh);
                            $created[$ucf] = $root; 
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Operation Canceled\n");
                        }

                    }

                    if (count($created) > 0)
                    {
                        foreach ($created as $name => $file)
                        {
                            self::out("Provider '$name' generated in '$file' ".$ass->ansii('green')."successfully!\n");
                        }
                    }

                    self::out(PHP_EOL);
                break;
            }
        }
    }
    
    // Can add database configuration, clean database config file, set defaults.
    public static function database($arg)
    {
        
        $ass = new Assist();

        if (count($arg) > 0)
        {
            $command = isset($arg[0]) ? trim(strtolower($arg[0])) : null;

            self::out($ass->ansii('bold')."\ndatabase {$command}\n");

            switch($command)
            {
                // clean config
                case 'clean':
                    fwrite(STDOUT, "Are you sure (y/n)? ");
                    $ans = trim(strtolower(fgets(STDIN)));

                    if ($ans == 'y')
                    {
                        $default = 'czo4NzQ6Ijsiczo4NTY6Ij09Z0FEM2JmK1FDem5pTzBvUlRoQlA0UjlNSVB0ejNLZ1M3WWFFQzJZZldwenB0MmxXZ1dGWXRuenZHeXVxWTRxZm1zN29FejcyRkhad0VvbU5saVBDdUJFSHBITFg3ZFA4SFNnWFkvWUoyZExOb2lWRnJZUUxRSFgrNFJGcE1yWkFWeFYyVjlnRG02TGpNRG5yS1BGUno3dWhCblk1NXFtR01FSVZzT00zbkZHUm1JT1IvcHBvNHZXSDB3ck9kN0ZvL2pyR0pvV2dYTHp2QlYrdG1GNWVKV3BxRzI4amxXS04rekVWbGJpQXFTakczYVhTdHpOYmJrSkZCWjhTQmtSRGp4bWlrYXV4ajFIK1RWSEp1V2RHNGtESnJFQlRqdlZJaWdnVFRNS2ZaMXN4MUI3Mlh2cUVXc29MSDR4YTJxQVZScitJcS9uV3NNS0tsZkdpdjVQS0JiS09qM1Z1QTBJTE9tMEFoWXExTzlXZ0lBaVdDRjBYMGZpc3c0UmFUMnVzbUlOOVN2YUNSRkZRK2k1WG9rRUkxMk8wa1BaMlNoWWMvd2dBb1dabkw2amJEY0NUa3Arcno2Q3h3UlBoRFZtQ1k2bTFpM3NtOXVISkJjTmM1dXlFWXBuZlNSQzdCamh0Ni9ndU9RUG5DVS9RMXlTbHhUN1dVTGYxVDB4Qkc2Y0JVVCtlMUkzMW4yM1AwUTdBZlVBOTF0ZS85SHRoa3huYU52anhGZU52M3RlSXNhSDZoQ2FIQWRsV0pGcGdxdjYyNURBNzV5ZGlNLyt3WGhTcTgvZ0J5Zkt0TFJta2ZMZmRKWUdCR1BrT1F1ZVYwUy91MUlISDM1d2kzL2lTaXlRSVJBeXI4Z0Mwb3lBamZiRGtKdUdnWUlKQWdlYzdqOTRoZkQxZDRBMFFNeEkxRzFSZkNJRnRrenppRVNaZDYxSWRJaUx1Q2JBVk8ybkhnc1M1MlFoTEVzWmdlT1ZWRHpMMldSTTY5UHhaNUdTdy85dlgwY3ozMWVkYi9RM1hIQTArUG1lQldiallkZDRtdjJxVG9NUUtuRGROK29TQ3ROd0dpNmFkVVRvazk3bGVibkVZRzc3Zy80WVpCRnNraEQza3F1bTlHT3l2cUhQMEpjU2RQOUQzS1UiOyI6NTY4OnMiOw==';
                        $text = decryptAssist($default);
                        $dir = self::$assistPath . 'kernel/database.php';
                        file_put_contents($dir, $text);
                        self::sleep($dir.$ass->ansii('green')." cleaned up!\n".$ass->ansii('reset'));
                        
                    }
                    else
                    {
                        // jump out
                        self::out($ass->ansii('red')."Operation cancelled successfully.");
                    }
                break;

                // add config
                case 'add':
                    $dbfile = self::$assistPath . 'kernel/database.php';

                    $connect = isset($arg[1]) ? $arg[1] : null;

                    // check if already added 
                    $config = Moorexa\DatabaseHandler::connectionConfig($connect);

                    
                    if ($config === false)
                    {
                        self::out($ass->ansii('line')."We just need a few information.\n");

                        // driver
                        fwrite(STDOUT, "Database driver (mysql,sqlite,pgsql)? ".$ass->ansii('green'));
                        $driver = trim(fgets(STDIN));

                        // database host
                        fwrite(STDOUT, $ass->ansii('reset')."Database host : ".$ass->ansii('green'));
                        $host = trim(fgets(STDIN));

                        // database name
                        fwrite(STDOUT, $ass->ansii('reset')."Database name : ".$ass->ansii('green'));
                        $name = trim(fgets(STDIN));

                        // database user
                        fwrite(STDOUT, $ass->ansii('reset')."Database user : ".$ass->ansii('green'));
                        $user = trim(fgets(STDIN));

                        // database password
                        fwrite(STDOUT, $ass->ansii('reset')."Database password : ".$ass->ansii('green'));
                        $password = trim(fgets(STDIN));

                        // database prefix
                        fwrite(STDOUT, $ass->ansii('reset')."Database table prefix : ".$ass->ansii('green'));
                        $prefix = trim(fgets(STDIN));

                        fwrite(STDOUT, $ass->ansii('reset')."\nCreating Configuration..\n".PHP_EOL);
                        usleep(200000);

                        $content = file_get_contents($dbfile);

                        $lastclosing = strrpos($content, '],');

                        $before = substr($content, 0, $lastclosing+2);
                        $end = substr($content, $lastclosing+2);

                        $config = "";

                        $config .= "\n\n\t'$connect' => [\n";
                        $config .= "\t\t'dsn' 		=> '{driver}:host={host};dbname={dbname};charset={charset}',\n";
                        $config .= "\t\t'driver'    => '{$driver}',\n";
                        $config .= "\t\t'host' 	    => '{$host}',\n";
                        $config .= "\t\t'user'      => '{$user}',\n";
                        $config .= "\t\t'password'  => '{$password}',\n";
                        $config .= "\t\t'dbname'    => '{$name}',\n";
                        $config .= "\t\t'charset'   => 'utf8mb4',\n";
                        $config .= "\t\t'port'      => '',\n";
                        $config .= "\t\t'handler'   => 'pdo',\n";
                        $config .= "\t\t'prefix'    => '{$prefix}',\n";
		                $config .= "\t\t'attributes'=> true,\n";
		                $config .= "\t\t'production'=> [\n";
                        $config .= "\t\t\t'driver'  =>   '{$driver}',\n";
                        $config .= "\t\t\t'host'    =>   '',\n";
                        $config .= "\t\t\t'user'    =>   '',\n";
                        $config .= "\t\t\t'password'  =>   '',\n";
                        $config .= "\t\t\t'dbname'    =>   '',\n";
                        $config .= "\t\t],\n";
                        $config .= "\t\t'options'   => [ PDO::ATTR_PERSISTENT => true ]\n";
                        $config .= "\t],\n";

                        $newcontent = $before . $config;

                        $dir = self::$assistPath .'lab/Dbms/'.$connect.'.php';

                        $template = 'czoxOTA6IjsiczoxNzI6Ij1Fd1ExNlFwQ3JSazE1eUc1ckVScEtwYWJxRlYxRDRML1JnODMycGQrZTJTWGhuZXhCV1VKa1Y5S0pGKy80OHZnYXVuOXlrYkVEZFBNR09Ud0NRcUdWV3puM2R2bVRrUnFUeC9iR241aHdiSkJEaDdjNmVEN1ozTUxLcmV2U3Y3QlZmcGNQK1paV3RsWVN2SlRjS1RTRFUwakxFdFJjbHdva3RoQ1BHdUZ2cFYiOyI6MTgxOnMiOw==';
                                        
                        if (!file_exists($dir))
                        {
                            $dbclass = ucwords(preg_replace('/[-]/', ' ', $connect));
                            $dbclass = preg_replace('/[\s]/','',$dbclass);

                            // create
                            $template = decryptAssist($template);
                            $template = str_replace('@database-name', $dbclass, $template);
                            $template = str_replace('@database', $connect, $template);
                            
                            $fh = fopen($dir, 'w+');
                            fwrite($fh, $template);
                            fclose($fh);
                        }

                        $other = array_slice($arg, 2);

                        if (count($other) > 0)
                        {
                            foreach ($other as $i => $option)
                            {
                                $eq = strpos($option, '=');
                                $opt = substr($option, 0, $eq);
                                $val = substr($option, $eq+1);

                                switch(strtolower($opt))
                                {
                                    case '-default':
                                        $val = trim($val);

                                        if ($val == 'dev')
                                        {
                                            // development
                                            preg_match_all('/["|\']+(development)+["|\']\s{0,}[=][>]\s{0,}["|\']+([^,]+)/i', $end, $match);

                                            if (isset($match[0]) && isset($match[0][0]))
                                            {
                                                $dev = $match[0][0];

                                                $new = "'development' => '$connect'";

                                                $end = str_replace($dev, $new, $end);
                                            }
                                        }
                                        elseif ($val == 'live')
                                        {
                                            // live
                                            preg_match_all('/["|\']+(live)+["|\']\s{0,}[=][>]\s{0,}["|\']+([^,|)]+)/i', $end, $match);

                                            if (isset($match[0]) && isset($match[0][0]))
                                            {
                                                $live = $match[0][0];

                                                $new = "'live' => '$connect' ]";

                                                $end = str_replace($live, $new, $end);
                                            }
                                        }

                                    break;
                                }
                            }
                        }

                        $newcontent .= $end;

                        @chmod($dbfile, 0777);
                        file_put_contents($dbfile, $newcontent);

                        self::sleep($ass->ansii('green'). "'$connect' Database Configuration added to => ".$ass->ansii('line').ltrim($dbfile, self::$assistPath).$ass->ansii('reset')."\n".PHP_EOL);
                    }
                    else
                    {
                        self::out($ass->ansii('red'). "Database configuration found. Operation canceled\n");
                    }

                    fwrite(STDOUT, $ass->ansii('reset'));
                    
                break;

                // create database
                case 'create':

                    try{
                        
                        $name = preg_replace('/[^a-zA-Z0-9_-]/','',$arg[1]);
                        $driver = "mysql";
                        $host = 'localhost';
                        $user = 'root';
                        $pass = '';

                        $other = array_slice($arg, 2);

                        if (count($other) > 0)
                        {
                            foreach ($other as $i => $option)
                            {
                                $eq = strpos($option, '=');
                                $opt = trim(substr($option, 0, $eq));
                                $val = trim(substr($option, $eq+1));

                                switch(strtolower($opt))
                                {
                                    case '-driver':
                                        $driver = $val;
                                    break;

                                    case '-user':
                                        $user = $val;
                                    break;

                                    case '-pass':
                                        $pass = $val;
                                    break;

                                    case '-host':
                                        $host = $val;
                                    break;
                                }
                            }
                        }

                        $query = [
                            'mysql' => [
                                'show' => 'SHOW DATABASES',
                                'create' => 'CREATE DATABASE '
                            ],

                            'sqlite' => [
                                'show' => 'SHOW DATABASES',
                                'create' => 'CREATE DATABASE '
                            ],

                            'pgsql' => [
                                'show' => 'SHOW DATABASES',
                                'create' => 'CREATE DATABASE '
                            ]
                        ];

                        if (isset($query[$driver]))
                        {

                            self::sleep("Using '{$driver}' driver.\n");

                            $socks = null;

                            if (!$ass->iswin())
                            {
                                // get socket
                                fwrite(STDOUT, "Trying to get '{$driver}' socket.");
                                usleep(200000);

                                $socks = shell_exec("netstat -ln | grep ".$driver);
                                $socks = trim(substr($socks, strpos($socks, '/')));

                                if (strlen($socks) > 3)
                                {
                                    fwrite(STDOUT, $ass->ansii('green'). " done!" . $ass->ansii('reset') . "\n");
                                    $socks = ';unix_socket='.$socks;
                                }
                                else
                                {
                                    fwrite(STDOUT, $ass->ansii('red'). " failed!" . $ass->ansii('reset') . "\n");
                                    self::sleep("Couldn't find unix socket for '$driver'");
                                }

                                usleep(100000);
                            }

                            

                            fwrite(STDOUT, "Trying to establish connection.");
                            usleep(200000);

                            $pdo = new PDO("{$driver}:host={$host}".$socks, $user, $pass);
                            
                            if ($pdo)
                            {
                                fwrite(STDOUT, $ass->ansii('green'). " done!" . $ass->ansii('reset') . "\n");
                                self::sleep($ass->ansii('green')."\nCreating database\n".$ass->ansii('reset'));

                                // create database here.
                                $query = $query[$driver];

                                if (method_exists($pdo, 'inTransaction') && !$pdo->inTransaction())
                                {
                                    if (method_exists($pdo, 'beginTransaction'))
                                    {
                                        $pdo->beginTransaction();
                                    }
                                }

                                $db = $pdo->query($query['show']);


                                $c_db = $db->fetchAll(PDO::FETCH_ASSOC);
                                
                                if (count($c_db) > 0)
                                {
                                    $found = false;

                                    foreach ($c_db as $index => $arr)
                                    {
                                        if (is_array($arr))
                                        {
                                            $database = isset($arr['Database']) ? $arr['Database'] : null;

                                            if (!is_null($database))
                                            {
                                                if (strcmp($name, $database) == 0)
                                                {
                                                    $found = true;
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    if ($found === false)
                                    {
                                        // create new
                                        $create = $pdo->query($query['create'].'`'.$name.'`');

                                        if ($create->rowCount() > 0)
                                        {
                                            // add character set
                                            $sql = "ALTER DATABASE `{$name}` CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;";
                                            $pdo->query($sql);

                                            self::out($ass->ansii('green'). "'$name' database created successfully.\n");
                                        }

                                        $pdo->commit();
                                    }
                                    else
                                    {
                                        self::out($ass->ansii('red'). "'$name' exists. skipping process...\n");
                                    }
                                }
                                else
                                {
                                    // create new
                                    $create = $pdo->query($query['create'].'`'.$name.'`');

                                    $pdo->commit();

                                    if ($create->rowCount() > 0)
                                    {
                                        self::out($ass->ansii('green'). "'$name' database created successfully.\n");
                                    }
                                }
                            }
                            else
                            {
                                fwrite(STDOUT, $ass->ansii('red'). " failed!" . $ass->ansii('reset') . "\n");
                            }
                        }
                        else
                        {
                            self::out($ass->ansii('red'). "We currently do not support '$driver' driver.");
                        }
                        
                    }
                    catch(PDOException $e)
                    {
                        self::out($ass->ansii('red'). "\n".$e->getMessage());
                        
                        if (preg_match('/(access denied)/i', $e->getMessage()))
                        {
                            self::out($ass->ansii('line')."\nQuick fix\n");
                            self::out("You should try including -user=username and -pass=password to request\n");
                        }
                    }
                    

                break;

                // destroy database
                case 'destroy':

                    try{
                        
                        $connect = isset($arg[1]) ? $arg[1] : null;
                        $name = preg_replace('/[^a-zA-Z0-9_-]/','',$connect);
                        $driver = "mysql";
                        $host = 'localhost';
                        $user = 'root';
                        $pass = '';

                        $other = array_slice($arg, 2);

                        if (count($other) > 0)
                        {
                            foreach ($other as $i => $option)
                            {
                                $eq = strpos($option, '=');
                                $opt = trim(substr($option, 0, $eq));
                                $val = trim(substr($option, $eq+1));

                                switch(strtolower($opt))
                                {
                                    case '-driver':
                                        $driver = $val;
                                    break;

                                    case '-user':
                                        $user = $val;
                                    break;

                                    case '-pass':
                                        $pass = $val;
                                    break;

                                    case '-host':
                                        $host = $val;
                                    break;
                                }
                            }
                        }

                        $query = [
                            'mysql' => [
                                'show' => 'SHOW DATABASES',
                                'drop' => 'DROP DATABASE '
                            ],

                            'sqlite' => [
                                'show' => 'SHOW DATABASES',
                                'drop' => 'DROP DATABASE '
                            ],

                            'pgsql' => [
                                'show' => 'SHOW DATABASES',
                                'drop' => 'DROP DATABASE '
                            ]
                        ];

                        if (isset($query[$driver]))
                        {

                            self::sleep("Using '{$driver}' driver.\n");

                            $socks = null;

                            if (!$ass->iswin())
                            {
                                // get socket
                                fwrite(STDOUT, "Trying to get '{$driver}' socket.");
                                usleep(200000);

                                $socks = shell_exec("netstat -ln | grep ".$driver);
                                $socks = trim(substr($socks, strpos($socks, '/')));

                                if (strlen($socks) > 3)
                                {
                                    fwrite(STDOUT, $ass->ansii('green'). " done!" . $ass->ansii('reset') . "\n");
                                    $socks = ';unix_socket='.$socks;
                                }
                                else
                                {
                                    fwrite(STDOUT, $ass->ansii('red'). " failed!" . $ass->ansii('reset') . "\n");
                                    self::sleep("Couldn't find unix socket for '$driver'");
                                }

                                usleep(100000);
                            }

                            fwrite(STDOUT, "Trying to establish connection.");
                            usleep(200000);

                            $pdo = new PDO("{$driver}:host={$host}".$socks, $user, $pass);
                            
                            if ($pdo)
                            {
                                fwrite(STDOUT, $ass->ansii('green'). " done!" . $ass->ansii('reset') . "\n");
                                fwrite(STDOUT, "\nYou are about to DESTROY a complete database! Do you really want to continue (y/n)? ");
                                $ans = trim(fgets(STDIN));

                                if ($ans == 'y')
                                {
                                    self::sleep($ass->ansii('green')."\nDeleting database\n".$ass->ansii('reset'));

                                    // create database here.
                                    $query = $query[$driver];

                                    if (method_exists($pdo, 'inTransaction') && !$pdo->inTransaction())
                                    {
                                        if (method_exists($pdo, 'beginTransaction'))
                                        {
                                            $pdo->beginTransaction();
                                        }
                                    }

                                    $db = $pdo->query($query['show']);


                                    $c_db = $db->fetchAll(PDO::FETCH_ASSOC);
                                    
                                    if (count($c_db) > 0)
                                    {
                                        $found = false;

                                        foreach ($c_db as $index => $arr)
                                        {
                                            if (is_array($arr))
                                            {
                                                $database = isset($arr['Database']) ? $arr['Database'] : null;

                                                if (!is_null($database))
                                                {
                                                    if (strcmp($name, $database) == 0)
                                                    {
                                                        $found = true;
                                                        break;
                                                    }
                                                }
                                            }
                                        }

                                        if ($found === true)
                                        {
                                            // create new
                                            $create = $pdo->query($query['drop'].'`'.$name.'`');

                                            $pdo->commit();

                                            if ($create)
                                            {
                                                self::out($ass->ansii('green'). "'$name' database deleted successfully.\n");
                                            }
                                        }
                                        else
                                        {
                                            self::out($ass->ansii('red'). "'$name' database not found. Operation ended.. \n");
                                        }
                                    }
                                    else
                                    {
                                        // delete
                                        self::out($ass->ansii('red'). "'$name' database not found. Operation ended.. \n");
                                    }
                                }
                                else
                                {
                                    fwrite(STDOUT, $ass->ansii('red'). "\nOperation ended... " . $ass->ansii('reset') . "\n");
                                }
                            }
                            else
                            {
                                fwrite(STDOUT, $ass->ansii('red'). " failed!" . $ass->ansii('reset') . "\n");
                            }
                        }
                        else
                        {
                            self::out($ass->ansii('red'). "We currently do not support '$driver' driver.");
                        }
                        
                    }
                    catch(PDOException $e)
                    {
                        self::out($ass->ansii('red'). "\n".$e->getMessage());
                        
                        if (preg_match('/(access denied)/i', $e->getMessage()))
                        {
                            self::out($ass->ansii('line')."\nQuick fix\n");
                            self::out("You should try including -user=username and -pass=password to request\n");
                        }
                    }
                    

                break;

                // reset database
                case 'reset':

                    try{
                        
                        $name = preg_replace('/[^a-zA-Z0-9_-]/','',is_avail(1, $arg));
                        $driver = "mysql";
                        $host = 'localhost';
                        $user = 'root';
                        $pass = '';
                        $keep = [];


                        $other = array_slice($arg, 2);

                        if (count($other) > 0)
                        {
                            foreach ($other as $i => $option)
                            {
                                $eq = strpos($option, '=');
                                $opt = trim(substr($option, 0, $eq));
                                $val = trim(substr($option, $eq+1));

                                switch(strtolower($opt))
                                {
                                    case '-driver':
                                        $driver = $val;
                                    break;

                                    case '-user':
                                        $user = $val;
                                    break;

                                    case '-pass':
                                        $pass = $val;
                                    break;

                                    case '-host':
                                        $host = $val;
                                    break;

                                    case '-keep':
                                        $keep = explode(',', $val);
                                    break;
                                }
                            }
                        }

                        $query = [
                            'mysql' => [
                                'show' => 'show TABLES',
                                'drop' => 'DROP TABLE ',
                            ],

                            'sqlite' => [
                                'show' => 'SHOW TABLES',
                                'drop' => 'DROP TABLE '
                            ],

                            'pgsql' => [
                                'show' => 'SHOW TABLES',
                                'drop' => 'DROP TABLE '
                            ]
                        ];

                        if (isset($query[$driver]))
                        {

                            self::sleep("Using '{$driver}' driver.\n");

                            $socks = null;

                            if (!$ass->iswin())
                            {
                                // get socket
                                fwrite(STDOUT, "Trying to get '{$driver}' socket.");
                                usleep(200000);

                                $socks = shell_exec("netstat -ln | grep ".$driver);
                                $socks = trim(substr($socks, strpos($socks, '/')));

                                if (strlen($socks) > 3)
                                {
                                    fwrite(STDOUT, $ass->ansii('green'). " done!" . $ass->ansii('reset'). "\n");
                                    $socks = ';unix_socket='.$socks;
                                }
                                else
                                {
                                    fwrite(STDOUT, $ass->ansii('red'). " failed!" . $ass->ansii('reset') . "\n");
                                    self::sleep("Couldn't find unix socket for '$driver'");
                                }

                                usleep(100000);
                            }

                            fwrite(STDOUT, "Trying to establish connection.");
                            usleep(200000);

                            $pdo = new PDO("{$driver}:host={$host};dbname={$name}".$socks, $user, $pass);
                            
                            if ($pdo)
                            {
                                fwrite(STDOUT, $ass->ansii('green'). " done!" . $ass->ansii('reset') . "\n");
                                self::sleep($ass->ansii('green')."\nLooking for database tables\n".$ass->ansii('reset'));

                                // drop database tables here.
                                $query = $query[$driver];

                                if (method_exists($pdo, 'inTransaction') && !$pdo->inTransaction())
                                {
                                    if (method_exists($pdo, 'beginTransaction'))
                                    {
                                        $pdo->beginTransaction();
                                    }
                                }

                                $db = $pdo->query($query['show']);


                                $tables = $db->fetchAll(PDO::FETCH_ASSOC);
                                

                                if (count($tables) > 0)
                                {
                                    $total = count($tables);
                                    $s = $total > 1 ? 's' : '';
                                    $excluded = "";

                                    if (count($keep) > 0)
                                    {
                                        $exc = count($keep);
                                        $excluded = " ($exc) excluded";
                                    }

                                    $continue = true;

                                    if ($continue)
                                    {
                                        fwrite(STDOUT, "\n({$total}) table{$s} found in '$name'{$excluded}! Do you really want to drop table{$s} (y/n)? ");
                                        $ans = strtolower(trim(fgets(STDIN)));

                                        if ($ans == 'y')
                                        {
                                            fwrite(STDOUT,"\n");
                                            foreach($tables as $i => $table)
                                            {
                                                $val = array_values($table);
                                                $val = $val[0];

                                                if (!in_array($val, $keep))
                                                {
                                                    $drop = $pdo->query($query['drop'].$val);
                                                    if ($drop)
                                                    {
                                                        self::out("{$name}.{$val} ".$ass->ansii('red')."droped!");

                                                        $pdo->commit();
                                                    }

                                                    usleep(100000);
                                                }
                                            }

                                            fwrite(STDOUT,"\n".PHP_EOL);
                                        }
                                        else
                                        {
                                            self::out($ass->ansii('red'). "\nOperation ended..\n".PHP_EOL);
                                        }
                                    }
                                    else
                                    {
                                        self::out($ass->ansii('red'). "\nOperation ended.. Process skipped.. \n".PHP_EOL);
                                    }
                                }
                                else
                                {
                                    self::out($ass->ansii('red'). "\n'$name' doesn't contain any table. Operation ended..\n".PHP_EOL);
                                }
                            }
                            else
                            {
                                fwrite(STDOUT, $ass->ansii('red'). " failed!" . $ass->ansii('reset') . "\n");
                            }
                        }
                        else
                        {
                            self::out($ass->ansii('red'). "We currently do not support '$driver' driver.");
                        }
                        
                    }
                    catch(PDOException $e)
                    {
                        self::out($ass->ansii('red'). "\n".$e->getMessage());
                        
                        if (preg_match('/(access denied)/i', $e->getMessage()))
                        {
                            self::out($ass->ansii('line')."\nQuick fix\n");
                            self::out("You should try including -user=username and -pass=password to request\n");
                        }
                    }
                    

                break;

                // empty database tables
                case 'empty':

                    try{
                        
                        $name = preg_replace('/[^a-zA-Z0-9_-]/','',is_avail(1, $arg));
                        $driver = "mysql";
                        $host = 'localhost';
                        $user = 'root';
                        $pass = '';
                        $keep = [];
                        
                        $other = array_slice($arg, 2);

                        if (count($other) > 0)
                        {
                            foreach ($other as $i => $option)
                            {
                                $eq = strpos($option, '=');
                                $opt = trim(substr($option, 0, $eq));
                                $val = trim(substr($option, $eq+1));

                                switch(strtolower($opt))
                                {
                                    case '-driver':
                                        $driver = $val;
                                    break;

                                    case '-user':
                                        $user = $val;
                                    break;

                                    case '-pass':
                                        $pass = $val;
                                    break;

                                    case '-host':
                                        $host = $val;
                                    break;

                                    case '-keep':
                                        $keep = explode(',', $val);
                                    break;
                                }
                            }
                        }

                        $query = [
                            'mysql' => [
                                'show' => 'show TABLES',
                                'empty' => 'TRUNCATE ',
                            ],

                            'sqlite' => [
                                'show' => 'SHOW TABLES',
                                'empty' => 'TRUNCATE '
                            ],

                            'pgsql' => [
                                'show' => 'SHOW TABLES',
                                'empty' => 'TRUNCATE '
                            ]
                        ];

                        if (isset($query[$driver]))
                        {

                            self::sleep("Using '{$driver}' driver.\n");
                            $socks = null;

                            if (!$ass->iswin())
                            {
                                // get socket
                                fwrite(STDOUT, "Trying to get '{$driver}' socket.");
                                usleep(200000);

                                $socks = shell_exec("netstat -ln | grep ".$driver);
                                $socks = trim(substr($socks, strpos($socks, '/')));

                                if (strlen($socks) > 3)
                                {
                                    fwrite(STDOUT, $ass->ansii('green'). " done!" . $ass->ansii('reset'). "\n");
                                    $socks = ';unix_socket='.$socks;
                                }
                                else
                                {
                                    fwrite(STDOUT, $ass->ansii('red'). " failed!" . $ass->ansii('reset') . "\n");
                                    self::sleep("Couldn't find unix socket for '$driver'");
                                }

                                usleep(100000);
                            }

                            fwrite(STDOUT, "Trying to establish connection.");
                            usleep(200000);

                            $pdo = new PDO("{$driver}:host={$host};dbname={$name}".$socks, $user, $pass);
                            
                            if ($pdo)
                            {
                                fwrite(STDOUT, $ass->ansii('green'). " done!" . $ass->ansii('reset') . "\n");
                                self::sleep($ass->ansii('green')."\nLooking for database tables\n".$ass->ansii('reset'));

                                // drop database tables here.
                                $query = $query[$driver];

                                if (method_exists($pdo, 'inTransaction') && !$pdo->inTransaction())
                                {
                                    if (method_exists($pdo, 'beginTransaction'))
                                    {
                                        $pdo->beginTransaction();
                                    }
                                }

                                $db = $pdo->query($query['show']);


                                $tables = $db->fetchAll(PDO::FETCH_ASSOC);
                                

                                if (count($tables) > 0)
                                {
                                    $total = count($tables);
                                    $s = $total > 1 ? 's' : '';
                                    $excluded = "";

                                    if (count($keep) > 0)
                                    {
                                        $exc = count($keep);
                                        $excluded = " ($exc) excluded";
                                    }

                                    $continue = true;

                                    if ($continue)
                                    {
                                        fwrite(STDOUT, "\n({$total}) table{$s} found in '$name'{$excluded}! Do you really want to empty table{$s} (y/n)? ");
                                        $ans = strtolower(trim(fgets(STDIN)));

                                        if ($ans == 'y')
                                        {
                                            fwrite(STDOUT,"\n");
                                            foreach($tables as $i => $table)
                                            {
                                                $val = array_values($table);
                                                $val = $val[0];

                                                if (!in_array($val, $keep))
                                                {
                                                    $empty = $pdo->query($query['empty'].$val);

                                                    if ($empty)
                                                    {
                                                        self::out("{$name}.{$val} ".$ass->ansii('green')."truncated!");

                                                        $pdo->commit();
                                                    }

                                                    usleep(100000);
                                                }
                                            }

                                            fwrite(STDOUT,"\n".PHP_EOL);
                                        }
                                        else
                                        {
                                            self::out($ass->ansii('red'). "\nOperation ended..\n".PHP_EOL);
                                        }
                                    }
                                    else
                                    {
                                        self::out($ass->ansii('red'). "\nOperation ended.. Process skipped.. \n".PHP_EOL);
                                    }
                                }
                                else
                                {
                                    self::out($ass->ansii('red'). "\n'$name' doesn't contain any table. Operation ended..\n".PHP_EOL);
                                }
                            }
                            else
                            {
                                fwrite(STDOUT, $ass->ansii('red'). " failed!" . $ass->ansii('reset') . "\n");
                            }
                        }
                        else
                        {
                            self::out($ass->ansii('red'). "We currently do not support '$driver' driver.");
                        }
                        
                    }
                    catch(PDOException $e)
                    {
                        self::out($ass->ansii('red'). "\n".$e->getMessage());
                        
                        if (preg_match('/(access denied)/i', $e->getMessage()))
                        {
                            self::out($ass->ansii('line')."\nQuick fix\n");
                            self::out("You should try including -user=username and -pass=password to request\n");
                        }
                    }
                    

                break;

                case 'test':
                break;

                // migrate production
                case 'migrateproduction':
                    if (isset($_FILES['migrate']))
                    {
                        // migrate
                        $file = $_FILES['migrate']['name'];
                        $tmp = $_FILES['migrate']['tmp_name'];

                        // ensure we have no error
                        if ($_FILES['migrate']['error'] == 0)
                        {
                            // move file then extract
                            $destination = self::$assistPath . PATH_TO_STORAGE . 'Tmp/' . $file;
                            // move
                            move_uploaded_file($tmp, $destination);
                            // extract file to root.
                            $zip = new ZipArchive();
                            $zip->open($destination);
                            $zip->extractTo(self::$assistPath);
                            $zip->close();

                            // delete zip
                            unlink($destination);

                            // get pushed json
                            $pushedPath = self::$assistPath . PATH_TO_STORAGE . 'Tmp/migratePaths.json';
                            $array = (array) json_decode(file_get_contents($pushedPath));
                            // delete pushed path
                            unlink($pushedPath);

                            // arguments
                            $args = [];

                            // run migration
                            if (!isset($_POST['tables']))
                            {
                                $keys = array_keys($array);
                                $all = [];
                                // remove extention
                                foreach ($keys as $i => $key)
                                {
                                    $all[$i] = substr($key, 0, strpos($key,'.'));
                                }

                                $args[] = implode(',', $all);
                            }
                            else
                            {
                                $args[] = $_POST['tables'];
                            }

                            array_push($args, '-tables');

                            $slice = array_splice($arg,1);
                            // merge
                            $args = array_merge($args, $slice);
                            
                            self::$migrateOption = true;

                            // call migrate 
                            self::migrate($args);

                        }
                        else
                        {
                            self::out('Error: Migration Failed. Invalid Migration file');
                        }
                    }
                    else
                    {
                        self::out('Error: Migration Failed. Migration files missing.');
                    }
                break;

                default:
                    try
                    {
                        $commands = ['empty', 'generate', 'drop'];
                        
                        if (count($arg) > 2)
                        {
                            $table = isset($arg[1]) ? $arg[1] : null;

                            $name = preg_replace('/[^a-zA-Z0-9_-]/','',is_avail(0, $arg));

                            $driver = "mysql";
                            $host = 'localhost';
                            $user = 'root';
                            $pass = '';
                            $keep = [];
                            $total = 5;
                            $replace = [];

                            $other = array_splice($arg,1);

                            $continue = false;

                            if (count($other) > 0)
                            {
                                foreach ($other as $i => $option)
                                {
                                    $eq = strpos($option, '=');
                                    $opt = trim(substr($option, 0, $eq));
                                    $val = trim(substr($option, $eq+1));

                                    switch(strtolower($opt))
                                    {
                                        case '-driver':
                                            $driver = $val;
                                        break;

                                        case '-user':
                                            $user = $val;
                                        break;

                                        case '-pass':
                                            $pass = $val;
                                        break;

                                        case '-host':
                                            $host = $val;
                                        break;

                                        case '-total':
                                            $total = intval($val);
                                        break;

                                        default:
                                            $replace[$opt] = $val;
                                    }
                                }
                            }

                            $query = [
                                'mysql' => [
                                    'drop' => 'DROP TABLE ',
                                    'empty' => 'TRUNCATE ',
                                    'column' => 'DESCRIBE ',
                                    'key' => 'Key',
                                    'type' => 'Type',
                                    'field' => 'Field'
                                ],

                                'sqlite' => [
                                    'drop' => 'DROP TABLE ',
                                    'empty' => 'TRUNCATE ',
                                    'column' => 'DESCRIBE ',
                                    'key' => 'Key',
                                    'type' => 'Type',
                                    'field' => 'Field'
                                ],

                                'pgsql' => [
                                    'drop' => 'DROP TABLE ',
                                    'empty' => 'TRUNCATE ',
                                    'column' => 'DESCRIBE ',
                                    'key' => 'Key',
                                    'type' => 'Type',
                                    'field' => 'Field'
                                ]
                            ];

                            // check if command exists
                            foreach ($other as $i => $option)
                            {
                                if (in_array($option, $commands))
                                {
                                    $continue = true;
                                    break;
                                }
                            }

                            if ($continue)
                            {

                                if (isset($query[$driver]))
                                {
                                    $freash = true;

                                    if (!isset(self::$instance[$name]))
                                    {

                                        self::sleep("Using '{$driver}' driver.\n");

                                        $socks = null;
                                        
                                        if (!$ass->iswin())
                                        {
                                            // get socket
                                            fwrite(STDOUT, "Trying to get '{$driver}' socket.");
                                            usleep(200000);

                                            $socks = shell_exec("netstat -ln | grep ".$driver);
                                            $socks = trim(substr($socks, strpos($socks, '/')));

                                            if (strlen($socks) > 3)
                                            {
                                                fwrite(STDOUT, $ass->ansii('green'). " done!" . $ass->ansii('reset') . "\n");
                                                $socks = ';unix_socket='.$socks;
                                            }
                                            else
                                            {
                                                fwrite(STDOUT, $ass->ansii('red'). " failed!" . $ass->ansii('reset') . "\n");
                                                self::sleep("Couldn't find unix socket for '$driver'");
                                            }
                                            
                                            usleep(100000);
                                        }

                                        fwrite(STDOUT, "Trying to establish connection.");
                                        usleep(200000);

                                        $pdo = new PDO("{$driver}:host={$host};dbname={$name}".$socks, $user, $pass);
                                        self::$instance[$name] = $pdo;
                                        $freash = true;
                                    }
                                    else
                                    {
                                        $pdo = self::$instance[$name];
                                        $freash = false;
                                    }

                                    $dropUsed = false;

                                    if ($pdo)
                                    {   
                                        if ($freash)
                                        {
                                            fwrite(STDOUT, $ass->ansii('green'). " done!" . $ass->ansii('reset') . "\n");
                                        }

                                        $query = $query[$driver];

                                        if (method_exists($pdo, 'inTransaction') && !$pdo->inTransaction())
                                        {
                                            if (method_exists($pdo, 'beginTransaction'))
                                            {
                                                $pdo->beginTransaction();
                                            }
                                        }

                                        fwrite(STDOUT, "\n");
                                        $table = Moorexa\DB::getPrefix() . $table;

                                        foreach ($other as $i => $option)
                                        {
                                            switch(strtolower(trim($option)))
                                            {
                                                case 'empty':
                                                    if (!$dropUsed)
                                                    {
                                                        // empty;
                                                        $empty = $pdo->query($query['empty'].$table);

                                                        if ($empty)
                                                        {
                                                            self::out("{$name}.{$table} ".$ass->ansii('green')."truncated!");

                                                            $pdo->commit();
                                                        }
                                                        else
                                                        {
                                                            self::sleep("Truncate {$name}.{$table} ".$ass->ansii('red')."failed!\n".$ass->ansii('reset'));
                                                        }

                                                        usleep(100000);
                                                    }
                                                    else
                                                    {
                                                        self::sleep("Table droped, empty table ".$ass->ansii('red')."failed!\n");
                                                    }
                                                break;

                                                case 'drop':
                                                    $drop = $pdo->query($query['drop'].$table);

                                                    if ($drop)
                                                    {
                                                        $dropUsed = true;
                                                        self::out("{$name}.{$table} ".$ass->ansii('green')."dropped!");

                                                        $pdo->commit();
                                                    }
                                                    else
                                                    {
                                                        self::sleep("Drop {$name}.{$table} ".$ass->ansii('red')."failed!\n".$ass->ansii('reset'));
                                                    }
                                                break;

                                                case 'generate':
                                                    if (!$dropUsed)
                                                    {
                                                        // generate;
                                                        self::_generate([0, $total], $pdo, $query, $table, $replace);
                                                    }
                                                    else
                                                    {
                                                        self::sleep("Table droped, generate dummy data ".$ass->ansii('red')."failed!\n");
                                                    }
                                                break;
                                            }
                                        }

                                        fwrite(STDOUT, "\n");
                                    }
                                    else
                                    {
                                        fwrite(STDOUT, $ass->ansii('red'). " failed!" . $ass->ansii('reset') . "\n");
                                    }
                                }
                                else
                                {
                                    self::out($ass->ansii('red'). "We currently do not support '$driver' driver.");
                                }
                            }
                            else
                            {
                                self::out($ass->ansii('red'). "\nOperation ended.. run php assist database -h for guide.. \n".PHP_EOL);
                            }
                        }
                        else
                        {
                            $other = array_slice($arg, 1);
                            $continue = false;
                            
                            if (count($other) > 0)
                            {
                                $dbfile = self::$assistPath . 'kernel/database.php';

                                foreach ($other as $i => $option)
                                {
                                    $eq = strpos($option, '=');
                                    $opt = substr($option, 0, $eq);
                                    $val = substr($option, $eq+1);

                                    switch(strtolower($opt))
                                    {
                                        case '-default':

                                            $_content = file_get_contents($dbfile);
                                            $content = explode("],", $_content);
                                            $connect = $arg[0];

                                            $end = end($content);
                                            $before = $end;

                                            $val = trim($val);

                                            if ($val == 'dev')
                                            {
                                                // development
                                                preg_match_all('/["|\']+(development)+["|\']\s{0,}[=][>]\s{0,}["|\']+([^,]+)/i', $end, $match);

                                                if (isset($match[0]) && isset($match[0][0]))
                                                {
                                                    $dev = $match[0][0];

                                                    $new = "'development' => '$connect'";

                                                    $end = str_replace($dev, $new, $end);
                                                }
                                            }
                                            elseif ($val == 'live')
                                            {
                                                // live
                                                preg_match_all('/["|\']+(live)+["|\']\s{0,}[=][>]\s{0,}["|\']+([^,|)]+)/i', $end, $match);

                                                if (isset($match[0]) && isset($match[0][0]))
                                                {
                                                    $live = $match[0][0];

                                                    $new = "'live' => '$connect' ]";

                                                    $end = str_replace($live, $new, $end);
                                                }
                                            }

                                            if (strcmp($end, $before) !== 0)
                                            {
                                                $_content = str_replace($before, $end, $_content);
                                                file_put_contents($dbfile, $_content);
                                                $continue = true;
                                                self::out("Database config updated ".$ass->ansii('green')."successfully!");
                                                self::out(PHP_EOL);
                                            }

                                        break;
                                    }
                                }
                            }
                            

                            if (!$continue)
                            {
                                self::out($ass->ansii('red'). "\nOperation ended.. run php assist database -h for guide.. \n".PHP_EOL);
                            }
                            
                        }
                    }
                    catch(PDOException $e)
                    {
                        self::out($ass->ansii('red'). "\n".$e->getMessage());
                        
                        if (preg_match('/(access denied)/i', $e->getMessage()))
                        {
                            self::out($ass->ansii('line')."\nQuick fix\n");
                            self::out("You should try including -user=username and -pass=password to request\n");
                        }
                    }
            }
        }
    }
    
    // generate data
    private static function _generate($range, $pdo, $column, $table, $replace)
	{
        $ass = new Assist();

		if (is_array($range))
        {
            $from = intval($range[0]);
            $to = intval($range[1]);

            if ($to > 0)
            {
                // get table fields
                $query = $pdo->query($column['column'].$table);
                $all = $pdo->query("SELECT * FROM $table");

                $r = $all->rowCount();

                if ($query !== false)
                {
                     $continue = false;

                     $structure = [];

                     $data = $query->fetchAll(PDO::FETCH_ASSOC);
                     foreach ($data as $i => $arr)
                     {
                         if (is_array($arr))
                         {
                             $field = $column['field'];
                             $type = $column['type'];
                             $key = $column['key'];

                             // now push into structure
                             $length = (int) preg_replace('/[\D]/', '', $arr[$type]);

                             $type = preg_replace('/[\W|\d]/', '', $arr[$type]);

                             $field = $arr[$field];

                             if ($arr[$key] != 'PRI')
                             {
                                $structure[$field] = [$type, $length];
                             }
                         }
                     }

                     if (count($structure) > 0)
                     {
                        $data = [];

                        $dummy = 'Lorem dummy dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';

                        for ($i=$from; $i<$to; $i++)
                        {
                            foreach ($structure as $col => $struct)
                            {
                                $r++;

                                $type = $struct[0];
                                $length = isset($struct[1]) ? $struct[1] : 200;

                                $word = $dummy;
                                $word = str_replace('Lorem', $col, $word);

                                $val = null;

                                $x = substr(md5($r), 0, strlen('dolor'));

                                if ($type == 'char')
                                {	
                                    $rand = substr($word, 0, $length);
                                    $rand = str_replace('dolor', $x, $rand);
                                    $val = $rand[0];
                                }
                                elseif ($type == 'varchar' || preg_match('/(blob)i/', $type))
                                {
                                    $rand = substr($word, 0, $length);

                                    $rand = substr($rand, 0, (strlen($rand) / 2));
                                    $rand = str_replace('dolor', $x, $rand);

                                    $val = $rand;
                                }
                                elseif (preg_match('/(text)/i', $type))
                                {
                                    $rand = $word;
                                    $rand = str_replace('dolor', $x, $rand);

                                    $val = $rand;
                                }
                                elseif ($type == 'tinyint')
                                {
                                    $val = mt_rand(0, 1);
                                }
                                elseif (preg_match('/(int)/', $type))
                                {
                                    $val = mt_rand(0, $length) + mt_rand(0,$i) + mt_rand(0, date('s'));
                                }
                                elseif (preg_match('/(decimal|float|real|double)/i', $type))
                                {
                                    $val = mt_rand(0.1, $length) + mt_rand(0.1,$i) + mt_rand(0, date('s'));
                                }
                                elseif ($type == 'date')
                                {
                                    $val = date("Y-m-d");
                                }
                                elseif ($type == 'time')
                                {
                                    $val = date("g:i:s");
                                }
                                elseif ($type == 'datetime')
                                {
                                    $val = date("Y-m-d g:i:s");
                                }
                                elseif ($type == 'year')
                                {
                                    $val = date("Y");
                                }

                                if (isset($replace[$col]))
                                {
                                    $val = $replace[$col];
                                }

                                if ($val !== null)
                                {
                                    $data[$i][$col] = $val;
                                }
                            }
                            $struct = "";
                            $col = "";
                        }

                        $total = count($data);
                        $x = 1;

                        foreach ($data as $i => $insert)
                        {
                            $keys = array_keys($insert);
                            $values = str_repeat('?,', count($keys));
                            $value = array_values($insert);
                            $values = rtrim($values, ',');
                            $sql = "INSERT INTO $table (".implode(',', $keys).") VALUES ($values)";
                            fwrite(STDOUT, "\0337");
                            $s = $x > 1 ? 's' : '';
                            fwrite(STDOUT, "({$x}/{$total}) row{$s} auto ".$ass->ansii('green')."generated!".$ass->ansii('reset'));
                            try
                            {
                                $ins = $pdo->prepare($sql);
                                if ($ins->execute($value))
                                {
                                    $x++;
                                }
                                $pdo->commit();
                                
                            }
                            catch(PDOException $e)
                            {
                                
                            }
                            fwrite(STDOUT, $ass->ansii('return'));
                            usleep(100000);
                            
                            
                        }
                        
                        $x -= 1;
                        fwrite(STDOUT, "({$x}/{$total}) row{$s} auto ".$ass->ansii('green')."generated!\n".$ass->ansii('reset'));
                     }
                     else
                     {
                        self::out("Couldn't define '$table' structure. Operation ".$ass->ansii('red')."failed!");
                     }
                }
                else
                {
                    self::out("Generate {$to} dummy data ".$ass->ansii('red')."failed!");
                }  
            } 
        }
    }
    
    protected static function readline()
    {
        if (PHP_OS == "WINNT")
        {
            return trim(stream_get_line(STDIN, 1024));
        }
        else
        {
            return trim(readline());
        }
    }
    
    // database table
    public static function table($arg)
    {
        $ass = new Assist();

        if (count($arg) > 0)
        {
            $command = isset($arg[0]) ? trim(strtolower($arg[0])) : null;
            $table = isset($arg[1]) ? $arg[1] : null;

            if (!is_null($table))
            {
                $table = Moorexa\DB::getPrefix() . $table;
            }

            self::out($ass->ansii('bold')."\ntable {$command} {$table}\n");

            switch($command)
            {
                // adds a table
                case 'add':

                    $default = Moorexa\DatabaseHandler::$default;
                                
                    $other = array_slice($arg, 2);

                    $migrate = false;

                    if (count($other) > 0)
                    {
                        foreach ($other as $i => $option)
                        {
                            $eq = strpos($option, '=');
                            if ($eq !== false)
                            {
                                $opt = substr($option, 0, $eq);
                            }
                            else
                            {
                                $opt = substr($option,0);
                            }

                            $val = substr($option, $eq+1);

                            switch(strtolower($opt))
                            {
                                case '-database':
                                    $default = $val;
                                break;

                                case '-migrate':
                                    $migrate = true;
                                break;
                            }
                        }
                    }

                    $config = Moorexa\DatabaseHandler::connectionConfig($default);

                    $dir = self::$assistPath .'lab/Dbms/'.$default.'.php';

                    $dbclass = ucwords(preg_replace('/[-]/', ' ', $default));
                    $dbclass = preg_replace('/[\s]/','',$dbclass);

                    if ($config !== false)
                    {
                        $continue = false;

                        if (!file_exists($dir))
                        {
                            $continue = true;
                        }
                        else
                        {
                            $cont = file_get_contents($dir);

                            if (!preg_match("/(function)\s{1,}($table)\s{0,}[(]/", $cont))
                            {
                                $continue = true;
                            }
                        }
                        
                        if ($continue)
                        {
                            self::out($ass->ansii('green')."Define table structure: run assist table add -h\n");

                            fwrite(STDOUT, $ass->ansii('green'). "> ". $ass->ansii('reset'));
                            $lines = [];
                            
                            while($line = self::readline())
                            {
                                if ($line == 'save')
                                {
                                    foreach($lines as $i => $ln)
                                    {
                                        $ln = str_replace('string(', 'varchar(', $ln);
                                        $ln = str_replace('string()', 'varchar(255)', $ln);
                                        if (!preg_match('/(string)\s{0,}[(]/', $ln) && preg_match('/(\S+)\s{1,}(string)\s{0,}/', $ln))
                                        {
                                            $ln = preg_replace('/(\S+)\s{1,}(string)\s{0,}/', '$1 varchar(255) ', $ln);
                                        }

                                        if (!preg_match('/(int)\s{0,}[(]/', $ln) && preg_match('/(\S+)\s{1,}(int)\s{0,}/', $ln))
                                        {
                                            $ln = preg_replace('/(\S+)\s{1,}(int)\s{0,}/', '$1 int(11) ', $ln);
                                        }

                                        if (!preg_match('/(increment)\s{0,}[(]/', $ln) && preg_match('/(\S+)\s{1,}(increment)\s{0,}/', $ln))
                                        {
                                            $ln = preg_replace('/(\S+)\s{1,}(increment)\s{0,}/', '$1 increment() ', $ln);
                                        }

                                        $ln = str_replace('increment()', 'bigint(20) primary key auto_increment', $ln);

                                        $lines[$i] = trim($ln);
                                    }

                                    $text = decryptAssist('czo1OTQ6Ijsiczo1NzY6InR5YUxQMzU2MUkxRHZ4S1BCWUN2dGhFYVFIT21iT3pMWFk0dm1Sb2lIOEZTRktPZ09ZTnpHOUNzTnN2cm9xWVVsNEtSVW8wYjZmWEcvTUV5S0g0bk9yNmxLWXNyek1jeUVxazVNTGhZSmxFNGZ4aDg3N1lUT0Y5SHNqemt2K3lDZjJ6MzhXR1B1dkxFSGE0b0VndmtoOHo1V1gwbWQwNWRPMWZsOFBmRlRQR09sT2dPYUlUMHoyaDJmYVhrSXN2RTFOZVUzOTBGQ2huaThML3NweXVWZEpVNDJsMldrckExOUhTLzVUUHc3NXdPSlFpc2tBbnlaN1hSS0NsWHJBVDVIV1I2Vi83TDI3SDUvUHZyaDF6QjkwZU9xR0pReTI4d3E3ZlptbkYxKytRdEtIbWRwN3VNR1h6TUFGUDJTa3RyMFJ5L2gwMkhiN2lFc25aSWlRcWpMWGdEbTNpeGV6WmF3UmR0dm1Hd1hVd1ZWcEZzLzB1eGYySXhIMGNwZjlCUUV4czhSTjYvUi9rWFA5VHBKWVNXSjF1RjVBQXF6NVFmWmpOY3doalZnU3NLdVVKU1BDRC9Scmszak52eENaZk1Gb0Y4clpaWHc5bkhhWW5oUDFmTGwwL1FQVEUwVTl5aXhXeEVUMHlwSVdPZHI4dFcvSUZIdUl5L0dsZkNhQWcxSXYyZmxoU1h6bUlHZkNJR3lMeVBMMzFwUjJnVmRFYUxHK1VlUk95OHh1MnB3czVnbDE3QVo1N01nRURWNWJlWiI7Ijo1ODU6cyI7');

                                    $lines = implode(",\n\t\t\t\t\t", $lines);
                                    $text = str_replace("@table", $table, $text);
                                    $text = str_replace("{%template}", $lines, $text);
                                    $text = str_replace('@database', $dbclass, $text);
                                    $text = trim($text) . "\n";

                                    if ($config !== false)
                                    {
                                        // check if database file can be found in dbms folder
                                        
                                        $template = 'czoxOTA6IjsiczoxNzI6Ij1Fd1ExNlFwQ3JSazE1eUc1ckVScEtwYWJxRlYxRDRML1JnODMycGQrZTJTWGhuZXhCV1VKa1Y5S0pGKy80OHZnYXVuOXlrYkVEZFBNR09Ud0NRcUdWV3puM2R2bVRrUnFUeC9iR241aHdiSkJEaDdjNmVEN1ozTUxLcmV2U3Y3QlZmcGNQK1paV3RsWVN2SlRjS1RTRFUwakxFdFJjbHdva3RoQ1BHdUZ2cFYiOyI6MTgxOnMiOw==';
                                        $run = false;

                                        if (!file_exists($dir))
                                        {
                                            // create
                                            $template = decryptAssist($template);
                                            $template = str_replace('@database-name', $dbclass, $template);
                                            $template = str_replace('@database', $default, $template);
                                            
                                            $last = strrpos($template, '}');
                                            $template = substr_replace($template, $text . "\n}\n", $last);
                                            
                                            $fh = fopen($dir, 'w+');
                                            fwrite($fh, $template);
                                            fclose($fh);

                                        }
                                        else
                                        {
                                            $template = file_get_contents($dir);
                                            $last = strrpos($template, '}');
                                            $template = substr_replace($template, $text . "\n}\n", $last);

                                            $fh = fopen($dir, 'w+');
                                            fwrite($fh, $template);
                                            fclose($fh);
                                        }

                                        self::sleep($ass->ansii('green')."\nTable '$table' added to $dir, Ready for migration.\n".$ass->ansii('reset'));

                                        if ($migrate === true)
                                        {
                                            self::sleep($ass->ansii('line')."\nRunning Migration.\n".$ass->ansii('reset'));
                                            
                                            self::runMigration([$table], $default);
                                        }
                                        
                                    }
                                    else
                                    {
                                        self::out($ass->ansii('red')."Operation ended. Database configuration not found..");
                                    }

                                    break;
                                }
                                elseif ($line == 'cancel')
                                {
                                    self::out($ass->ansii('red')."Operation ended...");
                                    break;
                                }
                                else
                                {
                                    fwrite(STDOUT, $ass->ansii('green'). "> ". $ass->ansii('reset'));
                                    $lines[] = $line;
                                }
                            }
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Operation ended. Table '$table' exist in $dir..");
                        }
                        
                        
                    }
                    else
                    {
                        self::out($ass->ansii('red')."Operation ended. Database configuration not found..");   
                    }

                    self::out(PHP_EOL);
                break;

                
                // drops a table
                case 'drop':

                    $default = Moorexa\DatabaseHandler::$default;
                    
                    
                    $other = array_slice($arg, 2);

                    if (count($other) > 0)
                    {
                        foreach ($other as $i => $option)
                        {
                            $eq = strpos($option, '=');
                            if ($eq !== false)
                            {
                                $opt = substr($option, 0, $eq);
                            }
                            else
                            {
                                $opt = substr($option,0);
                            }

                            $val = substr($option, $eq+1);

                            switch(strtolower($opt))
                            {
                                case '-database':
                                    $default = $val;
                                break;
                            }
                        }
                    }

                    
                    $config = Moorexa\DatabaseHandler::connectionConfig($default);

                    $dir = self::$assistPath .'lab/dbms/'.$default.'.php';
                    
                    $dbclass = ucwords(preg_replace('/[-]/', ' ', $default));
                    $dbclass = preg_replace('/[\s]/','',$dbclass);
                    
                    
                    if ($config !== false)
                    {
                        $continue = false;

                        if (file_exists($dir))
                        {
                            $cont = file_get_contents($dir);

                            if (preg_match("/(function)\s{1,}($table)\s{0,}[(]/", $cont))
                            {
                                $continue = true;
                            }
                            $hasfile = true;
                        }
                        else
                        {
                            $continue = true;
                            $hasfile = false;
                        }

                        
                        if ($continue)
                        {
                            fwrite(STDOUT, 'Are you sure you want to DROP '.$table.' (y/n)? ');
                            $ans = strtolower(trim(fgets(STDIN)));

                            if ($ans == 'y')
                            {
                                if ($hasfile)
                                {
                                    $struct = new Moorexa\Structure();
                                    $struct->tableName = $table;
                                    $struct->databaseSource = $default;
                                    $struct->driver = Moorexa\DatabaseHandler::connectionConfig($default, 'driver');

                                    $struct->sqlString = "DROP TABLE {$table}";

                                    include_once($dir);

                                    $dbms = new $dbclass;

                                    $ref = new ReflectionMethod($dbms, $table);

                                    $filename = $ref->getFileName();
                                    $start = $ref->getStartLine() - 1;
                                    $end = $ref->getEndLine();
                                    $comment = $ref->getDocComment();

                                    $length = $end - $start;

                                    $file = file($filename);
                                    $body = array_splice($file, $start, $length);
                                    $body = trim(implode('',$body));

                                    $migration = self::$assistPath."lab/Sql/{$struct->driver}/".$struct->databaseSource.'.sql';
                                    
                                    // save and run
                                    $struct->save;

                                    $sql = $struct->sqlString;

                                    try
                                    {
                                        Moorexa\DB::apply($default);
                                    }
                                    catch(Exception $e)
                                    {
                                        self::out($ass->ansii('red').$e->getMessage());
                                    }
                                
                                    if (count($struct->sqljob)==0)
                                    {
                                        $fh = fopen($migration, 'a+');
                                        fwrite($fh, $sql . ";\n");
                                        fclose($fh);
                                    }
                                }
                                else
                                {
                                    $sql = "DROP TABLE {$table}";
                                }

                                try
                                {
                                    $run = Moorexa\DB::sql($sql);
                                    if ($run->ok)
                                    {
                                        if ($hasfile)
                                        {
                                            // remove
                                            $cont = file_get_contents($dir);
                                            $quote = preg_quote($body . "\n");
                                            $cont = preg_replace("/($quote)/", '', $cont);
                                            $cont = str_replace($comment, '', $cont);

                                            file_put_contents($dir, $cont);
                                        }

                                        self::out("\nTable '$table' dropped ".$ass->ansii('green')."successfully!");
                                    }
                                    else
                                    {
                                        self::out("\nDrop table '$table' ".$ass->ansii('red')."failed!");
                                    }
                                }
                                catch(Exception $e)
                                {
                                    if ($hasfile)
                                    {
                                        // roll back
                                        $content = file_get_contents($migration);
                                        $content = str_replace($sql .';'."\n", '',$content);
                                        file_put_contents($migration, $content);
                                    }

                                    self::out($ass->ansii('red').$e->getMessage());
                                }
                            }
                            else
                            {
                                self::out($ass->ansii('red')."\nOperation canceled..");
                            }
                        }
                        else
                        {
                            try
                            {
                                Moorexa\DB::apply($default);
                            }
                            catch(Exception $e)
                            {
                                self::out($ass->ansii('red').$e->getMessage());
                            }

                            $tables = Moorexa\DB::sql('show tables');
                            $exists = false;

                            $tables->assoc(function($e) use (&$exists, $table){
                                $tables = array_flip(array_values($e));
                                if (isset($tables[$table]))
                                {
                                    $exists = true;
                                }
                            });

                            if ($exists)
                            {
                                fwrite(STDOUT, 'Are you sure you want to DROP '.$table.' (y/n)? ');
                                $ans = strtolower(trim(fgets(STDIN)));

                                if ($ans == 'y')
                                {
                                    try
                                    {
                                        $run = Moorexa\DB::sql("DROP TABLE {$table}");
                                        
                                        if ($run->ok)
                                        {
                                            self::out("\nTable '$table' dropped ".$ass->ansii('green')."successfully!");
                                        }
                                        else
                                        {
                                            self::out("\nDrop table '$table' ".$ass->ansii('red')."failed!");
                                        }
                                    }
                                    catch(Exception $e)
                                    {
                                        self::out($ass->ansii('red').$e->getMessage());
                                    }
                                }
                                else
                                {
                                    self::out($ass->ansii('red')."\nOperation canceled..");
                                }
                            }
                            else
                            {
                                self::out($ass->ansii('red')."Operation ended. Table '$table' does not exist..");
                            }
                            
                        }
                    }
                    else
                    {
                        self::out($ass->ansii('red')."Operation ended. Database configuration not found..");   
                    }

                    self::out(PHP_EOL);
                    

                break;
                
                
                // empty a table
                case 'empty':

                    $default = Moorexa\DatabaseHandler::$default;
                                    
                    $other = array_slice($arg, 2);

                    if (count($other) > 0)
                    {
                        foreach ($other as $i => $option)
                        {
                            $eq = strpos($option, '=');
                            if ($eq !== false)
                            {
                                $opt = substr($option, 0, $eq);
                            }
                            else
                            {
                                $opt = substr($option,0);
                            }

                            $val = substr($option, $eq+1);

                            switch(strtolower($opt))
                            {
                                case '-database':
                                    $default = $val;
                                break;
                            }
                        }
                    }

                    $config = Moorexa\DatabaseHandler::connectionConfig($default);

                    if ($config !== false)
                    {
                        $continue = true;

                        if ($continue)
                        {
                            fwrite(STDOUT, 'Are you sure you want to TRUNCATE '.$table.' (y/n)? ');
                            $ans = trim(fgets(STDIN));

                            if ($ans == 'y')
                            {
                                $databaseSource = $default;
                                $driver = Moorexa\DatabaseHandler::connectionConfig($default, 'driver');

                                $sqlString = "TRUNCATE {$table}";

                                $migration = self::$assistPath."lab/Sql/{$driver}/".$databaseSource.'.sql';
                                 


                                $sql = $sqlString;
                                try
                                {
                                    Moorexa\DB::apply($default);
                                }
                                catch(Exception $e)
                                {
                                    self::out($ass->ansii('red').$e->getMessage());
                                }

                                try
                                {
                                    $run = Moorexa\DB::sql($sql);
                                    if ($run->ok)
                                    {
                                        $fh = fopen($migration, 'a+');
                                        fwrite($fh, "\n".$sql . ";\n");
                                        fclose($fh);

                                        self::out("\nTable '$table' truncated ".$ass->ansii('green')."successfully!");
                                    }
                                    else
                                    {
                                        self::out("\Truncate table '$table' ".$ass->ansii('red')."failed!");
                                    }
                                }
                                catch(Exception $e)
                                {
                                    // roll back
                                    $content = file_get_contents($migration);
                                    $content = str_replace($sql .';'."\n", '',$content);
                                    file_put_contents($migration, $content);

                                    self::out($ass->ansii('red').$e->getMessage());
                                }
                                  


                            }
                            else
                            {
                                self::out($ass->ansii('red')."\nOperation canceled..");
                            }
                        }
                    }
                    else
                    {
                        self::out($ass->ansii('red')."Operation ended. Database configuration not found..");   
                    }

                    self::out(PHP_EOL);

                break;

                // show table records
                case 'show':
                    self::sqlOperation($arg, $table, 'select');
                break;

                // describe table
                case 'describe':
                    self::sqlOperation($arg, $table, 'describe');
                break;

                // get table rows
                case 'rows':
                    self::sqlOperation($arg, $table, 'rows');
                break;

                // insert to table
                case 'insert':
                    self::sqlOperation($arg, $table, 'insert');
                break;

                // update table
                case 'update':
                    self::sqlOperation($arg, $table, 'update');
                break;

                // update table
                case 'delete':
                    self::sqlOperation($arg, $table, 'delete');
                break;

                // show all tables
                case 'all':
                    self::sqlOperation($arg, null, 'all');
                break;
                
            }
        }
    }
    
    public static function sqlOperation($arg, $table, $action)
    {
        $__arg = $arg;

        $query = [
            'mysql' => [
                'select' => 'SELECT {column} FROM {table} ',
                'describe' => 'DESCRIBE {table} ',
                'rows' => 'SELECT {column} FROM {table} ',
                'update' => 'UPDATE {table} SET {set} ',
                'delete' => 'DELETE FROM {table} ',
                'insert' => 'INSERT INTO {table} SET {set}',
                'all' => 'SHOW TABLES'
            ],

            'sqlite' => [
                'select' => 'SELECT {column} FROM {table} ',
                'describe' => 'DESCRIBE {table} ',
                'rows' => 'SELECT {column} FROM {table} ',
                'update' => 'UPDATE {table} SET {set} ',
                'delete' => 'DELETE FROM {table} ',
                'insert' => 'INSERT INTO {table} SET {set}',
                'all' => 'SHOW TABLES'
            ],

            'pgsql' => [
                'select' => 'SELECT {column} FROM {table} ',
                'describe' => 'DESCRIBE {table} ',
                'rows' => 'SELECT {column} FROM {table} ',
                'update' => 'UPDATE {table} SET {set} ',
                'delete' => 'DELETE FROM {table} ',
                'insert' => 'INSERT INTO {table} SET {set}',
                'all' => 'SHOW TABLES'
            ]
        ];

        $default = Moorexa\DatabaseHandler::$default;

        $copy = $arg;
                                    
        $other = array_slice($copy, 1);

        $driver = '';

        $where = '';

        $column = '*';

        $set = '';

        $statement1 = "";

        if (count($other) > 0)
        {
            foreach ($other as $i => $option)
            {
                $eq = strpos($option, '=');
                if ($eq !== false)
                {
                    $opt = substr($option, 0, $eq);
                }
                else
                {
                    $opt = substr($option,0);
                }

                $val = substr($option, $eq+1);

                switch(strtolower($opt))
                {
                    case '-database':
                        $default = $val;
                    break;

                    case '-driver':
                        $driver = $val;
                    break;

                    case '-column':
                        $column = $val;
                    break;

                    case '-set':
                        $start = array_slice($other, ($i+1));
                        $statement = "";

                        foreach($start as $x => $ln)
                        {

                            if ($ln == '-end')
                            {
                                unset($other[$x+1]);
                                break;
                            }
                            
                            if ($ln == '-where=' || $ln == '-where')
                            {
                                $start1 = array_slice($other, ($x+1));
                                
                                foreach($start1 as $y => $lnx)
                                {
                                    if ($lnx == '-end')
                                    {
                                        unset($other[$y+1]);
                                        break;
                                    }
                                    else
                                    {
                                        $eq2 = strpos($lnx, '=');
                                        $val1 = substr($lnx, $eq2+1);
                                        $opt2 = substr($lnx, 0, $eq2);
                                        $comma1 = strrpos($val1, ',');

                                        if ($eq1 !== false)
                                        {
                                            if ($comma1 !== false)
                                            {
                                                $val1 = trim(substr($val1, 0, $comma1));
                                                $val1 = is_int($val1) || is_numeric($val1) ? $val1 : "'$val1'";
                                                $lnx = $opt2.'='.$val1.',';
                                            }
                                            else
                                            {
                                                $val1 = is_int($val1) || is_numeric($val1) ? $val1 : "'$val1'";
                                                $lnx = $opt2.'='.$val1;
                                            }
                                        }

                                        $statement1 .= $lnx.' ';
                                        unset($other[$y+1]);
                                    }
                                }

                                $where = 'WHERE ';

                                break;
                            }
                            else
                            {
                                $eq1 = strpos($ln, '=');
                                $val = substr($ln, $eq1+1);
                                $opt1 = substr($ln, 0, $eq1);
                                $comma = strrpos($val, ',');

                                if ($eq1 !== false)
                                {
                                    if ($comma !== false)
                                    {
                                        $val = trim(substr($val, 0, $comma));
                                        $val = is_int($val) || is_numeric($val) ? $val : "'$val'";
                                        $ln = $opt1.'='.$val.',';
                                    }
                                    else
                                    {
                                        $val = is_int($val) || is_numeric($val) ? $val : "'$val'";
                                        $ln = $opt1.'='.$val;
                                    }
                                }

                                
                                $statement .= $ln.' ';
                                unset($other[$x+1]);
                            }
                        }
                        $set = ' '.$statement;
                    break;

                    case '-where':
                        $start = array_slice($other, ($i+1));
                        $statement = "";
                        foreach($start as $x => $ln)
                        {
                            if ($ln == '-end')
                            {
                                unset($other[$x+1]);
                                break;
                            }
                            else
                            {
                                $eq1 = strpos($ln, '=');
                                $val = substr($ln, $eq1+1);
                                $opt1 = substr($ln, 0, $eq1);
                                $comma = strrpos($val, ',');

                                if ($eq1 !== false)
                                {
                                    if ($comma !== false)
                                    {
                                        $val = trim(substr($val, 0, $comma));
                                        $val = is_int($val) || is_numeric($val) ? $val : "'$val'";
                                        $ln = $opt1.'='.$val.',';
                                    }
                                    else
                                    {
                                        $val = is_int($val) || is_numeric($val) ? $val : "'$val'";
                                        $ln = $opt1.'='.$val;
                                    }
                                }

                                $statement .= $ln.' ';
                                unset($other[$x+1]);
                            }
                        }
                        $where = 'WHERE '.$statement;
                    break;

                    case '-orderby':
                        $start = array_slice($other, ($i+1));
                        $statement = "";
                        foreach($start as $x => $ln)
                        {
                            if ($ln == '-end')
                            {
                                unset($other[$x+1]);
                                break;
                            }
                            else
                            {
                                $statement .= $ln.' ';
                                unset($other[$x+1]);
                            }
                        }
                        $where .= ' ORDER BY '.$statement;
                    break;

                    case '-limit':
                        $start = array_slice($other, ($i+1));
                        $statement = "";
                        foreach($start as $x => $ln)
                        {
                            if ($ln == '-end')
                            {
                                unset($other[$x+1]);
                                break;
                            }
                            else
                            {
                                $statement .= $ln.' ';
                                unset($other[$x+1]);
                            }
                        }
                        $where .= ' LIMIT '.$statement;
                    break;

                }
            }
        }   

        if (!empty($statement1) && $action != 'all')
        {
            $where .= $statement1;
        }

        $config = Moorexa\DatabaseHandler::connectionConfig($default);

        $ass = new Assist();

        if ($config !== false)
        {
            if ($driver == '')
            {
                $driver = $config['driver'];
            }

            $query = $query[$driver][$action];

            $query = str_replace("{column}", $column, $query);
            $query = str_replace("{table}", $table, $query);
            $query = str_replace("{set}", $set, $query);

            $continue = true;

            if ($continue)
            {
                if (!empty($where) && $action != 'all')
                {
                    $query .= $where;
                }

                $db = null;

                try
                {
                    $db = Moorexa\DB::apply($default);
                }
                catch(\Exception $e)
                {
                    self::out($ass->ansii('red').$e->getMessage());
                }

                if ($action != 'insert' && $action != 'all')
                {
                    $run = Moorexa\DB::sql($query);
                }
                else
                {
                    try
                    {
                        $run = $db->pdoInstance->query($query);

                        if ($run !== false && $action != 'all')
                        {
                            $run->rows = $run->rowCount();
                        }
                        else
                        {
                            $run->rows = 1;
                        }
                    }
                    catch(Error $e)
                    {
                        self::out($ass->ansii('red').$e->getMessage()."\n");
                    }
                }

                if ($run->rows > 0)
                {
                    if ($action == 'select' || $action == 'describe')
                    {
                        $keys = (array) $run->assoc()->row();
                        $keys = array_keys($keys);

                        $column = $keys;
                     
                        $run->reset();

                        $tbl = new Console_Table();

                        $tbl->setHeaders($column);

                        while($row = $run->assoc())
                        {
                            $vals = (array) $row->row();

                            foreach($vals as $i => $x)
                            {
                                if (strlen($x) > 30)
                                {
                                    $vals[$i] = wordwrap($x, 30, "\n", true);
                                }
                            }

                            $tbl->addRow($vals);
                        }

                        self::out($tbl->getTable());
                        self::out($run->rows.' rows returned..');

                    }
                    elseif ($action == 'all')
                    {
                        $rows = 0;

                        $tbl = new Console_Table();

                        $tbl->setHeaders(['Tables', 'Rows']);

                        foreach($run as $row)
                        {
                            $arr = [];
                            $arr[0] = $row[0];
                            $run = Moorexa\DB::sql("SELECT * FROM {$row[0]}");
                            $arr[1] = $run->rows;
                            
                            $tbl->addRow($arr);
                            $rows++;
                        }
                        
                        $run->rows = $rows;

                        self::out($tbl->getTable());
                        self::out($run->rows.' rows returned..');
                    }
                    elseif ($action == 'rows')
                    {
                        self::out($run->rows.' rows returned..');
                    }
                    elseif ($action == 'update')
                    {
                        self::sleep($ass->ansii('green')."'$table' updated successfully.\n".$ass->ansii('reset'));
                        self::sqlOperation($__arg, $table, 'select');
                    }
                    elseif ($action == 'delete')
                    {
                        self::out($run->rows.' rows affected..');
                    }
                    elseif ($action == 'insert')
                    {
                        self::out($ass->ansii('green').$run->rows.' row affected..');

                        self::sqlOperation($__arg, $table, 'select');
                    }
                }
                else
                {
                    self::out('0 rows returned..');
                }
            }
            
        }
        else
        {
            self::out($ass->ansii('red')."Operation ended. Database configuration not found..");   
        }

        self::out(PHP_EOL);
    }

    // tables migrate 
    private static function tablesMigrate($tables, $directory, $debug, $database, $drop, $options, $other)
    {
        $ass = new Assist();

        if ($debug === false)
        {
            error_reporting(0);
        }

        $default = Moorexa\DatabaseHandler::$default;

        $bl = new Moorexa\Bootloader();

        if (!\Moorexa\DatabaseHandler::$forceProductionMode)
        {
            foreach ($tables as $i => $table)
            {
                $file = $directory . $table . '.php';


                if (file_exists($file))
                {
                    include_once ($file);
                    $connectwith = $default;
                    $table = str_replace('-',' ', $table);
                    $exp = explode(" ", $table);
                    if (count($exp) > 1)
                    {
                        $first = $exp[0];
                        unset($exp[0]);
                        $other = ucwords(implode(" ", $exp));
                        $other = str_replace(" ",'', $other);
                        $table = $first.$other;
                    }

                    // get namespace
                    $content = file_get_contents($file);
                    
                    // no namespace
                    $tableName = $table;

                    if (preg_match('/(namespace )(.*?)[;]/i', $content, $namespace))
                    {
                        if (count($namespace) > 1)
                        {
                            $namespace = end($namespace);
                            $table = $namespace . '\\' . $table;
                        }
                    }

                    $content = null;

                    $ins = new $table;
                    $ref = new \ReflectionClass($table);

                    if ($ref->hasProperty('connectionIdentifier') || $ref->hasProperty('switchdb'))
                    {
                        if ($ref->hasProperty('connectionIdentifier'))
                        {
                            $ci = trim($ins->connectionIdentifier);
                        }
                        else
                        {
                            $ci = trim($ins->switchdb);
                        }

                        if (strlen($ci) > 0)
                        {
                            $cs = Moorexa\DatabaseHandler::connectionConfig($ci);
                            if ($cs !== false)
                            {
                                $connectwith = $ci;
                            }
                            else
                            {
                                if ($database !== null)
                                {
                                    $cs = Moorexa\DatabaseHandler::connectionConfig($database);
                                    if ($cs !== false)
                                    {
                                        $connectwith = $database;
                                    }
                                }
                            }
                        }
                        else
                        {
                            if ($database !== null)
                            {
                                $cs = Moorexa\DatabaseHandler::connectionConfig($database);
                                if ($cs !== false)
                                {
                                    $connectwith = $database;
                                }
                            }
                        }
                    }
                    else
                    {
                        if ($database !== null)
                        {
                            $cs = Moorexa\DatabaseHandler::connectionConfig($database);
                            if ($cs !== false)
                            {
                                $connectwith = $database;
                            }
                        }
                    }

                    // switch table name;
                    if ($ref->hasProperty('table'))
                    {
                        if (strlen(trim($ins->table)) > 1)
                        {
                            $tableName = $ins->table;
                        }
                    }

                    $now = 0;

                    $table = lcfirst($tableName);
                    $table = Moorexa\DB::getPrefix() . $table;
                    $tableName = $table;

                    if (!is_null($connectwith) && strlen($connectwith) > 1)
                    {
                        $struct = new Moorexa\Structure();
                        $struct->databaseSource = $connectwith;
                        $struct->driver = Moorexa\DatabaseHandler::connectionConfig($connectwith, 'driver');
                        
                        $migration = self::$assistPath."lab/Sql/".ucfirst($struct->driver)."/".$struct->databaseSource.'.sql';

                        $struct->tableName = $table;

                        $struct->buildQuery = [];
                        $struct->queryInfo = [];
                        $struct->sqlString = "";
                        $struct->sqljob = [];

                        if ($drop)
                        {
                            $struct->dropTables[$table] = true;
                        }

                        if ($options)
                        {
                            $struct->tableOptions[$table] = true;
                        }


                        if ($drop)
                        {
                            if ($ref->hasMethod('down'))
                            {
                                $struct->drop(function($exec, $record) use ($ins, $bl){
                                    $const = [];
                                    $bl->getParameters($ins, 'down', $const, [$exec, $record]); 
                                    call_user_func_array([$ins, 'down'], $const);
                                });
                            }
                        }

                        if ($options)
                        {
                            if ($ref->hasMethod('option'))
                            {
                                $struct->options(function($option) use ($ins, $bl){
                                    $const = [];
                                    $bl->getParameters($ins, 'option', $const, [$option]);  
                                    call_user_func_array([$ins, 'option'], $const);
                                });
                            }
                        }

                        $tableObject = null;

                        if (!$drop)
                        {
                            $struct->promise(function($status, $table) use (&$ins, &$tableObject){
                                $tableObject = $table;
                                $ins->table = $table;
                            });
                        }


                        if (!$drop && !$options)
                        {
                            
                            if ($ref->hasMethod('up'))
                            {
                                $const = [];

                                $bl->getParameters($ins, 'up', $const, [$struct]); 
                            
                                call_user_func_array([$ins, 'up'], $const);

                                $struct = $const[0];
                                $struct->tableName = $table;

                                if (count($struct->buildQuery) > 0 || $struct->sqlString != "")
                                {
                                    $struct->save;
                                }
                            }
                        }

                        if (is_object($tableObject))
                        {
                            $tableObject->table = $tableName;
                        }

                        if (!$drop)
                        {
                            if ($ref->hasMethod('promise'))
                            {
                                $const = [];
                                $status = 'waiting';
                                $ins->table = $tableObject;
                                $bl->getParameters($ins, 'promise', $const, [$status, $tableObject]); 
                                call_user_func_array([$ins, 'promise'], $const); 
                            }
                        }


                        try
                        {
                            Moorexa\DB::apply($connectwith);

                            if (\Moorexa\DatabaseHandler::$forceProductionMode || self::$migrateOption)
                            {
                                array_unshift($struct->sqljob, $struct->createSQL);
                            }

                            $total = count($struct->sqljob);
                            $rows = 0;
                            
                            if (count($struct->sqljob) > 0)
                            {
                                foreach ($struct->sqljob as $i => $sql)
                                {
                                    if (strlen($sql) > 4)
                                    {
                                        try
                                        {
                                            $run = Moorexa\DB::sql($sql);
                                            
                                            $rows += $run->rows;

                                            if ($run->ok)
                                            {
                                                $now++;
                                            }
                                            else
                                            {
                                                if ($drop || $options)
                                                {
                                                    $now++;
                                                }
                                            }

                                            if ($options)
                                            {
                                                if (preg_match("/^(RENAME TABLE)/", $sql))
                                                {
                                                    $rename = preg_replace("/(RENAME TABLE)/i", '', $sql);
                                                    $rename = str_replace('`','',$rename);
                                                    $rename = trim($rename);

                                                    $tableExp = explode(" ", $rename);
                                                    $table = $tableExp[0];
                                                    $newTable = end($tableExp);

                                                    $content = file_get_contents($file);
                                                    $content = str_replace('class '.$table, 'class '.$newTable, $content);
                                                    file_put_contents($file, $content);

                                                    // rename file
                                                    $newfile = $directory . $newTable . '.php';
                                                    @rename($file, $newfile);
                                                }
                                            }
                                        }
                                        catch(Exception $e)
                                        {
                                            // roll back
                                            
                                            $content = trim(file_get_contents($migration));
                                            $ending = strrpos($content, $sql . ";");

                                            $length = strlen($sql . ";");
                                            $content = substr_replace($connect, '', $ending, $length+1);
                                            file_put_contents($migration, $content);

                                            self::out($ass->ansii('red').$e->getMessage());
                                        }
                                    }
                                }
                            }

                            // change character set
                            if (!$drop && $now > 0)
                            {
                                $sql = "ALTER TABLE `{$table}` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;";
                                Moorexa\DB::sql($sql);
                            }

                            if (isset($struct->promises[$table]))
                            {
                                $promise = $struct->promises[$table];
                                $callback = $promise[0];
                                $db = $promise[1];
                                $db->table = $struct->tableName;

                                call_user_func($callback, 'complete', $db);
                            }
                            
                            if (!$drop)
                            {
                                if ($ref->hasMethod('promise'))
                                {
                                    $const = [];
                                    $status = 'complete';
                                    $ins->table = $tableObject;
                                    $ins->table->table = $struct->tableName;
                                    $tableObject->table = $struct->tableName;
                                    
                                    $bl->getParameters($ins, 'promise', $const, [$status, $tableObject]); 
                                    call_user_func_array([$ins, 'promise'], $const); 
                                }
                            }

                            // push migration for insert, update, delete
                            self::pushMigration($struct->driver, $table, $success);

                            if ($now > 0 || $rows > 0 || $success > 0 || Moorexa\DB::$transactionCode == 200)
                            {
                                self::out("'$table' migration ".$ass->ansii('green')."complete!");
                            }
                            else
                            {
                                self::out("'$table' migration ".$ass->ansii('red')."failed!");

                                if (isset($struct->promises[$table]))
                                {
                                    call_user_func($struct->promises[$table], 'failed');
                                }

                                if ($ref->hasMethod('promise'))
                                {
                                    $const = [];
                                    $status = 'failed';
                                    $bl->getParameters($ins, 'promise', $const, [$status, $tableObject]); 
                                    call_user_func_array([$ins, 'promise'], $const); 
                                }

                                usleep(100000);
                            }

                            
                        }
                        catch(Exception $e)
                        {
                            self::out($ass->ansii('red').$e->getMessage());
                        }

                        $struct = null;
                
                    }
                    else
                    {
                        self::out("{$table} ".$ass->ansii('red').'failed!'.$ass->ansii('reset')." Reason: Database connection not found.");
                    }
                }
            }
        }
        else
        {
            // push to production server
            $zipfile = self::$assistPath . PATH_TO_STORAGE . 'Tmp/migrateTables.zip';
            $pushedPath = self::$assistPath . PATH_TO_STORAGE . 'Tmp/migratePaths.json';
            $zip = new ZipArchive();
            if ($zip->open($zipfile, ZipArchive::CREATE) === true)
            {
                $pushed = [];
                foreach ($tables as $index => $table)
                {
                    $file = $directory . $table . '.php';
                    if (file_exists($file))
                    {
                        $zip->addFile($file);
                        $pushed[basename($file)] = $file;
                    }
                }

                if (count($pushed) > 0)
                {
                    file_put_contents($pushedPath, json_encode($pushed, JSON_PRETTY_PRINT));
                    $zip->addFile($pushedPath);
                }

                // close
                $zip->close();
            }

            // clean
            if (file_exists($zipfile))
            {
                // push online.
                include_once HOME . 'deploy.php';

                $package = new DeployProject();
                $url = $package->remote_address;
                
                if (strlen($url) < 4)
                {
                    $settings = new Moorexa\AppSettings();
                    $url = $settings->url_live;
                }

                $mime = mime_content_type($zipfile);

                if (class_exists('CURLFile'))
                {
                    $cfile = new CURLFile(realpath($zipfile));
                }
                elseif (function_exists('curl_file_create'))
                {
                    $cfile = curl_file_create(realpath($zipfile), $mime, basename($zipfile));
                }
                else
                {
                    $cfile = '@'.realpath($zipfile).';type='.$mime.';filename='.basename($zipfile);
                }

                $post = array (
                    'migrate' => $cfile
                );

                if (count($tables) > 0)
                {
                    $post['tables'] = implode(',', $tables);
                }

                $parse = parse_url($url);
                $host = $parse['host'];

                $args = [];

                if (count($other) > 0)
                {
                    foreach ($other as $i => $option)
                    {
                        $eq = strpos($option, '=');
                        if ($eq !== false)
                        {
                            $opt = substr($option, 0, $eq);
                        }
                        else
                        {
                            $opt = substr($option,0);
                        }

                        if ($eq !== false)
                        {
                            $val = substr($option, $eq+1);
                        }
                        else
                        {
                            $val = false;
                        }

                        switch(strtolower($opt))
                        {
                            case '-database':
                                $args[] = '-database';
                            break;

                            case '-tables':
                                if ($val !== false)
                                {
                                    $args[] = '-tables='.$val;
                                }
                                else
                                {
                                    $args[] = '-tables';
                                }
                            break;

                            case '-from':
                                if (is_dir(self::$assistPath . $val))
                                {
                                    $args[] = '-from='.$val;
                                }
                                elseif (is_dir($val))
                                {
                                    $args[] = '-from='.$val;
                                }
                            break;

                            case '-debug':
                                $args[] = '-debug';
                            break;

                            case '-drop':
                                $args[] = '-drop';
                            break;

                            case '-options':
                            case '-option':
                                $args[] = '-option';
                            break;

                            case '--force':
                            case '-force':
                                $args[] = '-force';
                            break;
                        }   
                    }
                }

                if (filter_var($url, FILTER_VALIDATE_URL))
                {
                    self::out($ass->ansii('green').'[Ok]'.$ass->ansii('reset').' Performing handshake with production server');

                    $agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:68.0) Gecko/20100101 Firefox/68.0';

                    $ch = curl_init();
                    curl_setopt($ch, CURLOPT_URL, $url.'/database/migrateProduction/'.implode('/', $args));
                    curl_setopt($ch, CURLOPT_POST, 1);
                    curl_setopt($ch, CURLOPT_HEADER, 0);
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 
                    curl_setopt($ch, CURLOPT_USERAGENT, $agent);   
                    curl_setopt($ch, CURLOPT_HTTPHEADER,array('Content-Type: multipart/form-data',
                    "Assist-Cli-Token: ".Moorexa\Bootloader::$instance->boot('assist_token'),
                    'Accept: text/html,'.$mime.',application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                    'Accept-Language: en-US,en;q=0.5',
                    'Cache-Control: max-age=0',
                    'Connection: keep-alive',
                    'Host: '.$host,
                    'Upgrade-Insecure-Requests: 1',
                    'User-Agent: '.$agent));   
                    curl_setopt($ch, CURLOPT_TIMEOUT, 86400);
                    curl_setopt($ch, CURLOPT_POSTFIELDS, $post);

                    $output = curl_exec($ch);
                    curl_close($ch);

                    if (is_bool($output))
                    {
                        self::out("\n".$ass->ansii('red').'Error connecting to '.$url);
                    }
                    else
                    {
                        // get status
                        $start = strstr($output, 'Tables');
                        $start = preg_replace('/^(tables)/i','', $start);

                        $body = trim($start);
                        // error
                        $body = str_replace('failed!', $ass->ansii('red').'failed!'.$ass->ansii('reset'), $body);
                        // success
                        $body = str_replace('complete!', $ass->ansii('green').'complete!'.$ass->ansii('reset'), $body);

                        self::out("\n".$body);
                    }
                }
                else
                {
                    self::out($ass->ansii('red').'Operation failed. Invalid Production URL.');
                }

                // delete
                unlink($zipfile);
                unlink($pushedPath);
            }
        }

    }

    // push migration
    private static function pushMigration($driver, $table, &$success=0)
    {
        $path = self::$assistPath . 'lab/Sql/'.ucfirst($driver).'/'.Moorexa\DatabaseHandler::$connectWith.'.sql';
        $content = file_get_contents($path);

        $pdo = Moorexa\DB::pdo();

        if (method_exists($pdo, 'inTransaction') && $pdo->inTransaction() === false)
        {
            if (method_exists($pdo, 'beginTransaction'))
            {
                $pdo->beginTransaction();
            }
        }

        $usePDO = Moorexa\DatabaseHandler::usePDO(Moorexa\DatabaseHandler::$connectWith);

        if (stripos($content, '--- [BEGIN-'.$table.']') !== false)
        {
            $start = preg_quote('--- [BEGIN-'.$table.']');
            $end = preg_quote('--- [END-'.$table.']');

            // GET ALL
            preg_match_all("/($start\s*([\s\S]*?)$end)/i", $content, $matches);
            if (count($matches) > 0 && count($matches[0]) > 0)
            {
                foreach($matches[0] as $i => $sql)
                {
                    // get sql
                    $getSQL = stristr($sql, '--- SQL ---');
                    $getSQL = substr($getSQL, 0, strpos($getSQL, '--- ENDSQL ---'));
                    $getSQL = trim(ltrim($getSQL, '--- SQL ---'));
                    $getSQL = preg_replace('/^([-]+\s*?[^a-zA-Z])/','',$getSQL);

                    // get binds
                    $getBinds = [];
                    if (stripos($sql, '--- BINDS ---') !== false)
                    {
                        $getBinds = stristr($sql, '--- BINDS ---');
                        $getBinds = substr($getBinds, 0, strpos($getBinds, '--- ENDBINDS ---'));
                        $getBinds = trim(ltrim($getBinds, '--- BINDS ---'));
                        $getBinds = preg_replace('/^([-]+\s*?[^a-zA-Z|\{])/','',$getBinds);
                        $getBinds = rtrim($getBinds, '---');
                        $getBinds = (array) json_decode($getBinds);
                    }
                
                    // check if record doesn't exist for insert migration
                    if (stripos($getSQL, 'insert') === 0)
                    {
                        // get columns
                        $column = substr($getSQL, strpos($getSQL, '(')+1);
                        $column = substr($column, 0, strpos($column, ')'));

                        // convert to an array
                        $array = explode(',', $column);

                        $bind = $getBinds;

                        if ($usePDO)
                        {
                            $bind = array_splice($bind, 0, count($array));
                            $bindKeys = array_keys($bind);

                            $where = [];

                            foreach ($array as $index => $key)
                            {
                                $where[] = $key .' = :'.$bindKeys[$index];
                            }

                            $where = implode(" AND ", $where);

                            $select = 'SELECT * FROM '.$table.' WHERE '.$where;
                            $smt = $pdo->prepare($select);
                            $run = $smt->execute($bind);

                            if ($smt->rowCount() == 0)
                            {
                                // insert
                                $smt = $pdo->prepare($getSQL);
                                if ($smt->execute($getBinds))
                                {
                                    $success++;
                                }
                            }
                        }
                        else
                        {
                            $types = str_split($bind[0]);
                            array_shift($bind);
                            $keys = count($array);

                            $where = [];
                            
                            $select = 'SELECT * FROM '.$table.' WHERE ';

                            foreach ($array as $index => $key)
                            {
                                $where[] = $key .' = ?';
                            }

                            $where = implode(" AND ", $where);

                            $select .= $where;

                            // group
                            $query_group = [];
                            $start = 0;
                            $end = 0;

                            $total = count($bind);

                            for ($i=$start; $i<$total; $i++)
                            {
                                $copy = $types;
                                $type = implode('', array_splice($copy, $start, $keys));

                                $bindCopy = $bind;
                                $data = array_splice($bindCopy, $start, $keys);

                                array_unshift($data, $type);
                                $query_group[] = ['bind' => $data];

                                if ($start < ($total - $keys))
                                {
                                    $start += $keys;
                                }
                                else
                                {
                                    break;
                                }
                            }

                            // run query
                            $sel = $pdo->prepare($select);

                            $query = $getSQL;
                            $newBind = [];
                            $updateQuery = false;
                            $values = [];

                            foreach ($query_group as $index => $record)
                            {
                                $bind = $record['bind'];
                                $type = $bind[0];
                                $other = array_splice($bind, 1);
                                $sel->bind_param($bind[0], ...$other);
                                $sel->execute();
                                $sel->store_result();

                                $keybinds = isset($record['keys']) ? $record['keys'] : null;

                                if ($sel->num_rows == 0)
                                {
                                    $success++;

                                    $value = [];

                                    if (!is_null($keybinds))
                                    {
                                        foreach ($keybinds as $i => $k)
                                        {
                                            $newBind[$k] = $instance->getBinds[$k];
                                            $value[] = ':'.$k;
                                        }

                                        $values[] = '('.implode(',', $value).')';
                                    }
                                }
                                else
                                {
                                    $updateQuery = true;
                                }
                            }
                            
                        }
                    }
                    else
                    {
                        $smt = $pdo->prepare($getSQL);
                        if ($smt->execute($getBinds))
                        {
                            $success++;
                        }

                    }
                }
            }

            // commit transaction
            if (method_exists($pdo, 'commit'))
            {
                $pdo->commit();
            }
        }

    }

    // migration
    public static function migrate($arg)
    {
        $ass = new Assist();
        $command = isset($arg[0]) ? trim(strtolower($arg[0])) : null; 

        $default = Moorexa\DatabaseHandler::$default;
        $tablesMigrate = true;

        if (file_exists(self::$assistPath . 'lab/Dbms/'.$command.'.php'))
        {
            $default = $command;
            $tablesMigrate = false;
        }
        elseif (file_exists('lab/Dbms/'.$command.'.php'))
        {
            $default = $command;
            $tablesMigrate = false;
        }

        $_command = isset($arg[0]) ? $arg[0] : null;
                                
        $other = array_slice($arg, 0);

        $tables = [];

        $usingFrom = false;
        $fromDir = null;
        $debug = false;
        $options = false;
        $drop = false;
        $database = null;
        $forceMigration = false;
        $schema = false;
        $schemaList = [];

        if (count($other) > 0)
        {
            foreach ($other as $i => $option)
            {
                $eq = strpos($option, '=');
                if ($eq !== false)
                {
                    $opt = substr($option, 0, $eq);
                }
                else
                {
                    $opt = substr($option,0);
                }

                if ($eq !== false)
                {
                    $val = substr($option, $eq+1);
                }
                else
                {
                    $val = false;
                }

                switch(strtolower($opt))
                {
                    case '-database':
                        $default = $val;
                        $database = $val;
                    break;

                    case '-schema':
                    case '-schemas':
                        $schema = true;
                        if ($val !== false)
                        {
                            $schemaList = explode(',', $val);
                        }
                    break;

                    case '-tables':
                    case '-table':
                        if ($val !== false)
                        {
                            $tables = explode(',', $val);
                        }
                    break;

                    case '-from':
                        if (is_dir(self::$assistPath . $val))
                        {
                            $usingFrom = true;
                            $fromDir = self::$assistPath . rtrim($val, '/') . '/';
                        }
                        elseif (is_dir($val))
                        {
                            $usingFrom = true;
                            $fromDir = $val;
                        }
                    break;

                    case '-debug':
                        $debug = true;
                    break;

                    case '-drop':
                        $drop = true;
                    break;

                    case '-options':
                    case '-option':
                        $options = true;
                    break;

                    case '-prod':
                    case '-remote':
                    case '-live':
                        \Moorexa\DatabaseHandler::$forceProductionMode = true;
                    break;

                    case '--force':
                    case '-force':
                        \Moorexa\Structure::$forceSQL = true;
                    break;

                    case '--prefix':
                    case '-prefix':
                        \Moorexa\DB::prefix($val);
                    break;
                }   
            }
        }
        

        if ($tablesMigrate === false && $schema === false)
        {
            if ($usingFrom === false)
            {
                $dir = self::$assistPath .'lab/Dbms/'.$default.'.php';

                include $dir;

                $dbclass = ucwords(preg_replace('/[-]/', ' ', $default));
                $dbclass = preg_replace('/[\s]/','',$dbclass);
                
                $ref = new ReflectionClass($dbclass);

                if (count($ref->getMethods()) == 0)
                {
                    $tablesMigrate = true;
                }
            }
        }

        if ($tablesMigrate && !$schema)
        {
            $tables = [];

            if (!is_null($_command) && strpos($_command, '-') === false)
            {
                $tables = explode(',', $_command);
            }

            self::out($ass->ansii('bold')."\nMigrate Tables\n");

            $directory = self::$assistPath . 'lab/Tables/';

            if ($usingFrom)
            {
                $directory = $fromDir;
            }

            if (is_dir($directory))
            {
                if (count($tables) == 0)
                {
                    // get all files
                    $all = glob($directory . '*');
                    foreach ($all as $i => $f)
                    {
                        if (is_file($f))
                        {
                            $type = mime_content_type($f);
                            if ($type == 'text/x-php')
                            {
                                $base = basename($f);
                                $tables[] = substr($base, 0, strpos($base, '.'));
                            }
                        }
                    }
                }
                else
                {
                    foreach ($tables as $i => $table)
                    {
                        if (!file_exists($directory . $table . '.php'))
                        {
                            unset($tables[$i]);
                        }
                    }
                }

                if (count($tables) > 0)
                {
                    self::tablesMigrate($tables, $directory, $debug, $database, $drop, $options, $other);
                }
                else
                {
                    if (!is_null($_command))
                    {
                        self::out($ass->ansii('red')."Operation ended. Table '{$_command}' doesn't exists in '{$directory}'");
                    }
                    else
                    {
                        self::out($ass->ansii('red')."Operation ended. No Table to migrate in '{$directory}'");
                    }
                }
            }
            else
            {
                self::out($ass->ansii('red')."Operation ended. Directory doesn't exists '{$directory}'");
            }
        }
        elseif ($schema)
        {
            $folder = self::$assistPath . 'lab/Schemas/';

            if (count($schemaList) == 0)
            {
                // get all
                $schemas = glob($folder . '*');
                array_map(function($s) use (&$schemaList){
                    if ($s != '.' && $s != '..')
                    {
                        // check directory
                        if (is_dir($s))
                        {
                            // get all files inside directory
                            $dr = getAllFiles($s);
                        
                            $single = reduce_array($dr);

                            // only return file with (.sql) extension
                            if (count($single) > 0)
                            {
                                foreach ($single as $index => $file)
                                {
                                    $ext = stripos(basename($file), '.sql');

                                    if ($ext !== false && $ext == strlen(basename($file))-4)
                                    {   
                                        $schemaList[time().'_'.basename($file)] = file_get_contents($file);
                                    }
                                }
                            }
                        }
                    }
                }, $schemas);
            }
            else
            {
                $newList = [];
                array_map(function($s) use (&$newList, $folder){
                    if (is_file($s))
                    {
                        $ext = stripos(basename($s), '.sql');

                        if ($ext !== false && $ext == strlen(basename($s))-4)
                        {   
                            $newList[time().'_'.basename($s)] = file_get_contents($s);
                        }
                    }
                    elseif (is_dir($s))
                    {
                        // read all files from dir
                        $schemas = glob(rtrim($s, '/') . '/*');
                        array_map(function($s) use (&$newList){
                            if ($s != '.' && $s != '..')
                            {
                                // check directory
                                if (is_dir($s))
                                {
                                    // get all files inside directory
                                    $dr = getAllFiles($s);
                                
                                    $single = reduce_array($dr);

                                    // only return file with (.sql) extension
                                    if (count($single) > 0)
                                    {
                                        foreach ($single as $index => $file)
                                        {
                                            $ext = stripos(basename($file), '.sql');

                                            if ($ext !== false && $ext == strlen(basename($file))-4)
                                            {   
                                                $newList[time().'_'.basename($file)] = file_get_contents($file);
                                            }
                                        }
                                    }
                                }
                            }
                        }, $schemas);
                    }
                    else
                    {
                        $scan = deepScan($folder, $s);
                        if ($scan != '')
                        {
                            $newList[time().'_'.basename($s)] = file_get_contents($scan);
                        }
                    }
                }, $schemaList);
                // replace
                $schemaList = $newList;
            }

            // migrate table
            self::schemaMigrate($schemaList, $database);
        }
        else
        {
            $config = Moorexa\DatabaseHandler::connectionConfig($default);

            $dir = self::$assistPath .'lab/Dbms/'.$default.'.php';

            $className = null;
            $namespace = null;

            if ($usingFrom)
            {
                $dir = deepScan($fromDir, [$command, $command.'.php', ucfirst($command), ucfirst($command).'.php']);

                if (strlen($dir) > 3)
                {
                    // get class name
                    $content = file($dir);
                    $className = null;

                    foreach($content as $i => $line)
                    {
                        $line = trim($line);

                        if (preg_match("/^(namespace)\s{1,}([\S]+)/i", $line, $match))
                        {
                            $namespace = trim(end($match));
                            $namespace = rtrim($namespace, ';');
                        }

                        if (preg_match("/^(class)\s{1,}([\S]+)/", $line, $match))
                        {
                            $className = trim(end($match));
                            break;
                        }
                    }

                    $content = null;
                }
            }
            else
            {
                $content = file_get_contents($dir);

                if (stripos($content, 'namespace ') !== false)
                {
                    preg_match('/(namespace )(.*?)[;]/i', $content, $namespace);

                    
                }
            }

            $dbclass = ucwords(preg_replace('/[-]/', ' ', $default));
            $dbclass = preg_replace('/[\s]/','',$dbclass);

            if ($className !== null)
            {
                $dbclass = $className;
                if ($namespace !== null)
                {
                    $dbclass = $namespace.'\\'.$dbclass;
                }
            }

            if ($config !== false)
            {
                $className = !is_null($className) ? ucfirst($className) : $default;

                self::out($ass->ansii('bold')."\nMigrate {$className}\n");
                $table = isset($arg[1]) ? $arg[1] : null;


                if (strlen($dir) > 4)
                {
                    include_once $dir;

                    $dbms = new $dbclass;

                    if (count($tables) == 0)
                    {
                        $tables = get_methods($dbclass);
                    }

                    if (count($tables) > 0)
                    {
                        self::runMigration($tables, $default, $dbms, $dir, $dbclass, $debug, $options, $drop, $other);
                    }
                    else
                    {
                        self::out($ass->ansii('bold')."Operation ended. No table found!");
                    }
                }
                else
                {
                    self::out($ass->ansii('bold')."Operation ended. Path empty!");
                }
                
            }
            else
            {
                self::out($ass->ansii('bold')."\nOperation ended. Database configuration not found.."); 
            }
        }

        self::out(PHP_EOL);
    }

    // schema migration
    private static function schemaMigrate($schemaList, $database=null)
    {
        $ass = new Assist();

        $default = Moorexa\DatabaseHandler::$default;

        $bl = new Moorexa\Bootloader();

        $connectwith = $default;

        if ($database !== null)
        {
            $cs = Moorexa\DatabaseHandler::connectionConfig($database);
            if ($cs !== false)
            {
                $connectwith = $database;
            }
        }

        self::out($ass->ansii('bold')."\nMigrate Schemas\n");

        if (!is_null($connectwith) && strlen($connectwith) > 1)
        {
            try
            {
                ini_set('memory_limit', '-1');

                Moorexa\DB::apply($connectwith);

                // get all rows
                $rowsBefore = Moorexa\DB::sql('SHOW TABLES;', false);
                $rows = $rowsBefore->rows;
                $quaries = [];

                $driver = Moorexa\DatabaseHandler::connectionConfig($connectwith, 'driver');

                array_each(function($sql, $key) use (&$ass, &$quaries, &$driver){

                    $sql = str_ireplace('CREATE TABLE', 'CREATE TABLE IF NOT EXISTS', $sql);
                    $sql = str_ireplace('CREATE TABLE IF NOT EXISTS IF NOT EXISTS', 'CREATE TABLE IF NOT EXISTS', $sql);
                    // get tables
                    preg_match_all('/(NOT EXISTS\s+)([A-Z0-9a-z_-]+)\s+/', $sql, $matches);
                    $sql = preg_replace('/(ALTER TABLE\s+)([A-Z0-9a-z_-]+)\s+/', '$1`$2` ', $sql);
                    $sql = preg_replace('/(NOT EXISTS\s+)([A-Z0-9a-z_-]+)\s+/', '$1`$2` ', $sql);
                    preg_match_all('/(DEFAULT\s+)([a-z0-9A-Z_-]+)/', $sql, $m);
                    if (count($m[0]) > 0)
                    {
                        foreach ($m[2] as $i => $const)
                        {
                            $rep = $m[0][$i];
                            if (preg_match('/([a-z]+)/', $const))
                            {
                                $sql = str_replace($rep, "DEFAULT '{$const}'", $sql);
                            }
                        }
                    }

                    if (strtolower($driver) != 'mssql')
                    {

                    }

                    if (count($matches[0]) > 0)
                    {
                        foreach ($matches[2] as $index => $table)
                        {
                            $sql .= "\n"."ALTER TABLE `{$table}` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"."\n";
                        }
                    }

                    // run migration
                    $run = Moorexa\DB::sql($sql, false);
                    
                    $quaries[$key] = $run->rows;
                    

                }, $schemaList);

                $rowsNow = Moorexa\DB::sql('SHOW TABLES;', false);
                $rowsUpdated = $rowsNow->rows;

                foreach ($quaries as $key => $run)
                {
                    $_rows = $run > 0 ? $ass->ansii('green').'('.$run.')'.$ass->ansii('reset') : $ass->ansii('red').'(0)'.$ass->ansii('reset');

                    $string = (($rowsUpdated > $rows) ? $ass->ansii('green'). "(". ($rowsUpdated - $rows) . ")". $ass->ansii('reset') ." New tables, " : $ass->ansii('red').'(0)'.$ass->ansii('reset').' New Tables, ') . $_rows . ' Rows affected.';

                    self::out($key . ' migration complete ..' . $string . "\n");
                }
            }
            catch(Exception $e)
            {
                self::out($ass->ansii('red').$e->getMessage());
            }
            catch(PDOException $e)
            {
                self::out($ass->ansii('red').$e->getMessage());
            }
        }
        else
        {
            self::out("Schema Migration ".$ass->ansii('red').'failed!'.$ass->ansii('reset')." Reason: Database connection not extablished.");
        }
    }

    // version control
    public static function vcs($arg)
    {
        $ass = new Assist();

        if (count($arg) > 0)
        {
            $command = isset($arg[0]) ? trim(strtolower($arg[0])) : null;
            $action = isset($arg[1]) ? $arg[1] : null;

            self::out($ass->ansii('bold')."\nVersion Control ".ucfirst($command)." {$action}\n");

            switch ($command)
            {
                case 'push':
                    $version = $action;

                    $copy = $arg;
                    $exclude = ['lab/Backup', 'lab/VCSManager', 'public', 'system', 'utility/Version'];
                    $other = array_slice($arg, 2);

                    $remote = false;

                    if (count($other) > 0)
                    {
                        foreach ($other as $i => $option)
                        {
                            $eq = strpos($option, '=');
                            if ($eq !== false)
                            {
                                $opt = substr($option, 0, $eq);
                                $val = substr($option, $eq+1);

                                switch(strtolower($opt))
                                {
                                    case '-include':
                                        $valx = explode(',', $val);
                                        $flip = array_flip($exclude);
                                        foreach ($valx as $c => $v)
                                        {
                                            $v = strtolower($v);
                                            if (isset($flip[$v]))
                                            {
                                                unset($flip[$v]);
                                            }
                                        }
                                        $flip = array_flip($flip);
                                        $exclude = $flip;
                                    break;

                                    case '-remote':
                                        $remote = true;
                                    break;
                                }
                            }
                            else
                            {
                                if ($option == '-remote')
                                {
                                    $remote = true;
                                }
                            }
                        }
                    }

                    if ($remote === false)
                    {
                        $path = self::$assistPath . PATH_TO_VERSION . $version;
                    }
                    else
                    {
                        $path = self::$assistPath . PATH_TO_VERSION . 'Tmp/';
                    }

                    if (is_dir($path) && $remote === false)
                    {
                        $data = glob(rtrim($path, '/') .'/{,.}*', GLOB_BRACE);

                        foreach ($data as $i => $f)
                        {
                            if ($f != '.' && $f != '..')
                            {
                                if (is_file($f) && basename($f) != 'release-note.md')
                                {
                                    unlink($f);
                                }
                                elseif (is_dir($f) && basename($f) != 'rollbacks')
                                {
                                    $dr = getAllFiles($f);

                                    $single = reduce_array($dr);

                                    if (count($single) > 0)
                                    {
                                        foreach ($single as $z => $d)
                                        {
                                            unlink($d);
                                        }
                                    }
                                }
                            }
                        }

                        @rmdir($path);
                    }
                    
                    // create directory
                    @mkdir($path);

                    // create xml file
                    $template = decryptAssist('czo0MDI6IjsiczozODQ6IlJ2U2xDSlFrTkJsU1hnYjNYbVgxMEtWYWE0MmdUTGhvTHMwNUFqZkJFQVNwdnVNcFlvM3V2bDR3S25lZmlpeElHQi91em1QWHlESWY0K1BtK0RUUTRORDNlb0R4VUpFZURuV1hNVDNRaTdYbCt1eGlBbTdycndqZjJoOVFVOG1oMnpyUkhPYytiZkg1ZmhCRlVDZmdNdkg1WjExRVUrbzBUSmNReFZxaThZODkwY25GV0p2KzhMUkllSFhERWY1NjVBQ0YwdlJyVk02bDVQaWtlU21Wd1pORmUxVVc0L2pCWkpOSUc2bDdrOUFWZDRheHhyZ3FFY2MrOUhwUzZHZU1PUUpKaXZkaTYvRXlndXo1aDBLZ3FySDNFVmlVQ3F6OEk2MEFRcnJnME1BYzFRc3hlZG1HZ1NIZGNxb0NTVmxzb2JkYjZEK01GSk9wUzlHanVQZVpLQ3B2WDY3VS91RnhDWjQ5WDdleU4zSEExaHEzYm01NEYzTHRLd3QvbFVFdSI7IjozOTM6cyI7');
                    // decrypt path
                    $template = str_replace('__PATH__/', self::$assistPath . PATH_TO_VERSION . $version . '/', $template);
                    $template = str_replace('__PATH__', self::$assistPath . PATH_TO_VERSION . $version . '/', $template);

                    // create zip file.
                    $zip = new ZipArchive();
                    $zipfile = $path . '/' . $version.'.zip';

                    if ($remote === false)
                    {
                        $pathsxml = $path . '/paths.xml';
                        @file_put_contents($pathsxml, $template);
                    }
                    else
                    {
                        $pathsxml = self::$assistPath . 'paths.xml';
                        @file_put_contents($pathsxml, $template);
                    }

                    // add note
                    $other = array_slice($copy, 1);

                    if (count($other) > 0)
                    {
                        foreach ($other as $i => $option)
                        {
                            $eq = strpos($option, '=');

                            if ($eq !== false)
                            {
                                $opt = substr($option, 0, $eq);
                            }
                            else
                            {
                                $opt = substr($option,0);
                            }

                            switch(strtolower($opt))
                            {
                                case '-note':
                                  self::out("\nAdd a note to version {$version}, type ".$ass->ansii('bold')."-save".$ass->ansii('reset')." on a newline to save and continue.\n");
                                  $word = [];
                                  while ($line = fgets(STDIN))
                                  {
                                      $close = trim(strtolower($line));

                                      if ($close == '-save')
                                      {
                                          if (count($word) > 0)
                                          {
                                            foreach ($word as $i => $ln)
                                            {
                                                $word[$i] = trim($ln);
                                            }
                                              $word = implode("\n", $word);
                                              $word = str_replace('-save', '', $word);
                                              if ($remote === false)
                                              {
                                                $notepath = $path . '/release-note.md';
                                              }
                                              else
                                              {
                                                $notepath = self::$assistPath . 'release-note.md';
                                              }
                                              $date = "[".date('Y-m-d g:i:s a')."]\n";
                                              $newword = $date . trim($word) . "\n";
                                              $fo = fopen($notepath, 'a+');
                                              fwrite($fo, $newword);
                                              fclose($fo);
                                          }
                                          break;
                                      }
                                      else
                                      {
                                          $word[] = $line;
                                      }
                                  }
                                  self::out(PHP_EOL);
                                break;
                            }
                        }
                    }

                    if ($zip->open($zipfile, ZipArchive::CREATE) === true)
                    {
                        $data = glob(self::$assistPath .'{,.}*', GLOB_BRACE);
                        $dirs = [];
                        foreach ($data as $i => $f)
                        {
                            if ($f != '.' && $f != '..')
                            {
                                if (is_dir($f))
                                {
                                    $dirs[] = $f;
                                }
                                else
                                {
                                    if ($remote)
                                    {
                                        if (basename($f) == 'paths.xml' || basename($f) == 'release-note.md')
                                        {
                                            $dirs[] = $f;
                                        }
                                    }
                                }
                            }
                        }

                        $flip = array_flip($dirs);

                        foreach ($exclude as $i => $ex)
                        {
                            if (isset($flip[$ex]))
                            {
                                unset($dirs[$flip[$ex]]);
                            }
                        }

                        foreach ($dirs as $y => $f)
                        {
                            $dr = getAllFiles($f);                                
                            $single = reduce_array($dr);

                            if (count($single) > 0)
                            {
                                foreach ($single as $z => $d)
                                {
                                    foreach ($exclude as $m => $ms)
                                    {
                                        if (strpos($d, $ms) !== false)
                                        {
                                            unset($single[$z]);
                                            $d = null;
                                        }
                                    }

                                    if ($d !== null)
                                    {
                                        $zip->addFile($d);
                                    }
                                }
                            }
                        }

                        $zip->close();
                    }

                    if ($remote === false)
                    {
                        $zip = new ZipArchive();
                        $zip->open($zipfile);
                        $zip->extractTo($path);
                        $zip->close();

                        // delete zip file
                        @unlink($zipfile);

                        self::out('Version '.$version.' pushed '.$ass->ansii('green').'successfully'.$ass->ansii('reset').'. Ready for publish');
                    }
                    else
                    {
                        $note = file_exists(self::$assistPath . 'release-note.md') ? file_get_contents(self::$assistPath . 'release-note.md') : null;

                        @unlink(self::$assistPath . 'paths.xml');
                        @unlink(self::$assistPath . 'release-note.md');

                        // get remote login
                        $remoteDetails = include_once(self::$assistPath . 'lab/VCSManager/remote.php');
                        $url = $remoteDetails['url'];
                        $username = $remoteDetails['username'];
                        $password = $remoteDetails['password'];
                        $sharedKey = $remoteDetails['sharedKey'];

                        if (strlen($url) < 4)
                        {
                            $settings = new Moorexa\UrlConfig();
                            $url = $settings->url_live;
                        }

                        if (strlen($url) > 4)
                        {
                            // push
                            $url .= '?username='.$username.'&password='.$password.'&vcsmethod=push&sharedKey='.$sharedKey.'&note='.$note;
                            $upload = Moorexa\File::remoteUpload($zipfile, $url, 'pushFile');
                            
                            // delete zip file
                            @unlink($zipfile);

                            $data = json_decode($upload);

                            if (is_object($data))
                            {
                                if (isset($data->success))
                                {
                                    self::out('Version '.$version.' pushed to remote server '.$ass->ansii('green').'successfully'.$ass->ansii('reset').'. Ready for publish');
                                }
                                else
                                {
                                    self::out($ass->ansii('red')."Operation canceled. {$data->warning}.");
                                }
                            }
                            else
                            {
                                self::out($ass->ansii('red')."Operation canceled. An error occured.");
                            }
                        }
                        else
                        {
                            @unlink($zipfile);
                            self::out($ass->ansii('red')."Operation canceled. Failed to establish connection with remote server. URL was null");
                        }
                    }
                    

                break;

                case 'publish':
                    
                    $ignore = ['-prod', '-dev', '-development', '-production', '-live'];

                    $remote = false;

                    $version = $action;

                    if ($action == null || in_array($action, $ignore))
                    {
                        $versions = self::$assistPath . PATH_TO_VERSION;
                        $all = glob(rtrim($versions, '/'). '{,.}*', GLOB_BRACE);
                        $vers = [];
                        foreach ($all as $i => $o)
                        {
                            if ($o != '.' && $o != '..')
                            {
                                if (is_dir($o) && basename($o) != 'rollbacks')
                                {
                                    $dir = stat($o);
                                    $stamp = $dir['ctime'];
                                    $vers[$stamp] = basename($o);
                                }
                            }
                        }

                        $max = max(array_keys($vers));
                        $action = $vers[$max];
                    }

                    $mode = 'development';

                    $other = array_slice($arg, 1);

                    $note = '';

                    if (count($other) > 0)
                    {
                        foreach ($other as $i => $option)
                        {
                            $eq = strpos($option, '=');

                            if ($eq !== false)
                            {
                                $opt = substr($option, 0, $eq);
                            }
                            else
                            {
                                $opt = substr($option,0);
                            }

                            switch(strtolower($opt))
                            {
                                case '-dev':
                                case '-development':
                                    $mode = 'development';
                                break;

                                case '-remote':
                                    $remote = true;
                                break;

                                case '-live':
                                case '-prod':
                                case '-production':
                                    $mode = 'production';
                                break;
                            }
                        }
                    }

                    if ($remote)
                    {
                        if (count($other) > 0)
                        {
                            foreach ($other as $i => $option)
                            {
                                $eq = strpos($option, '=');

                                if ($eq !== false)
                                {
                                    $opt = substr($option, 0, $eq);
                                }
                                else
                                {
                                    $opt = substr($option,0);
                                }

                                switch(strtolower($opt))
                                {
                                    case '-note':
                                    self::out("\nAdd a note to version {$action}, type ".$ass->ansii('bold')."-save".$ass->ansii('reset')." on a newline to save and continue.\n");
                                    $word = [];
                                    while ($line = fgets(STDIN))
                                    {
                                        $close = trim(strtolower($line));

                                        if ($close == '-save')
                                        {
                                            if (count($word) > 0)
                                            {
                                                foreach ($word as $i => $ln)
                                                {
                                                    $word[$i] = trim($ln);
                                                }
                                                $word = implode("\n", $word);
                                                $word = str_replace('-save', '', $word);
                                                
                                                $date = "[".date('Y-m-d g:i:s a')."]\n";
                                                $newword = $date . trim($word) . "\n";
                                                $note = $newword;
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            $word[] = $line;
                                        }
                                    }
                                    self::out(PHP_EOL);
                                    break;
                                }
                            }
                        }
                    }
                    
                    if (!$remote)
                    {
                        $path = self::$assistPath . PATH_TO_VERSION . $action;
                        if (is_dir($path))
                        {
                            $xml = simplexml_load_file(self::$assistPath . 'config.xml');
                            $prod = (array) $xml->versioning->production;
                            $dev = (array) $xml->versioning->development;
                            $xml->versioning->{$mode} = $action;
                            file_put_contents(self::$assistPath . 'config.xml', $xml->saveXML());

                            $version = json_encode(['production' => $prod[0], 'development' => $dev[0]]);
                            $filename = preg_replace('/(-|:|\s*)/', '', date('Y-m-d g:i:s'));
                            $filename .= '_rollback.json';

                            file_put_contents(self::$assistPath . PATH_TO_VERSION . 'Rollbacks/' . $filename, $version);
                            self::out('Version '.$action.' published '.$ass->ansii('green').' for \''.$mode.'\' successfully!');
                        }
                        else
                        {
                            self::out($ass->ansii('red').'Operation canceled. Version '.$action.' doesn\'t exists.');
                        }
                    }
                    else
                    {
                        // get remote login
                        $remoteDetails = include_once(self::$assistPath . 'lab/VCSManager/remote.php');
                        $url = $remoteDetails['url'];
                        $username = $remoteDetails['username'];
                        $password = $remoteDetails['password'];
                        $sharedKey = $remoteDetails['sharedKey'];

                        if (strlen($url) < 4)
                        {
                            $settings = new Moorexa\UrlConfig();
                            $url = $settings->url_live;
                        }

                        // publish
                        $url .= '?username='.$username.'&password='.$password.'&vcsmethod=publish&sharedKey='.$sharedKey.'&mode=production&version='.$version.'&note='.$note;

                        $client = new \GuzzleHttp\Client();
                        $send = $client->request('GET', $url);
                        $body = $send->getBody()->getContents();

                        $data = json_decode($body);

                        if (is_object($data))
                        {
                            if (isset($data->success))
                            {
                                self::out('Version '.$data->version.' published to production server '.$ass->ansii('green').'successfully'.$ass->ansii('reset'));
                            }
                            else
                            {
                                self::out($ass->ansii('red')."Operation canceled. {$data->warning}.");
                            }
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Operation canceled. An error occured.");
                        }
                    }
                break;

                case 'rollback':

                    $dev = true;
                    $prod = true;
                    $remote = false;

                    $other = array_slice($arg, 1);

                    if (count($other) > 0)
                    {
                        foreach ($other as $i => $option)
                        {
                            $eq = strpos($option, '=');

                            if ($eq !== false)
                            {
                                $opt = substr($option, 0, $eq);
                            }
                            else
                            {
                                $opt = substr($option,0);
                            }

                            switch(strtolower($opt))
                            {
                                case '-dev':
                                case '-development':
                                    $dev = true;
                                    $prod = false;
                                break;

                                case '-live':
                                case '-prod':
                                case '-production':
                                    $prod = true;
                                    $dev = false;
                                break;

                                case '-remote':
                                    $remote = true;
                                break;
                            }
                        }
                    }

                    if ($remote === false)
                    {
                        if ($action == null)
                        {
                            $rollbacks = self::$assistPath . PATH_TO_VERSION . 'Rollbacks/';
                            $all = glob($rollbacks. '*');
                            $vers = [];
                            foreach ($all as $i => $o)
                            {
                                if (is_file($o))
                                {
                                    $file = stat($o);
                                    $stamp = $file['ctime'];
                                    $vers[$stamp] = basename($o);
                                }
                            }

                            $max = max(array_keys($vers));
                            $action = $vers[$max];
                        }
                        else
                        {
                            if (strpos($action, '_') === false)
                            {
                                $action .= '_rollback.json';
                            }
                        }

                        $dir = self::$assistPath . PATH_TO_VERSION . 'Rollbacks/';
                        if (file_exists($dir . $action))
                        {
                            $obj = json_decode(trim(file_get_contents($dir . $action)));

                            if (is_object($obj))
                            {
                                $xml = simplexml_load_file(self::$assistPath . 'config.xml');

                                $_prod = (array) $xml->versioning->production;
                                $_prod = $_prod[0];
                                $_dev = (array) $xml->versioning->development;
                                $_dev = $_dev[0];

                                $paths = [];

                                if ($prod)
                                {
                                    $xml->versioning->production = $obj->production;
                                    $paths[] = self::$assistPath . PATH_TO_VERSION . $_prod;
                                }

                                if ($dev)
                                {
                                    $xml->versioning->development = $obj->development;
                                    $paths[] = self::$assistPath . PATH_TO_VERSION . $_dev;
                                }

                                file_put_contents(self::$assistPath . 'config.xml', $xml->saveXML());

                                if (isset($obj->set))
                                {
                                    $rename = self::$assistPath . PATH_TO_VERSION . $obj->to;
                                    $to = self::$assistPath . PATH_TO_VERSION . $obj->set;

                                    @rename($rename, $to);
                                    // add note.
                                    $word = "Rollback was made from version {$obj->to} to {$obj->set}.";
                                    $notepath = $to . '/release-note.md';
                                    $date = "\n[".date('Y-m-d g:i:s a')."]\n";
                                    $newword = $date . trim($word) . "\n";
                                    $fo = fopen($notepath, 'a+');
                                    fwrite($fo, $newword);
                                    fclose($fo);
                                }

                                // add note
                                if (count($other) > 0)
                                {
                                    foreach ($other as $i => $option)
                                    {
                                        $eq = strpos($option, '=');

                                        if ($eq !== false)
                                        {
                                            $opt = substr($option, 0, $eq);
                                        }
                                        else
                                        {
                                            $opt = substr($option,0);
                                        }

                                        switch(strtolower($opt))
                                        {
                                            case '-note':
                                            self::out("\nAdd a note to version {$version}, type ".$ass->ansii('bold')."-save".$ass->ansii('reset')." on a newline to save and continue.\n");
                                            $word = [];
                                            while ($line = fgets(STDIN))
                                            {
                                                $close = trim(strtolower($line));

                                                if ($close == '-save')
                                                {
                                                    if (count($word) > 0)
                                                    {
                                                        foreach ($word as $i => $ln)
                                                        {
                                                            $word[$i] = trim($ln);
                                                        }

                                                        $word = implode("\n", $word);
                                                        $word = str_replace('-save', '', $word);
                                                        foreach ($paths as $i => $pa)
                                                        {
                                                            if (is_dir($pa))
                                                            {
                                                                $notepath = $pa . '/release-note.md';
                                                                $date = "[".date('Y-m-d g:i:s a')."]\n";
                                                                $newword = $date . trim($word) . "\n";
                                                                $fo = fopen($notepath, 'a+');
                                                                fwrite($fo, $newword);
                                                                fclose($fo);
                                                            }
                                                        }
                                                        
                                                    }
                                                    break;
                                                }
                                                else
                                                {
                                                    $word[] = $line;
                                                }
                                            }
                                            self::out(PHP_EOL);
                                            break;
                                        }
                                    }
                                }

                                // delete rollback file
                                @unlink($dir.$action);
                                // done
                                self::out("Rollback was ".$ass->ansii('green')."successful".$ass->ansii('reset').". Prod:".$obj->production.", Dev:".$obj->development);
                            }
                            else
                            {
                                self::out($ass->ansii('red')."Invalid JSON Data. Operation Canceled!");
                            }
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Operation canceled. Rollback {$action} not found!");
                        }
                    }
                    else
                    {
                        $note = '';

                        if (count($other) > 0)
                        {
                            foreach ($other as $i => $option)
                            {
                                $eq = strpos($option, '=');

                                if ($eq !== false)
                                {
                                    $opt = substr($option, 0, $eq);
                                }
                                else
                                {
                                    $opt = substr($option,0);
                                }

                                switch(strtolower($opt))
                                {
                                    case '-note':
                                    self::out("\nAdd a note to rollback, type ".$ass->ansii('bold')."-save".$ass->ansii('reset')." on a newline to save and continue.\n");
                                    $word = [];
                                    while ($line = fgets(STDIN))
                                    {
                                        $close = trim(strtolower($line));

                                        if ($close == '-save')
                                        {
                                            if (count($word) > 0)
                                            {
                                                foreach ($word as $i => $ln)
                                                {
                                                    $word[$i] = trim($ln);
                                                }
                                                $word = implode("\n", $word);
                                                $word = str_replace('-save', '', $word);
                                                
                                                $note = trim($word) . "\n";
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            $word[] = $line;
                                        }
                                    }
                                    self::out(PHP_EOL);
                                    break;
                                }
                            }
                        }

                        $version = $action == '-remote' ? '' : $action;

                        // get remote login
                        $remoteDetails = include_once(self::$assistPath . 'lab/VCSManager/remote.php');
                        $url = $remoteDetails['url'];
                        $username = $remoteDetails['username'];
                        $password = $remoteDetails['password'];
                        $sharedKey = $remoteDetails['sharedKey'];

                        if (strlen($url) < 4)
                        {
                            $settings = new Moorexa\UrlConfig();
                            $url = $settings->url_live;
                        }

                        // publish
                        $url .= '?username='.$username.'&password='.$password.'&vcsmethod=rollback&sharedKey='.$sharedKey.'&mode=production&version='.$version.'&note='.$note;

                        $client = new \GuzzleHttp\Client();
                        $send = $client->request('GET', $url);
                        $body = $send->getBody()->getContents();

                        $data = json_decode($body);

                        if (is_object($data))
                        {
                            if (isset($data->success))
                            {
                                self::out('Rollback on production server was '.$ass->ansii('green').'successfully'.$ass->ansii('reset')." Prod:".$data->prod);
                            }
                            else
                            {
                                self::out($ass->ansii('red')."Operation canceled. {$data->warning}.");
                            }
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Operation canceled. An error occured.");
                        }
                    }

                break;

                case 'set':
                    $replace = isset($arg[3]) ? $arg[3] : null;
                    $to = isset($arg[2]) ? trim(strtolower($arg[2])) : null;

                    $_dev = true;
                    $_prod = false;
                    $remote = false;
                    $note = '';

                    $other = array_slice($arg, 1);

                    if (count($other) > 0)
                    {
                        foreach ($other as $i => $option)
                        {
                            $eq = strpos($option, '=');

                            if ($eq !== false)
                            {
                                $opt = substr($option, 0, $eq);
                            }
                            else
                            {
                                $opt = substr($option,0);
                            }

                            switch(strtolower($opt))
                            {
                                case '-dev':
                                case '-development':
                                    $_dev = true;
                                break;

                                case '-live':
                                case '-prod':
                                case '-production':
                                    $_prod = true;
                                    $_dev = false;
                                break;

                                case '-remote':
                                    $remote = true;
                                break;
                            }
                        }
                    }
                    

                    if ($remote === false)
                    {
                        if ($to !== null && $to == 'to')
                        {
                            $dir = self::$assistPath . PATH_TO_VERSION;
                            $rename = $dir . $action;
                            $with = $dir . $replace;

                            if (is_dir($rename))
                            {
                                @rename($rename, $with);

                                // try update config.xml 
                                $xml = simplexml_load_file(self::$assistPath . 'config.xml');
                                $prod = (array) $xml->versioning->production;
                                $prod = $prod[0];
                                $dev = (array) $xml->versioning->development;
                                $dev = $dev[0];

                                $version = json_encode(['production' => $prod, 'development' => $dev, 'set' => $action, 'to' => $replace]);
                                $filename = preg_replace('/(-|:|\s*)/', '', date('Y-m-d g:i:s'));
                                $filename .= '_rollback.json';

                                @file_put_contents(self::$assistPath . PATH_TO_VERSION . 'Rollbacks/' . $filename, $version);

                                if ($prod == $action && $_prod === true)
                                {
                                    $xml->versioning->production = $replace;
                                    $prod = $replace;
                                }
                                
                                if ($dev == $action && $_dev === true)
                                {
                                    $xml->versioning->development = $replace;
                                    $dev = $replace;
                                }

                                @file_put_contents(self::$assistPath . 'config.xml', $xml->saveXML());

                                // create xml file
                                $template = decryptAssist('czo0MDI6IjsiczozODQ6IlJ2U2xDSlFrTkJsU1hnYjNYbVgxMEtWYWE0MmdUTGhvTHMwNUFqZkJFQVNwdnVNcFlvM3V2bDR3S25lZmlpeElHQi91em1QWHlESWY0K1BtK0RUUTRORDNlb0R4VUpFZURuV1hNVDNRaTdYbCt1eGlBbTdycndqZjJoOVFVOG1oMnpyUkhPYytiZkg1ZmhCRlVDZmdNdkg1WjExRVUrbzBUSmNReFZxaThZODkwY25GV0p2KzhMUkllSFhERWY1NjVBQ0YwdlJyVk02bDVQaWtlU21Wd1pORmUxVVc0L2pCWkpOSUc2bDdrOUFWZDRheHhyZ3FFY2MrOUhwUzZHZU1PUUpKaXZkaTYvRXlndXo1aDBLZ3FySDNFVmlVQ3F6OEk2MEFRcnJnME1BYzFRc3hlZG1HZ1NIZGNxb0NTVmxzb2JkYjZEK01GSk9wUzlHanVQZVpLQ3B2WDY3VS91RnhDWjQ5WDdleU4zSEExaHEzYm01NEYzTHRLd3QvbFVFdSI7IjozOTM6cyI7');
                                // decrypt path
                                $template = str_replace('__PATH__/', self::$assistPath . PATH_TO_VERSION . $replace . '/', $template);
                                $template = str_replace('__PATH__', self::$assistPath . PATH_TO_VERSION . $replace . '/', $template);
                                $pathsxml = $with . '/paths.xml';
                                @file_put_contents($pathsxml, $template);

                                // note
                                if (count($other) > 0)
                                {
                                    foreach ($other as $i => $option)
                                    {
                                        $eq = strpos($option, '=');

                                        if ($eq !== false)
                                        {
                                            $opt = substr($option, 0, $eq);
                                        }
                                        else
                                        {
                                            $opt = substr($option,0);
                                        }

                                        switch(strtolower($opt))
                                        {
                                            case '-note':
                                            self::out("\nAdd a note to version {$to}, type ".$ass->ansii('bold')."-save".$ass->ansii('reset')." on a newline to save and continue.\n");
                                            $word = [];
                                            while ($line = fgets(STDIN))
                                            {
                                                $close = trim(strtolower($line));

                                                if ($close == '-save')
                                                {
                                                    if (count($word) > 0)
                                                    {
                                                        foreach ($word as $i => $ln)
                                                        {
                                                            $word[$i] = trim($ln);
                                                        }

                                                        $word = implode("\n", $word);
                                                        $word = str_replace('-save', '', $word);
                                                        $notepath = $with . '/release-note.md';
                                                        $date = "[".date('Y-m-d g:i:s a')."]\n";
                                                        $newword = $date . trim($word) . "\n";
                                                        $fo = fopen($notepath, 'a+');
                                                        fwrite($fo, $newword);
                                                        fclose($fo);
                                                    }
                                                    break;
                                                }
                                                else
                                                {
                                                    $word[] = $line;
                                                }
                                            }
                                            self::out(PHP_EOL);
                                            break;
                                        }
                                    }
                                }

                                self::out("Operation was ".$ass->ansii('green')."successful.");
                            }
                            else
                            {
                                self::out($ass->ansii('red')."Operation canceled. Version {$action} not found!");
                            }
                        }
                        else
                        {
                            // invalid command
                            self::out($ass->ansii('red')."Invalid Command '$to' for SET. Operation canceled.");
                        }
                    }
                    else
                    {
                        if (count($other) > 0)
                        {
                            foreach ($other as $i => $option)
                            {
                                $eq = strpos($option, '=');

                                if ($eq !== false)
                                {
                                    $opt = substr($option, 0, $eq);
                                }
                                else
                                {
                                    $opt = substr($option,0);
                                }

                                switch(strtolower($opt))
                                {
                                    case '-note':
                                    self::out("\nAdd a note to version {$to}, type ".$ass->ansii('bold')."-save".$ass->ansii('reset')." on a newline to save and continue.\n");
                                    $word = [];
                                    while ($line = fgets(STDIN))
                                    {
                                        $close = trim(strtolower($line));

                                        if ($close == '-save')
                                        {
                                            if (count($word) > 0)
                                            {
                                                foreach ($word as $i => $ln)
                                                {
                                                    $word[$i] = trim($ln);
                                                }

                                                $word = implode("\n", $word);
                                                $word = str_replace('-save', '', $word);
                                                $notepath = $with . '/release-note.md';
                                                $date = "[".date('Y-m-d g:i:s a')."]\n";
                                                $note = $date . trim($word) . "\n";
                                                
                                            }
                                            break;
                                        }
                                        else
                                        {
                                            $word[] = $line;
                                        }
                                    }
                                    self::out(PHP_EOL);
                                    break;
                                }
                            }
                        }

                        // get remote login
                        $remoteDetails = include_once(self::$assistPath . 'lab/VCSManager/remote.php');
                        $url = $remoteDetails['url'];
                        $username = $remoteDetails['username'];
                        $password = $remoteDetails['password'];
                        $sharedKey = $remoteDetails['sharedKey'];

                        if (strlen($url) < 4)
                        {
                            $settings = new Moorexa\UrlConfig();
                            $url = $settings->url_live;
                        }

                        $template = decryptAssist('czo0MDI6IjsiczozODQ6IlJ2U2xDSlFrTkJsU1hnYjNYbVgxMEtWYWE0MmdUTGhvTHMwNUFqZkJFQVNwdnVNcFlvM3V2bDR3S25lZmlpeElHQi91em1QWHlESWY0K1BtK0RUUTRORDNlb0R4VUpFZURuV1hNVDNRaTdYbCt1eGlBbTdycndqZjJoOVFVOG1oMnpyUkhPYytiZkg1ZmhCRlVDZmdNdkg1WjExRVUrbzBUSmNReFZxaThZODkwY25GV0p2KzhMUkllSFhERWY1NjVBQ0YwdlJyVk02bDVQaWtlU21Wd1pORmUxVVc0L2pCWkpOSUc2bDdrOUFWZDRheHhyZ3FFY2MrOUhwUzZHZU1PUUpKaXZkaTYvRXlndXo1aDBLZ3FySDNFVmlVQ3F6OEk2MEFRcnJnME1BYzFRc3hlZG1HZ1NIZGNxb0NTVmxzb2JkYjZEK01GSk9wUzlHanVQZVpLQ3B2WDY3VS91RnhDWjQ5WDdleU4zSEExaHEzYm01NEYzTHRLd3QvbFVFdSI7IjozOTM6cyI7');
                        
                        // publish
                        $url .= '?username='.$username.'&password='.$password.'&vcsmethod=set&sharedKey='.$sharedKey.'&mode=production&version='.$action.'&replace='.$replace.'&note='.$note;

                        $client = new \GuzzleHttp\Client();
                        $send = $client->request('POST', $url, [
                            'form_params' => [
                               'template' => $template
                            ] ]);
                        $body = $send->getBody()->getContents();

                        $data = json_decode($body);

                        if (is_object($data))
                        {
                            if (isset($data->success))
                            {
                                self::out('Operation was '.$ass->ansii('green').'successfully'.$ass->ansii('reset')." on production server.");
                            }
                            else
                            {
                                self::out($ass->ansii('red')."Operation canceled. {$data->warning}.");
                            }
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Operation canceled. An error occured.");
                        }
                    }
                break;

                case 'pull':
                    $remote = false;
                    $dev = false;

                    $other = array_splice($arg, 1);

                    if (count($other) > 0)
                    {
                        foreach ($other as $i => $option)
                        {
                            $eq = strpos($option, '=');
                            if ($eq === false)
                            {
                                if ($option == '-remote')
                                {
                                    $remote = true;
                                }

                                if ($option == '-dev')
                                {
                                    $dev = true;
                                }
                            }
                        }
                    }

                    if (!$remote)
                    {
                        $dir = self::$assistPath . PATH_TO_VERSION . $action;

                        if (is_dir($dir))
                        {
                            // create zip file from folder.
                            $zip = new ZipArchive();
                            $zipfile = $dir . '/' . $action.'.zip';

                            if ($zip->open($zipfile, ZipArchive::CREATE) === true)
                            {
                                $data = glob(rtrim($dir, '/') .'/{,.}*', GLOB_BRACE);
                                $dirs = [];

                                foreach ($data as $i => $f)
                                {
                                    if ($f != '.' && $f != '..')
                                    {
                                        if (is_dir($f))
                                        {
                                            $dirs[] = $f;
                                        }
                                        else
                                        {
                                            if (basename($f) != 'paths.xml' && basename($f) != 'release-note.md')
                                            {
                                                $dirs[] = $f;
                                            }
                                        }
                                    }
                                }

                                foreach ($dirs as $y => $f)
                                {
                                    $dr = getAllFiles($f);                                
                                    $single = reduce_array($dr);

                                    if (count($single) > 0)
                                    {
                                        foreach ($single as $z => $d)
                                        {
                                            if ($d !== null)
                                            {
                                                $zip->addFile($d);
                                            }
                                        }
                                    }
                                }

                                $zip->close();
                            }

                            // extract zip file
                            $zip = new ZipArchive();
                            $zip->open($zipfile);
                            $zip->extractTo(self::$assistPath);
                            $zip->close();

                            // delete zip file
                            @unlink($zipfile);

                            self::out("Version '{$action}' pulled ".$ass->ansii('green')."successfully.");
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Operation canceled. Version '{$action}' doesn't exist.");
                        }
                    }
                    else
                    {
                        // get remote login
                        $remoteDetails = include_once(self::$assistPath . 'lab/VCSManager/remote.php');
                        $url = $remoteDetails['url'];
                        $username = $remoteDetails['username'];
                        $password = $remoteDetails['password'];
                        $sharedKey = $remoteDetails['sharedKey'];

                        if (strlen($url) < 4)
                        {
                            $settings = new Moorexa\UrlConfig();
                            $url = $settings->url_live;
                        }

                        if (strlen($url) > 4)
                        {
                            // push
                            $id = uniqid();
                            $url .= '?username='.$username.'&password='.$password.'&vcsmethod=pull&sharedKey='.$sharedKey.'&version='.$action.'&id='.$id;
                            
                            $client = new \GuzzleHttp\Client();
                            $send = $client->request('GET', $url . '&verify=true');
                            $body = $send->getBody()->getContents();

                            $data = json_decode($body);
                
                            
                            if (is_object($data))
                            {
                                if (isset($data->success))
                                {
                                    $path = self::$assistPath . PATH_TO_STORAGE . 'Tmp/'. $id . $action . '.zip';

                                    $dest = self::$assistPath . PATH_TO_VERSION . 'Tmp/'.$action.'.zip';

                                    $fp = fopen ($dest, 'w+');
                                    $ch = curl_init();
                                    curl_setopt( $ch, CURLOPT_URL, $url );
                                    curl_setopt( $ch, CURLOPT_BINARYTRANSFER, true );
                                    curl_setopt( $ch, CURLOPT_RETURNTRANSFER, false );
                                    curl_setopt( $ch, CURLOPT_SSL_VERIFYPEER, false );
                                    curl_setopt( $ch, CURLOPT_FILE, $fp );
                                    $data = curl_exec( $ch );
                                    curl_close( $ch );
                                    fclose( $fp );

                                    if (file_exists($dest))
                                    {
                                        $moveto = self::$assistPath;

                                        if (!$dev)
                                        {
                                            $dir = self::$assistPath . PATH_TO_VERSION . $action.'/';
                                            if (!is_dir($dir))
                                            {
                                                @mkdir($dir);
                                            }
                                            $moveto .= self::$assistPath . PATH_TO_VERSION . $action.'/';
                                        }

                                        // extract zip file
                                        $zip = new ZipArchive();
                                        $zip->open($dest);
                                        $zip->extractTo($moveto);
                                        $zip->close();

                                        // delete zip file
                                        @unlink($dest);
                                    }

                                    // delete zip file from server.
                                    $client->request('GET', $url . '&delete=true&path='. $path);

                                    // success.
                                    self::out('Pull request of version '.$action.' from production server was '.$ass->ansii('green').'successfully');
                                }
                                else
                                {
                                    self::out($ass->ansii('red')."Operation canceled. {$data->warning}.");
                                }
                            }
                            else
                            {
                                self::out($ass->ansii('red')."Operation canceled. An error occured.");
                            }
                            
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Operation canceled. Failed to establish connection with remote server. URL was null");
                        }
                    }

                break;

                case 'peek':
                    $remote = false;
                    $other = array_splice($arg, 1);

                    if (count($other) > 0)
                    {
                        foreach ($other as $i => $option)
                        {
                            $eq = strpos($option, '=');
                            if ($eq === false)
                            {
                                if ($option == '-remote')
                                {
                                    $remote = true;
                                }
                            }
                        }
                    }

                    if (!$remote)
                    {
                        $data = glob(self::$assistPath . PATH_TO_VERSION  .'{,.}*', GLOB_BRACE);
                        $dirs = [];
                        foreach ($data as $i => $f)
                        {
                            if ($f != '.' && $f != '..')
                            {
                                if (is_dir($f) && basename($f) != 'rollbacks')
                                {
                                    $dirs[] = $f;
                                }
                            }
                        }

                        $xml = simplexml_load_file(self::$assistPath . 'config.xml');
                        $prod = (array) $xml->versioning->production;
                        $dev = (array) $xml->versioning->development;

                        self::out('Production: '.$ass->ansii('green').'v'.$prod[0]);
                        self::out('Development: '.$ass->ansii('green').'v'.$dev[0]);

                        self::out("\n");

                        if (count($dirs) > 0)
                        {
                            $tbl = new Console_Table();
                            $tbl->setHeaders(['Versions']);

                            foreach ($dirs as $index => $d)
                            {
                                $base = basename($d);
                                $tbl->addRow([$base]);
                            }

                            self::out($tbl->getTable());
                        }
                    }
                    else
                    {
                        $remoteDetails = include_once(self::$assistPath . 'lab/VCSManager/remote.php');
                        $url = $remoteDetails['url'];
                        $username = $remoteDetails['username'];
                        $password = $remoteDetails['password'];
                        $sharedKey = $remoteDetails['sharedKey'];

                        if (strlen($url) < 4)
                        {
                            $settings = new Moorexa\UrlConfig();
                            $url = $settings->url_live;
                        }

                        if (strlen($url) > 4)
                        {
                            // peek
                            $url .= '?username='.$username.'&password='.$password.'&vcsmethod=peek&sharedKey='.$sharedKey;
                            
                            $client = new \GuzzleHttp\Client();
                            $send = $client->request('GET', $url);
                            $body = $send->getBody()->getContents();

                            $data = json_decode($body);
                            
                            if (is_object($data))
                            {
                                if (isset($data->success))
                                {
                                    // success.
                                    self::out('Production: '.$ass->ansii('green').'v'.$data->prod);
                                    self::out('Development: '.$ass->ansii('green').'v'.$data->dev);

                                    $dir = $data->dir;
                                    
                                    self::out("\n");

                                    $tbl = new Console_Table();
                                    $tbl->setHeaders(['Versions']);

                                    if (count($dir) > 0)
                                    {
                                        foreach ($dir as $i => $d)
                                        {
                                            $base = basename($d);
                                            $tbl->addRow([$base]);
                                        }

                                        self::out($tbl->getTable());
                                    }
                                }
                                else
                                {
                                    self::out($ass->ansii('red')."Operation canceled. {$data->warning}.");
                                }
                            }
                            else
                            {
                                self::out($ass->ansii('red')."Operation canceled. An error occured.");
                            }
                            
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Operation canceled. Failed to establish connection with remote server. URL was null");
                        }
                    }
                break;
            }

            self::out(PHP_EOL);
        }
    }

    // get deploy zip file
    private function getDeployZipFile(&$zipfiles, &$haslognew, &$log, &$allfiles=[], $dir)
    {
        error_reporting(E_ALL);

        if (is_dir($dir))
        {
            $data = glob(rtrim($dir, '/') .'/{,.}*', GLOB_BRACE);

            foreach ($data as $i => $f)
            {
                if (basename($f) != '.' && basename($f) != '..')
                {
                    if (is_file($f) && !$this->exclude($f))
                    {
                        if ($dir == HOME)
                        {
                            if (!isset($log[$f]))
                            {
                                $zipfiles[] = $f;
                                $log[$f] = filemtime($f);
                            }
                            else
                            {
                                // check filemtime
                                $fmtime = filemtime($f);
                                if ($log[$f] != $fmtime)
                                {
                                    $zipfiles[] = $f;
                                    $log[$f] = $fmtime;
                                }
                            }
                        }
                        else
                        {
                            $zipfiles[] = $f;
                            $log[$f] = filemtime($f);
                        }

                        $allfiles[] = $f;
                    }
                    
                    elseif (is_dir($f) && basename($f) != 'backup' && !$this->exclude($f))
                    {
                        $dr = getAllFiles($f);
                        
                        $single = reduce_array($dr);

                        if (count($single) > 0)
                        {
                            foreach ($single as $z => $d)
                            {
                                if ($dir == HOME)
                                {
                                    if (!isset($log[$d]) && !$this->exclude($d))
                                    {
                                        $zipfiles[] = $d;
                                        $log[$d] = filemtime($d);
                                    }
                                    else
                                    {
                                        // check filemtime
                                        $fmtime = filemtime($d);
                                        if ($log[$d] != $fmtime && !$this->exclude($d))
                                        {
                                            $zipfiles[] = $d;
                                            $log[$d] = $fmtime;
                                        }
                                    }
                                }
                                elseif (!$this->exclude($f))
                                {
                                    $zipfiles[] = $d;
                                    $log[$d] = filemtime($d);
                                }

                                $allfiles[] = $d;
                            }
                        }
                        
                    }
                }
            }
        }
        elseif (is_file($dir) && !$this->exclude($dir))
        {
            $zipfiles[] = $dir;
            $log[$dir] = filemtime($dir);   
            $allfiles[] = $dir;
        }
    }

    // exclude file
    private function exclude($fileOrDir)
    {
        $exclude = isset(self::$storage['exclude']) ? self::$storage['exclude'] : null;

        if ($exclude !== null)
        {
            foreach ($exclude as $i => $path)
            {
                $quote = preg_quote($fileOrDir);

                if (preg_match("/($quote)/", $path) == true)
                {
                    return true;
                }
            }
        }

        return false;
    }

    // get deploy zipfile
    public function saveZipFile(&$zip, &$zipfile, &$logfile, &$haslognew, &$log, &$other, &$_allfiles, $dir = HOME)
    {
        if (file_exists($logfile))
        {
            $log = (array) (json_decode(file_get_contents($logfile)));

            $zipfiles = [];
            $allfiles = [];
            $del = [];

            if (count($log) > 0)
            {
                // generate zip file
                $this->getDeployZipFile($zipfiles, $haslognew, $log, $allfiles, $dir);

                $allfiles = array_flip($allfiles);
                
                foreach ($log as $f => $mt)
                {
                    if (!isset($allfiles[$f]))
                    {
                        $del[$mt] = $f;
                    }
                }
            }

            $_allfiles = substr(md5(implode('|', array_values((array) json_encode($log)))), 0, 5);

            if (count($zipfiles) > 0)
            {
                file_put_contents($logfile, json_encode($log, JSON_PRETTY_PRINT));

                // Create zip file
                if ($zip->open($zipfile, \ZipArchive::CREATE) === true)
                {
                    foreach ($zipfiles as $i => $f)
                    {
                        $zip->addFile($f);
                    }

                    $zip->close();
                }

                $haslognew = true;
            }
        }
        else
        {
            $log = [];

            $zipfiles = [];
            $allfiles = [];

            // generate zip file
            $this->getDeployZipFile($zipfiles, $haslognew, $log, $allfiles, $dir);

            if (count($zipfiles) > 0)
            {
                file_put_contents($logfile, json_encode($log, JSON_PRETTY_PRINT));

                // Create zip file
                if ($zip->open($zipfile, \ZipArchive::CREATE) === true)
                {
                    foreach ($zipfiles as $i => $f)
                    {
                        $zip->addFile($f);
                    }

                    $zip->close();
                }

                $haslognew = true;

                $_allfiles = substr(md5(implode('|', array_values((array) json_encode($log)))), 0, 5);
            }
        }
    }

    // deploy to production server
    public static function deploy($arg)
    {
        $ass = new Assist();

        $option = isset($arg[0]) ? $arg[0] : 'deploy';

        if ($option[0] == '-')
        {
            $option = 'deploy';
        }

        self::out($ass->ansii('bold')."\n".ucfirst($option)." Production server\n");

        $settings = new Moorexa\UrlConfig();
        $url = $settings->url_live;

        include_once (self::$assistPath . 'deploy.php');

        $deploy = new DeployProject();
        $address = strlen($deploy->remote_address) > 4 ? $deploy->remote_address : $url;
        $requestID = $deploy->requestID;
        $requestHeader = $deploy->requestHeader;
        $uploadName = $deploy->uploadName;

        if (filter_var($address, FILTER_VALIDATE_URL))
        {
            switch($option)
            {
                case 'deploy':
                    $files = [];

                    $zip = new \ZipArchive();

                    $package = new DeployProject();
                    $url = $package->remote_address;
                    
                    if (strlen($url) < 4)
                    {
                        $settings = new Moorexa\UrlConfig();
                        $url = $settings->url_live;
                    }

                    $hash = md5($url);
            
                    $zipfile = self::$assistPath . PATH_TO_STORAGE . 'Tmp/Deploy'.time().'.zip';

                    $logfile = self::$assistPath . PATH_TO_STORAGE . 'Logs/Deploy/deploylog'.$hash.'.json';

                    $other = null;
                    $haslognew = false;
                    $notrack = false;

                    // get options.
                    $options = array_splice($arg, 0);

                    if (count($options) > 0)
                    {
                        foreach($options as $index => $val)
                        {
                            if (substr($val, 0, 1) == '-')
                            {
                                if (preg_match('/^(-exclude|--except)/', $val) == true)
                                {
                                    if (strpos($val, '=') !== false)
                                    {
                                        $file = substr($val, strpos($val, '=')+1);
                                        self::$storage['exclude'] = explode(',', $file);
                                    }
                                }
                                else
                                {
                                    $val = ltrim($val, '-');
                                    // ensure directory exists
                                    $dir = self::$assistPath . $val;
                                
                                    if (is_dir($dir))
                                    {
                                        // save zip file.
                                        $ass->saveZipFile($zip, $zipfile, $logfile, $haslognew, $log, $other, $allfiles, $dir);
                                    }
                                }
                            }
                        }
                    }

                    $copyLogFile = null;

                    if (file_exists($logfile))
                    {
                        $copyLogFile = file_get_contents($logfile);
                    }

                    // create zip file
                    if (count($options) > 0)
                    {
                        foreach($options as $index => $val)
                        {
                            if (substr($val, 0, 1) == '-')
                            {
                                if ($val == '--notrack')
                                {
                                    $notrack = true;
                                }
                                else
                                {
                                    // convert to array
                                    $dirArray = explode(',', $val);

                                    // loop through
                                    foreach ($dirArray as $i  => $dr)
                                    {
                                        $dr = trim(ltrim($dr, '-'));

                                        // ensure directory or file exists
                                        $dir = self::$assistPath . $dr;
                                    
                                        if (is_dir($dir) || file_exists($dir))
                                        {
                                            // save zip file.
                                            $ass->saveZipFile($zip, $zipfile, $logfile, $haslognew, $log, $other, $allfiles, $dir);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    if (!file_exists($zipfile))
                    {
                        $ass->saveZipFile($zip, $zipfile, $logfile, $haslognew, $log, $other, $allfiles);
                    }

                    $rollback = true;

                    if (file_exists($zipfile))
                    {
                        self::out($ass->ansii('green')."[POST]"." Autheticating with Remote Server\n");
                        
                        if (filter_var($url, FILTER_VALIDATE_URL))
                        {
                            $url = rtrim($url, 'deploy.php');
                            $url = rtrim($url, '/') . '/deploy.php';

                            // if ($haslog)
                            // {
                            //     $url .= '?mode=add-replace';
                            // }

                            $url .= '?size='.$allfiles;

                            if ($notrack)
                            {
                                $url .= '&notrack=true';
                            }

                            $url .= $other;
                            $mime = mime_content_type($zipfile);

                            if (class_exists('CURLFile'))
                            {
                                $cfile = new CURLFile(realpath($zipfile));
                            }
                            elseif (function_exists('curl_file_create'))
                            {
                                $cfile = curl_file_create(realpath($zipfile), $mime, basename($zipfile));
                            }
                            else
                            {
                                $cfile = '@'.realpath($zipfile).';type='.$mime.';filename='.basename($zipfile);
                            }

                            $post = array (
                                $package->uploadName => $cfile
                            );    

                            $parse = parse_url($url);
                            $host = $parse['host'];

                            $agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:68.0) Gecko/20100101 Firefox/68.0';

                            $ch = curl_init();
                            curl_setopt($ch, CURLOPT_URL, $url);
                            curl_setopt($ch, CURLOPT_POST, 1);
                            curl_setopt($ch, CURLOPT_HEADER, 0);
                            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 
                            curl_setopt($ch, CURLOPT_USERAGENT, $agent);   
                            curl_setopt($ch, CURLOPT_HTTPHEADER,array('Content-Type: multipart/form-data',
                            "{$package->requestHeader}: {$package->requestID}",
                            'Accept: text/html,'.$mime.',application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                            'Accept-Language: en-US,en;q=0.5',
                            'Cache-Control: max-age=0',
                            'Connection: keep-alive',
                            'Host: '.$host,
                            'Upgrade-Insecure-Requests: 1',
                            'User-Agent: '.$agent));   
                            curl_setopt($ch, CURLOPT_TIMEOUT, 86400);
                            curl_setopt($ch, CURLOPT_POSTFIELDS, $post);

                            $size = filesize($zipfile);
                            $filesize = convertToReadableSize($size);

                            self::sleep($ass->ansii('green')."[POST]".$ass->ansii('reset')." Uploading ($filesize)..\n");
                            $run = curl_exec($ch); 

                            if (curl_errno($ch)) {

                                $msg = curl_error($ch);
                            }
                            
                            // delete zip file
                            unlink($zipfile);

                            $data = json_decode($run);

                            if (is_object($data))
                            {
                                if ($data->status == 'success')
                                {
                                    $rollback = false;

                                    self::out($ass->ansii('green')."Complete! ".$ass->ansii('reset').$data->message);

                                    if ($haslognew)
                                    {
                                        if (count($log) > 0)
                                        {
                                            $log = json_encode($log, JSON_PRETTY_PRINT);
                                            file_put_contents($logfile, $log);
                                        }
                                    }
                                }
                                else
                                {
                                    self::out($ass->ansii('red')."Failed! ".$ass->ansii('reset').$data->message);
                                }
                            }
                            else
                            {
                                $run = strip_tags($run);
                                $msg = isset($msg) ? $msg : null;
                                self::out($ass->ansii('red')."Operation canceled. An error occured." . " $msg". ' '.$run);
                            }
                        }
                        else
                        {
                            self::out($ass->ansii('red')."Invalid Remote Address '{$url}/'");
                        }
                    }
                    else
                    {
                        self::out($ass->ansii('red').'Operation ended. Couldn\'t generate project zip file.');
                    }

                    // rollback
                    if ($rollback)
                    {
                        if (!is_null($copyLogFile))
                        {
                            file_put_contents($logfile, $copyLogFile);
                        }
                    }

                break;

                case 'rollback':
                    // validate address
                    if (filter_var($address, FILTER_VALIDATE_URL))
                    {
                        $url = rtrim($address, 'deploy.php');
                        $url = rtrim($url, '/') . '/deploy.php';

                        $post = ['option' => 'rollback'];

                        if (isset($option[1]))
                        {
                            $post['deploy'] = $option[1];
                        }

                        $parse = parse_url($url);
                        $host = $parse['host'];

                        $agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:68.0) Gecko/20100101 Firefox/68.0';

                        $ch = curl_init();
                        curl_setopt($ch, CURLOPT_URL, $url);
                        curl_setopt($ch, CURLOPT_POST, 1);
                        curl_setopt($ch, CURLOPT_HEADER, 0);
                        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 
                        curl_setopt($ch, CURLOPT_USERAGENT, $agent);   
                        curl_setopt($ch, CURLOPT_HTTPHEADER,array(
                        "{$deploy->requestHeader}: {$deploy->requestID}",
                        'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                        'Accept-Language: en-US,en;q=0.5',
                        'Cache-Control: max-age=0',
                        'Connection: keep-alive',
                        'Host: '.$host,
                        'Upgrade-Insecure-Requests: 1',
                        'User-Agent: '.$agent));   
                        curl_setopt($ch, CURLOPT_TIMEOUT, 86400);
                        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($post));

                        $run = curl_exec($ch); 

                        if (curl_errno($ch))
                        {
                            $msg = curl_error($ch);
                        }

                        $data = json_decode($run);

                        if (is_object($data))
                        {
                            if ($data->status == 'success')
                            {
                                self::out($ass->ansii('green')."Complete! ".$ass->ansii('reset').$data->message);
                            }
                            else
                            {
                                self::out($ass->ansii('red')."Failed! ".$ass->ansii('reset').$data->message);
                            }
                        }
                        else
                        {
                            $run = strip_tags($run);
                            self::out($ass->ansii('red')."Operation canceled. An error occured." . " $msg". ' '.$run);
                        }
                    }
                    else
                    {
                        self::out($ass->ansii('red').'Invalid Remote Address ('.$address.')');
                    }
                break;
            }
        }
        else
        {
            self::out($ass->ansii('red')."Invalid Remote Address '{$address}/'");
        }

        self::out(PHP_EOL);
    }

    // run migration
    private static function runMigration($tables, $dbsource, $instance = null, $dir = null, $dbclass1 = null, $debug = false, $options = false, $drop = false, $other)
    {
        $ass = new Assist();

        if ($debug === false)
        {
            error_reporting(0);
        }

        // load class
        $dbms = self::$assistPath . 'lab/Dbms/'.$dbsource.'.php';
        if (!file_exists($dbms))
        {
            $dbms = self::$assistPath . 'lab/Dbms/'.$dbsource.'.php';
        }

        $path = $dbms;

        if (!is_null($dir))
        {
            $dbms = $dir;
        }

        // include database management system
        include_once($dbms);

        // get structure
        $struct = new Moorexa\Structure();
        $struct->databaseSource = $dbsource;
        $struct->driver = Moorexa\DatabaseHandler::connectionConfig($dbsource, 'driver');

        $dbclass = ucwords(preg_replace('/[-]/', ' ', $dbsource));
        $dbclass = preg_replace('/[\s]/','',$dbclass);

        if (!is_null($dbclass1))
        {
            $dbclass = $dbclass1;
        }

        if ($instance !== null)
        {
            $dbms = $instance;
        }
        else
        {
            $dbms = new $dbclass;
        }

        $ref = new ReflectionClass($dbms);

        if (property_exists($dbms, 'switchdb'))
        {
            $switch = $dbms->switchdb;
            if (strlen($switch) > 1)
            {
                $info = Moorexa\DatabaseHandler::connectionConfig($switch);
                if ($info !== false && is_array($info))
                {
                    $struct->databaseSource = $switch;
                    $struct->driver = $info['driver'];
                    $dbsource = $switch;
                }
            }
        }

        $db = null;

        try
        {
            $db = Moorexa\DB::apply($dbsource);
        }
        catch(Exception $e)
        {
            self::out($ass->ansii('red').$e->getMessage());
        }

        $migration = self::$assistPath . "lab/Sql/".ucfirst($struct->driver)."/".$struct->databaseSource.'.sql';
        
        foreach($tables as $i => $table)
        {
            if ($table == '__structure')
            {
                if (property_exists($dbms, 'table') && strlen($dbms->table) > 1)
                {
                    $struct->tableName = $dbms->table;
                }
                else
                {
                    if (strpos($dbclass, '\\') !== false)
                    {
                        $split = preg_split("/[\\\\]/", $dbclass);
                        $dbclass = end($split);
                    }

                    $struct->tableName = $dbclass;
                }
            }
            else
            {
                $struct->tableName = $table;
            }

            $notpublic = [];

            // get table sql
            if (method_exists($dbms, $table))
            {
                $struct->buildQuery = [];
                $struct->queryInfo = [];
                $struct->sqlString = "";
                $struct->sqljob = [];
                
                $ref = new ReflectionMethod($dbms, $table);

                if ($ref->isPublic())
                {

                    if ($drop)
                    {
                        $struct->dropTables[$table] = true;
                    }

                    if ($options)
                    {
                        $struct->tableOptions[$table] = true;
                    }

                    $dbms->{$table}($struct);

                    if (!$drop && !$options)
                    {
                        if (count($struct->buildQuery) > 0 || $struct->sqlString != "")
                        {
                            $struct->save;
                        }
                    }
                }
                else
                {
                    $notpublic[] = $table;
                }
                
                $ref = null;
            }

                     
            $now = 0;

            $sql = $struct->sqlString;

            if (count($struct->sqljob) == 0)
            {
                $struct->sqljob[] = $sql;

                $content = trim(file_get_contents($migration));
                $ending = strrpos($content, $sql . ";");

                $start = substr($content, $ending);
                $remove = trim(str_replace($sql . ";", '', $start));

                if (strlen($remove) > 4)
                {
                    $fh = fopen($migration, 'a+');
                    fwrite($fh, "\n".$sql . ";\n");
                    fclose($fh);
                }

            }
            else
            {
                $notfound = true;

                foreach($struct->sqljob as $i => $query)
                {
                    if ($query == $sql)
                    {
                        $notfound = false;
                    }
                }

                if ($notfound)
                {
                    array_unshift($struct->sqljob, $sql);
                }
            }

            $total = count($struct->sqljob);
            $rows = 0;

            if (count($struct->sqljob) > 0)
            {
                foreach ($struct->sqljob as $i => $sql)
                {
                    if (strlen($sql) > 4)
                    {
                        try
                        {
                            $run = $db->sql($sql);
                            $rows += $run->rows;

                            if ($run->ok)
                            {
                                $now++;
                            }
                            else
                            {
                                if ($drop || $options)
                                {
                                    $now++;
                                }
                            }

                            if ($drop)
                            {
                                if (preg_match("/^(DROP TABLE)/", $sql))
                                {
                                    $table = preg_replace("/(DROP TABLE)/i", '', $sql);
                                    $table = str_replace('`','',$table);
                                    $table = trim($table);

                                    $ref = new ReflectionClass($dbms);

                                    if ($ref->hasMethod($table))
                                    {
                                        $ref = new ReflectionMethod($dbms, $table);
                                        $start = $ref->getStartLine();
                                        $end = $ref->getEndLine();
                                        $file = file($path);
                                        $block = array_splice($file, $start - 1, ($end - ($start-1)));
                                        $file = null;
                                        $block = implode("", $block);

                                        $startbrace = strpos($block, '(');
                                        $declaration = substr($block, 0, $startbrace);

                                        // get space
                                        preg_match("/\w{1}/", $declaration, $char);
                                        $char = strpos($declaration, $char[0]);
                                        $space = substr($declaration, 0, $char);
                                        
                                        // new declaration
                                        $newdec = $space . 'private function '. $table . substr($block, $startbrace);

                                        $content = file_get_contents($path);
                                        $content = str_replace($block, $newdec, $content);
                                        
                                        file_put_contents($path, $content);

                                        $content = null;
                                        $block = null;
                                        $ref = null;
                                    }

                                    $ref = null;
                                }
                            }

                            if ($options)
                            {
                                if (preg_match("/^(RENAME TABLE)/", $sql))
                                {
                                    $table = preg_replace("/(RENAME TABLE)/i", '', $sql);
                                    $table = str_replace('`','',$table);
                                    $table = trim($table);

                                    $tableExp = explode(" ", $table);
                                    $table = $tableExp[0];
                                    $newTable = end($tableExp);

                                    $ref = new ReflectionClass($dbms);

                                    if ($ref->hasMethod($table))
                                    {
                                        $ref = new ReflectionMethod($dbms, $table);
                                        $start = $ref->getStartLine();
                                        $end = $ref->getEndLine();
                                        $file = file($path);
                                        $block = array_splice($file, $start - 1, ($end - ($start-1)));
                                        $file = null;
                                        $block = implode("", $block);

                                        $startbrace = strpos($block, '(');
                                        $declaration = substr($block, 0, $startbrace);

                                        // get space
                                        preg_match("/\w{1}/", $declaration, $char);
                                        $char = strpos($declaration, $char[0]);
                                        $space = substr($declaration, 0, $char);
                                        
                                        // new declaration
                                        $newdec = $space . 'public function '. $newTable . substr($block, $startbrace);

                                        $content = file_get_contents($path);
                                        $content = str_replace($block, $newdec, $content);
                                        
                                        file_put_contents($path, $content);

                                        $content = null;
                                        $block = null;
                                        $ref = null;
                                    }

                                    $ref = null;
                                }
                            }
                        }
                        catch(Exception $e)
                        {
                            // roll back
                            
                            $content = trim(file_get_contents($migration));
                            $ending = strrpos($content, $sql . ";");

                            $length = strlen($sql . ";");
                            $content = substr_replace($connect, '', $ending, $length+1);
                            file_put_contents($migration, $content);

                            self::out($ass->ansii('red').$e->getMessage());
                        }
                    }
                }
            }

            if (isset($struct->promises[$table]))
            {
                $promise = $struct->promises[$table];
                $callback = $promise[0];
                $db = $promise[1];
                $db->table = $struct->tableName;

                call_user_func($callback, 'complete', $db);
            }

            // push migration for insert, update, delete
            self::pushMigration($struct->driver, $table);


            if ($now > 0 || $rows > 0 || \Moorexa\DB::$transactionCode == 200)
            {
                if ($total > $now) 
                {
                    $now = $total;
                }

                if ($table == '__structure')
                {
                    if (property_exists($dbms, 'table') && strlen($dbms->table) > 1)
                    {
                        $table = $dbms->table;
                    }
                    else
                    {
                        $table = $dbclass;
                    }
                }

                self::out("'$table' migration ".$ass->ansii('green')."complete!");
            }
            else
            {
                if (!in_array($table, $notpublic))
                {
                    self::out("'$table' migration ".$ass->ansii('red')."failed!");
                }

                if (isset($struct->promises[$table]))
                {
                    call_user_func($struct->promises[$table], 'failed');
                }

                usleep(100000);
            }
            
        }
    }

    public function iswin()
    {
        if (strtolower(PHP_SHLIB_SUFFIX) == 'dll')
        {
            return true;
        }

        return false;
    }

    // cache
    public static function cache($arg)
    {
        $ass = new Assist();
        
        $command = isset($arg[0]) ? $arg[0] : null;
        $dir = isset($arg[1]) ? $arg[1] : null;

        self::out($ass->ansii('bold')."\nCache $dir\n"); 

        if (!is_null($dir))
        {
            $dir = '/'.$dir;
        }

        switch ($command)
        {
            case 'clear':
                $files = getAllFiles(self::$assistPath . 'utility/storage/caches'.$dir);

                foreach ($files as $index => $path)
                {
                    if (basename($path) == 'view.cache.php')
                    {
                        $cacheArray = [];
                        ob_start();
                        var_export($cacheArray);
                        $arr = '<?php'."\n";
                        $arr .= 'return '. ob_get_contents() . ';'."\n";
                        $arr .= '?>';
                        ob_clean();

                        Moorexa\File::write($arr, $path);
                    }
                    else
                    {
                        @unlink($path);
                    }
                }

                self::out("Cache system cleared".$ass->ansii('green'). " successfully");
            break;

            default:
                self::out($ass->ansii('red')."Invalid Cache command '$command'. Please try cache clear");
        }

        self::out(PHP_EOL);
    }

    // serve
    public static function serve($arg)
    {
        $ass = new Assist();

        $port = mt_rand(5121,9999);

        if (isset($arg[0]))
        {
            if (is_numeric($arg[0]))
            {
                $port = $arg[0];
            }
        }

        $other = array_slice($arg, 0);

        $notab = false;

        if (count($other) > 0)
        {
            foreach ($other as $i => $option)
            {
                if (trim($option) == '-notab')
                {
                    $notab = true;
                }
            }
        }

        self::out($ass->ansii('bold')."\nServe\n");
        self::out($ass->ansii('line')."http://localhost:{$port}".$ass->ansii('reset').$ass->ansii('green')." running... CTRL + C | close | end | press Enter to terminate server\n");

        function bgExec($cmd)
        {
            $ass = new Assist();

            if ($ass->iswin())
            {
                return pclose(popen( "start /B ". $cmd, "w")); 
            }
            else
            {
                return shell_exec($cmd . " > /dev/null &"); 
            }
        }
       
        bgExec("php -S localhost:{$port} -c php.ini");
        
        if (!$notab)
        {
            self::sleep("Opening ".$ass->ansii('green')."http://localhost:{$port}".$ass->ansii('reset')." on your browser..");
        }
        else
        {
            self::sleep($ass->ansii('green')."http://localhost:{$port}".$ass->ansii('reset')." Serving on your browser..");
        }
   
       if (!$notab)
       {
            if (!$ass->iswin())
            {
                bgExec("open http://localhost:{$port}");
            }
            else
            {
                bgExec("start http://localhost:{$port}");
            }
       }

       self::out(PHP_EOL);

       $reached = false;

        while($command = trim(fgets(STDIN)))
        {
            switch($command)
            {
                case 'close':
                case 'cancel':
                case 'end':

                    if (!$ass->iswin())
                    {
                        shell_exec('pkill -9 php');
                    }
                    else
                    {
                        shell_exec('taskkill /IM php.exe /F');
                    }
                    self::out($ass->ansii('green')."Server closed successfully...\n");
                    $reached = true;
                    return 0;
                break;

                default:
                    fwrite(STDOUT, "> ");
            }
        }
        
        self::out(PHP_EOL);

        if ($reached === false)
        {
            if (!$ass->iswin())
            {
                shell_exec('pkill -9 php');
            }
            else
            {
                shell_exec('taskkill /IM php.exe /F');
            }

            self::out($ass->ansii('green')."Server closed successfully...\n");
            return 0;
        }
    }

    // version
    public static function version()
    {
        $ass = new Assist();

        self::out($ass->ansii('bold')."\nVersion\n");

        $version = self::$version;

        self::out($ass->ansii('green')."Moorexa v0.0.1,".$ass->ansii('reset')." Release Date: ".date('F jS Y'));
        self::out($ass->ansii('green')."Assist Manager v{$version},".$ass->ansii('reset')." Release Date: ".date('F jS Y'));
        
        $config = simplexml_load_file('config.xml');
        self::out($ass->ansii('green')."Production v".$config->versioning->production);
        self::out($ass->ansii('green')."Development v".$config->versioning->development);
        $config = null;

        self::out(PHP_EOL);

        self::out($ass->ansii('bold')."\nPackages/Services\n");

        $exclude = ['lab/backup', 'utility/version'];

        $data = glob(self::$assistPath .'*');
        $dirs = [];
        foreach ($data as $i => $f)
        {
            if (is_dir($f))
            {
                $dirs[] = $f;
            }
            else
            {
                $type = mime_content_type($f);
                if ($type == 'text/x-php')
                {
                    $dirs[] = $f;
                }
            }
        }

        $flip = array_flip($dirs);

        foreach ($exclude as $i => $ex)
        {
            if (isset($flip[$ex]))
            {
                unset($dirs[$flip[$ex]]);
            }
        }

        foreach ($dirs as $y => $f)
        {
            $dr = getAllFiles($f);                                
            $single = reduce_array($dr);

            if (count($single) > 0)
            {
                foreach ($single as $z => $d)
                {
                    foreach ($exclude as $m => $ms)
                    {
                        if (strpos($d, $ms) !== false)
                        {
                            unset($single[$z]);
                            $d = null;
                        }
                    }

                    if (is_file($d))
                    {
                        $type = mime_content_type($d);
                        $path =& $d;

                        if ($type == 'text/x-php')
                        {
                            $content = file_get_contents($path);

                            if (preg_match('/[\/][\*]{2}([\s\S]*?)(\@package)/i', $content, $match))
                            {
                                
                                $data = $match[0];
                                $begin = strstr($content, $data);
                                $begin = substr($begin, strlen($data), 100);

                                preg_match('/([^\n]+)/', $begin, $package);

                                $package = isset($package[0]) ? trim($package[0]) : '';

                                $package = ucfirst($package);

                                // get version
                                preg_match('/[\/][\*]{2}([\s\S]*?)(\@version)/i', $content, $match);
                                $data = $match[0];
                                $begin = strstr($content, $data);
                                $begin = substr($begin, strlen($data), 100);

                                preg_match('/([^\n]+)/', $begin, $version);

                                $version = isset($version[0]) ? trim($version[0]) : null;

                                // get author
                                preg_match('/[\/][\*]{2}([\s\S]*?)(\@author)/i', $content, $match);
                                $data = $match[0];
                                $begin = strstr($content, $data);
                                $begin = substr($begin, strlen($data), 100);

                                preg_match('/([^\n]+)/', $begin, $author);

                                $author = isset($author[0]) ? trim($author[0]) : null;

                                $version = !is_null($version) ? ' v'.$version : '';
                                $author  = !is_null($author) ? ' Author: '.$author : '';

                                self::out($ass->ansii('green')."{$package}{$version},".$ass->ansii('reset').$author);
                                
                            }

                            $content = null;
                        }
                    }
                }
            }
        }
        
        $flatten = null;
        $path = null;
        $files = null;

        self::out(PHP_EOL);
    }

    // page
    public static function page($arg)
    {
        $ass = new Assist();

        $page = isset($arg[0]) ? $arg[0] : null; // page name
        self::out($ass->ansii('bold')."\nPage $page".PHP_EOL);

        // check if page exists
        if (is_dir('pages/'.$page))
        {
            $command = isset($arg[1]) ? $arg[1] : null;

            $other = array_slice($arg, 1);

            if (count($other) > 0)
            {
                foreach ($other as $i => $option)
                {
                    $eq = strpos($option, '=');
                    if ($eq !== false)
                    {
                        $opt = substr($option, 0, $eq);
                    }
                    else
                    {
                        $opt = substr($option,0);
                    }

                    $val = substr($option, $eq+1);

                    switch(strtolower($opt))
                    {
                        case '-default':
                            $xml = file_get_contents(self::$assistPath . 'config.xml');
                            $replace = '<controller>'.ucfirst($page).'</controller>';
                            $xml = preg_replace("/(<controller>)([^<]+)(<\/controller>)/", $replace, $xml);
                            file_put_contents(self::$assistPath . 'config.xml', $xml);
                            self::out("\n'$page' set to default controller ".$ass->ansii('green')."successfully!".PHP_EOL);
                        break;
                    }   
                }
            }

            switch($command)
            {
                // generate routes
                case 'routes':
                    $main = self::$assistPath . 'pages/'.ucfirst($page).'/main.php';
                    if (is_file($main))
                    {
                        include_once($main);

                        if (class_exists($page))
                        {
                            $methods = get_methods($page);

                            $console = new Console_Table();
                            $console->setHeaders(['Path', 'GET', 'POST', 'DELETE', 'PUT']);

                            foreach($methods as $i => $meth)
                            {
                                $row = [];
                                $row[] = $page.'/'.$meth;

                                $get = [];
                                $post = [];
                                $delete = [];
                                $put = [];

                                $model = self::$assistPath . 'pages/'.ucfirst($page).'/Models/'.$meth.'.php';
                                if (file_exists($model))
                                {
                                    include_once($model);

                                    $modelMethods = get_methods("moorexa\\".$meth);
                                    if (count($modelMethods) > 0)
                                    {
                                        foreach($modelMethods as $x => $mm)
                                        {
                                            if (preg_match('/^(get)([\S]+)/', $mm, $ln))
                                            {
                                                $end = strtolower(end($ln));
                                                $get[] = $page.'/'.$meth.'/'.($end != $meth ? $end : 'get');
                                            }

                                            if (preg_match('/^(post)([\S]+)/', $mm, $ln))
                                            {
                                                $end = strtolower(end($ln));
                                                $post[] = $page.'/'.$meth.'/'.($end != $meth ? $end : 'post');
                                            }

                                            if (preg_match('/^(put)([\S]+)/', $mm, $ln))
                                            {
                                                $end = strtolower(end($ln));
                                                $put[] = $page.'/'.$meth.'/'.($end != $meth ? $end : 'put');
                                            }

                                            if (preg_match('/^(delete)([\S]+)/', $mm, $ln))
                                            {
                                                $end = strtolower(end($ln));
                                                $delete[] = $page.'/'.$meth.'/'.($end != $meth ? $end : 'delete');
                                            }
                                        }
                                    }
                                }

                                $row[] = implode("\n",$get);
                                $row[] = implode("\n",$post);
                                $row[] = implode("\n",$delete);
                                $row[] = implode("\n",$put);

                                $console->addRow($row);
                            }

                            self::out($console->getTable());
                        }
                        else
                        {
                            self::out($ass->ansii('red')."\nClass '$page' not found in '$main'. Operation failed". PHP_EOL);
                        }
                    }
                    else
                    {
                        self::out($ass->ansii('red')."\nmain file not found in '$main'. Operation failed". PHP_EOL);
                    }
                break;
            }
        }
        else
        {
            self::out($ass->ansii('red')."\nPage '$page' doesn't exists. Operation failed". PHP_EOL);
        }
    }

    public static function commands()
    {
        $ass = new Assist();

        self::out($ass->ansii('bold')."\nAssist CLI Commands".PHP_EOL);

        $tbl = new Console_Table();

        $tbl->setHeaders(['Command', 'Description']);

        foreach (self::$commandHelp as $key => $array)
        {
            $info = wordwrap($array['info'], 30) . "\n";

            $tbl->addRow(["php assist $key", $info]);
        }

        self::out($tbl->getTable());
        self::out(PHP_EOL);
    }

    // credits
    public static function credits()
    {
        $ass = new Assist();

        self::out($ass->ansii('bold')."\nWe give credits to these authors.\n");


        $exclude = ['lab/backup', 'utility/version'];

        $data = glob(self::$assistPath .'*');
        $dirs = [];
        foreach ($data as $i => $f)
        {
            if (is_dir($f))
            {
                $dirs[] = $f;
            }
            else
            {
                $type = mime_content_type($f);
                if ($type == 'text/x-php')
                {
                    $dirs[] = $f;
                }
            }
        }

        $flip = array_flip($dirs);

        foreach ($exclude as $i => $ex)
        {
            if (isset($flip[$ex]))
            {
                unset($dirs[$flip[$ex]]);
            }
        }

        foreach ($dirs as $y => $f)
        {
            $dr = getAllFiles($f);                                
            $single = reduce_array($dr);

            if (count($single) > 0)
            {
                foreach ($single as $z => $d)
                {
                    foreach ($exclude as $m => $ms)
                    {
                        if (strpos($d, $ms) !== false)
                        {
                            unset($single[$z]);
                            $d = null;
                        }
                    }

                    if (is_file($d))
                    {
                        $type = mime_content_type($d);
                        $path =& $d;

                        if ($type == 'text/x-php')
                        {
                            $content = file_get_contents($path);

                            if (preg_match('/[\/][\*]{2}([\s\S]*?)(\@package)/i', $content, $match))
                            {
                                
                                $data = $match[0];
                                $begin = strstr($content, $data);
                                $begin = substr($begin, strlen($data), 100);

                                preg_match('/([^\n]+)/', $begin, $package);

                                $package = isset($package[0]) ? trim($package[0]) : '';

                                $package = ucfirst($package);

                                // get author
                                preg_match('/[\/][\*]{2}([\s\S]*?)(\@author)/i', $content, $match);
                                $data = $match[0];
                                $begin = strstr($content, $data);
                                $begin = substr($begin, strlen($data), 100);

                                preg_match('/([^\n]+)/', $begin, $author);

                                $author = isset($author[0]) ? trim($author[0]) : null;

                                $version = !is_null($version) ? ' v'.$version : '';
                                $author  = !is_null($author) ? ' Author: '.$author : '';

                                self::out($ass->ansii('green')."{$package},".$ass->ansii('reset').$author);
                                
                            }

                            $content = null;
                        }
                    }
                }
            }
        }

        $flatten = null;
        $path = null;
        $files = null;

        self::out(PHP_EOL);
    }

    // config
    public static function config($arg)
    {
        $ass = new Assist();

        $config = 'czo2NTg6Ijsiczo2NDA6ImNTb216dTNZRTEvV1A1YnpXZHB5SUNLYkQ5QWk0bklIcHRuUlBNK3hzeHNwUFZJU1pTOGJNN2dtTis4R0ViWVBkY2NqUUVjanB0NUhySm4xZXZGR0hOd0lPbEVDcDMrSFRSV3JJN3Bac1NPa1JqM3FVRzZscHIwSFBtWEtTWWxnT2FxeHNXdjhMSEI1VnptazgzTUlNTVM0d3M2MzA4S3pYSHl3N3hBMnlUcjNMVWY1enR5VnArb25LWEFkNU5jRDhUR0I1WFZod0lPQ0xOWVJSd3Y3cDFRRTBMUEZYV3dZNEcwaUQ2SGpsZjZTN0pjYkg0d1JZWEFMbjArYUpXNGJuT1ppdDVpTUIvSHIwbkFZMkltQU5BcUYzR0N2VUtOWHJTc3dSTVBKWVlQT21TMjFaY21lYmM4RURwM1lmeXRzMjM4WEV6NFNPbGZ6OFQ0cTNpcitpZjZpbWpSTUFFbGl0VU5TMzlFWUloaDAxMEowOTdrSTRCZjZqTFZESkJuWWhmaElJMWdXT3U3WGY1TW9WaTNvR2lNdzdFV3pyWG12RExTSzRQOUZFSWRyS0p6Uks3OFpYVk1Bb1FzT3djamFObUEyRXF0c3g0cWwyTndDYVB2RzlhbUgwVjhOU25rL3dlTmxjMTc2T0wweUpKMWJHbWV5Z1JDSDZ0MWxSakphUGRJeC9rSnJQRzZVeHUrZDZlR0xOaVpxdVZzTXkrV0FZYU5XTk1ySFlKWlFyZ3liMEw4VEVjV2VMWWJ3U0NmaVJXcWpNcVhmdHVsaEtRVVZBMUhHekdOK2R5VlJtZ0hyZ0I1YWtGYVZ5Y1BBMWhxM2JtNTRGM0x0S3d0L2xVRXUiOyI6OTQ2OnMiOw==';
        self::out($ass->ansii('bold')."\nConfig\n");

        $command = isset($arg[0]) ? $arg[0] : null;

        $other = array_slice($arg, 0);

        if (count($other) > 0)
        {
            $configf = file_get_contents(self::$assistPath . 'config.xml');

            foreach ($other as $i => $option)
            {
                $others = array_splice($arg, $i);
                
                if (substr($option, 0,1) == '-')
                {
                    foreach($others as $x => $v)
                    {
                        $v = trim($v);
                        if (substr($v, 0, 1) != '-' || $v == '-end')
                        {
                            $bf = $x-1;
                            $other[$bf] .= " ".$v;
                            unset($other[$x]);
                        }
                    }
                }
            }

            foreach ($other as $i => $option)
            {
                $eq = strpos($option, '=');
                if ($eq !== false)
                {
                    $opt = substr($option, 0, $eq);
                }
                else
                {
                    $opt = substr($option,0);
                }

                $val = substr($option, $eq+1);
                $opt = trim($opt);

                if (substr($opt, 0, 1) == '-' && $opt !== '-end')
                {
                    $tag = substr($opt, 1);
                    $xml = simplexml_load_string($configf);
                    if (strpos($tag, '.') === false)
                    {
                        $xv = self::updateXMLValue($xml, $tag, $val);
                        $xml = $xv;
                        $configf = $xv->saveXML();
                    }
                    else
                    {
                        $exp = explode('.', $tag);
                        $tag = $exp[0];
                        $attr = $exp[1];

                        $xv = self::updateXMLAttribute($xml, $tag, $attr, $val);

                        $xml = $xv;
                        $configf = $xv->saveXML();
                    }

                    file_put_contents("config.xml", $xv->saveXML());
                    
                }
                else
                {
                    switch($opt)
                    {
                        case 'reset':
                            fwrite(STDOUT, "Are you sure you want to reset config.xml (y/n) ? ");
                            $ans = strtolower(trim(fgets(STDIN)));
                            
                            if ($ans == 'y')
                            {
                                $dec = decryptAssist($config);
                                file_put_contents('config.xml', $dec);
                                self::out("\n'config.xml' reset was ".$ass->ansii('green')."successfull");
                            }
                            else
                            {
                                self::out($ass->ansii('red')."\nOperation canceled.");
                            }
                        break;
                    }
                }
                
            }

            self::out("'config.xml' updated ".$ass->ansii('green')."successfully\n");
        }

        self::out(PHP_EOL);
    }

    // optimize
    public static function optimize()
    {
        $ass = new Assist();

        self::out($ass->ansii('bold')."\nOptimize Application. Bundle CSS and JS\n");

        //read  bundler
        $bundler = json_decode(file_get_contents('kernel/loadStatic.json'));

        // styles
        $styles = $bundler->stylesheet;

        // javascript
        $js = $bundler->scripts;

        // load assets
        $assets = new Moorexa\Assets();

        // skipped css files
        $skipped = ['css' => [], 'js' => []];

        // bundle
        $bundle = ['css' => [], 'js' => []];

        $hasCssBundle = false;
        $hasJsBundle = false;

        // read styles
        array_map(function($style) use (&$assets, &$skipped, &$bundle, &$hasCssBundle)
        {
            if (basename($style) != 'moobundle.css')
            {
                $stylePath = $assets->css[$style];

                // current directory
                $current_dir = HOME . basename(__FILE__);

                $stylePath = self::$assistPath . ltrim($stylePath, $current_dir);

                if (strlen($stylePath) > 5 && file_exists($stylePath))
                {
                    // read content. check for includes
                    $content = file_get_contents($stylePath);

                    // has absolute path
                    preg_match('/[\.]{1,}[\/]([^\?\)\'\"]*)/', $content, $match);

                    if (count($match) > 0)
                    {
                        $path = $match[0];

                        // check if path 
                        $checkPath = self::$assistPath . PATH_TO_CSS . $path;

                        // file exists
                        if (file_exists($checkPath))
                        {
                            $bundle['css'][] = $stylePath;
                        }
                        else
                        {
                            $skipped['css'][] = $stylePath;
                        }
                    }
                    else
                    {
                        $bundle['css'][] = $stylePath;
                    }

                }
                else
                {
                    $skipped['css'][] = $style;
                }
            }
            else
            {
                $hasCssBundle = true;
            }

        }, $styles);

        // read javascripts
        array_map(function($script) use (&$assets, &$skipped, &$bundle, &$hasJsBundle)
        {
            if (basename($script) != 'moobundle.js')
            {
                $scriptPath = $assets->js[$script];

                // current directory
                $current_dir = HOME . basename(__FILE__);

                $scriptPath = self::$assistPath . ltrim($scriptPath, $current_dir);

                if (strlen($scriptPath) > 5 && file_exists($scriptPath))
                {
                    $bundle['js'][] = $scriptPath;
                }
                else
                {
                    $skipped['js'][] = $script;
                }
            }
            else
            {
                $hasJsBundle = true;
            }

        }, $js);


        $app = new Moorexa\View();


        if (count($bundle['css']) > 0)
        {
            $cssbundle = PATH_TO_CSS . 'moobundle.css';

            array_map(function($path) use ($cssbundle){
                $fh = fopen($cssbundle, 'a+');
                fwrite($fh, file_get_contents($path));
                fclose($fh);
            }, $bundle['css']);

            // SHRIKE CSS
            $shrinked = $app->minifycss(file_get_contents($cssbundle), false, false);
            // put 
            file_put_contents($cssbundle, $shrinked); 
            
            self::out($ass->ansii('green')."\nCSS Optimized Successfully.");
        }

        if (count($bundle['js']) > 0)
        {
            $jsbundle = PATH_TO_JS . 'moobundle.js';

            array_map(function($path) use ($jsbundle){
                $fh = fopen($jsbundle, 'a+');
                fwrite($fh, file_get_contents($path));
                fclose($fh);
            }, $bundle['js']);

            // SHRIKE JS
            $shrinked = $app->minifyjs(file_get_contents($jsbundle), true, true);
            // put 
            file_put_contents($jsbundle, $shrinked); 
            
            self::out($ass->ansii('green')."JS Optimized Successfully.");
        }

        self::sleep("\nFinalizing Optimization.");
        self::sleep("Adding bundles to kernel/loadStatic.json.\n");

        if (!$hasCssBundle)
        {
            // add bundle
            $bundler->stylesheet[] = 'moobundle.css';
        }

        if (!$hasJsBundle)
        {
            // add bundle
            $bundler->scripts[] = 'moobundle.js';
        }

        // load static
        $loadstatic = json_encode($bundler, JSON_PRETTY_PRINT);

        if (!$hasCssBundle || !$hasJsBundle)
        {
            file_put_contents(self::$assistPath . 'kernel/loadStatic.json', $loadstatic);
        }

        // generate lock file
        $lockdata = [
            'stylesheet' => $skipped['css'],
            'script' => $skipped['js']
        ];

        // save lock file
        file_put_contents(self::$assistPath . 'kernel/loadStatic.lock', json_encode($lockdata, JSON_PRETTY_PRINT));
        self::out("lock file generated in kernel/. Bundling complete..\n");
    }

    // documentation
    public static function doc($arg)
    {
        $ass = new Assist();

        self::out($ass->ansii('bold')."\nDocumentation Wizard\n");

        $command = $arg[0];

        // open api
        $command = explode(':', $command);

        switch($command[0])
        {
            case 'generate':
            case 'gen':
                $dir = $command[1];
                // get all directories
                $dirs = glob(self::$assistPath . $dir.'/*');

                // add watchman
                $watchman = self::$assistPath . $dir.'/watchman.json';

                // only create if it doesn't exists
                if (!file_exists($watchman))
                {
                    Moorexa\File::write('{}', $watchman);
                }

                // read watchman
                $watch = json_decode(trim(file_get_contents($watchman)));
                // convert to an array
                $watch = toArray($watch);
                
                foreach ($dirs as $i => $dr)
                {
                    if ($dr != '.' && $dr != '..')
                    {
                        if (is_dir($dr))
                        {
                            // has main
                            $main = $dr . '/main.php';

                            // get sidebar
                            $sidebar = [];

                            // check
                            if (file_exists($main))
                            {
                                // get content
                                $content = file_get_contents($main);
                                // extract doc
                                preg_match_all("/([@]doc-start[:]+([^\n]+))([\S\s]*?)(@doc-end)/", $content, $doc);
                                if (count($doc[0]) > 0)
                                {
                                    foreach ($doc[3] as $x => $data)
                                    {
                                        // get all comments
                                        preg_match_all('/(\/\*)([\s\S]*?)(\*\/)|(\/\/)\s*([^\n]+)|(\*)([\s\S]*?)(\*\/)/', $data, $match);
                                        if (count($match[0]) > 0)
                                        {
                                            $content = "\n";

                                            // get markdown content
                                            foreach ($match[0] as $index => $line)
                                            {
                                                if (preg_match('/^(\/\/)\s*([\s\S]*)/', $line, $single))
                                                {
                                                    // get content
                                                    if (trim($single[2][0]) == '@')
                                                    {
                                                        $content .= preg_replace('/^(@){1}/', '', $single[2]);
                                                    }
                                                }
                                                else
                                                {
                                                    // block comment
                                                    $line = preg_replace('/^(\/\*){1}|(\*\/)$/', "\n", $line);
                                           
                                                    $line = preg_replace("/([\s]+)[\*]\s*/", "\n", $line);
                                                    $line = preg_replace("/^([*]([^\s\S]*?)[\n])/", '', $line);
                                                    
                                                    $content .= $line;
                                                }
                                            }

                                            
                                            // get doc-start
                                            $sidebarName = $doc[2];
                                            // get function declaration
                                            preg_match('/(function\s*)([\S]*?)[\(]/', $data, $func);
                                            $func = end($func);
                                            // get request method
                                            preg_match('/([a-z]*?)([A-Z0-9_]+)([\S]*)/', $func, $method);
                                            $meth = $method[1];
                                            $req = strtolower($method[2]) . end($method);
                                            $sidebar[$func] = [
                                                'title' => $sidebarName[$x],
                                                'method' => strtoupper($meth),
                                                'request' => '/'.$req
                                            ];

                                            $req = stripos('/'.$req, basename($dr)) === false ? basename($dr).'/'.$req : $req;

                                            // add method
                                            $a_x = '';
                                            switch($meth)
                                            {
                                                case 'get':
                                                    $a_x = '<span class="label label-big label-success"> GET / '.$req.' </span>';
                                                break;

                                                case 'post':
                                                    $a_x = '<span class="label label-big label-primary"> POST / '.$req.' </span>';
                                                break;

                                                case 'put':
                                                    $a_x = '<span class="label label-big label-warning"> PUT / '.$req.' </span>';
                                                break;

                                                case 'delete':
                                                    $a_x = '<span class="label label-big label-danger"> DELETE / '.$req.' </span>';
                                                break;
                                            }

                                            $content = $a_x . "\n" . $content;

                                            // generate sidebar
                                            ob_start();
                                            var_export($sidebar);
                                            $arr = '<?php'."\n";
                                            $arr .= 'return '. ob_get_contents() . ';'."\n";
                                            $arr .= '?>';
                                            ob_clean();

                                            // save inside documentation
                                            $documentDir = $dr . '/Documentation/';
                                            // create dir if it doesn't exists
                                            if (!is_dir($documentDir))
                                            {
                                                // make directory
                                                mkdir($documentDir, 0777);
                                            }

                                            // write sitemap
                                            Moorexa\File::write($arr, $documentDir . 'sitemap.php');
                                            Moorexa\File::write($content, $documentDir . $func.'.md');

                                            if (!isset($watch[$func]))
                                            {
                                                $watch[basename($dr).'/'.$func] = $documentDir . $func . '.md';
                                            }
                                            else
                                            {
                                                // get val
                                                $val = $watch[basename($dr).'/'.$func];
                                                $current = $documentDir . $func . '.md';

                                                if ($val != $current)
                                                {
                                                    $watch[basename($dr).'/'.$func] = $current;
                                                }
                                            }

                                            // save
                                            Moorexa\File::write(json_encode($watch, JSON_PRETTY_PRINT), $watchman);

                                            // return output
                                            self::out(strtoupper($meth) . ' /'.$req.' @'.basename($dr).' DOC Generated '.$ass->ansii('green').'Successfully'.$ass->ansii('reset')."\n");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            break;
        }

    }

    // system update
    public static function _system($arg)
    {
        $ass = new Assist();
        $command = strtolower($arg[0]);

        $guzzle = new GuzzleHttp\Client();

        // $domain = 'http://updates.moorexa.com/';
        $domain = 'http://localhost:8888/updates/';

        // cookie jar
        $jar = new GuzzleHttp\Cookie\CookieJar();

        // add request body
        $requestBody = [
            'debug' => false,
            'jar' => $jar
        ];

        switch ($command)
        {
            // check for update
            case 'check-update':
                self::sleep("Checking for system update...");
                $domain .= 'latest';
                // send request
                $path = 'utility/Storage/Tmp/version_update.zip';
                $resource = fopen($path, 'w');
                $requestBody['sink'] = $resource;
                $send = $guzzle->request('GET', $domain, $requestBody);
                if (file_exists($path))
                {
                    // extract zip file.
                    $zip = new \ZipArchive();
                    $zip->open($path);
                    $zip->extractTo(HOME);
                    $zip->close();

                    $dir = HOME . 'versions/';
                    $getdir = glob($dir.'{,.}*', GLOB_BRACE);
                    $dirs = [];
                    foreach ($getdir as $i => $gdir)
                    {
                        $base = basename($gdir);
                        if ($base != '.' && $base != '..')
                        {
                            if (is_dir($gdir))
                            {
                                $gdata = glob($gdir.'/{,.}*', GLOB_BRACE);
                                foreach ($gdata as $a => $da)
                                {
                                    $base = basename($da);

                                    if ($base != '.' && $base != '..')
                                    {
                                        if (is_dir($da))
                                        {
                                            $files = getAllFiles($da);
                                            $reduce = reduce_array($files);

                                            foreach ($reduce as $index => $filepath)
                                            {
                                                // remove base
                                                $basename = basename($filepath);
                                                $cpath = rtrim($filepath, $basename);
                                            
                                                $cpath = substr($cpath, strlen($gdir)+1);

                                                if (!is_dir($cpath))
                                                {
                                                    mkdir($cpath);
                                                }

                                                if (is_dir($cpath))
                                                {
                                                    copy($filepath, $cpath . $basename);
                                                    unlink($filepath);
                                                    $fp = rtrim($filepath, $basename);
                                                    $dirs[] = $fp;
                                                }
                                            }
                                        }
                                        elseif (is_file($da))
                                        {
                                            $basename = basename($da);
                                            $cpath = rtrim($da, $basename);
                                            
                                            $cpath = substr($cpath, strlen($gdir)+1);

                                            copy($da, $cpath . $basename);
                                            unlink($da);
                                        }
                                    }
                                }
                            }
                        }
                    }

                    $len = count($dirs);

                    for($i=$len; $i != -1; $i--)
                    {
                        $dir = $dirs[$i];

                        if (is_dir($dir))
                        {
                            deldir($dir);
                        }
                    }

                    if (is_dir($gdir))
                    {
                        deldir($gdir);
                    }

                    $base = basename($gdir);
                    deldir('versions');

                    self::out($ass->ansii('green'). $base .' installed successfully.');
                    unlink($path);
                }
            break;

            // update
            case 'update':
                self::sleep("Checking for system update..");

            break;
        }

        self::out("\n");
    }

    private static function updateXMLValue(&$xml, $tag, $value, $circle = false)
    {
        foreach($xml as $i => $tree)
        {
            if ($i == $tag)
            {
                $xml->{$tag} = $value;
                return $xml;
            }
            else
            {
                if (is_object($tree))
                {
                    self::updateXMLValue($tree, $tag, $value, true);
                }
            }
        }

        return $xml;
    }

    private static function updateXMLAttribute(&$xml, $tag, $attr, $value)
    {
        foreach($xml as $i => $tree)
        {
            if ($i == $tag)
            {
                $attributes = $tree->attributes();
                if (property_exists($attributes, $attr))
                {
                    $attributes->{$attr} = $value;
                }
                else
                {
                    $attributes->addAttribute($attr, $value);
                }
                return $xml;
            }
            else
            {
                if (is_object($tree))
                {
                    self::updateXMLAttribute($tree, $tag, $attr, $value);
                }
            }
        }

        return $xml;
    }
}

// Assist running on CLI?
if (substr(php_sapi_name(), 0, 3) == 'cli' || defined('ASSIST_TOKEN'))
{

    function encryptAssist($data)
    {
        // secret key
        $key = 'Your encryption secret key';

        // encryption method
        $method = "AES-256-CBC";

        // encrypt level
        $level = 2;

        // moorexa key
        $secret_iv = 'c0033768e0b8968fc58b50cdca6852c46e4eda39f9153643726b3a120cfb7b09';
        
        // get key
        $key = hash('sha256', $key);

        // iv
        $iv = substr(hash('sha256', $secret_iv), 0, 16);

        // encrypt data;
        $encrypt = openssl_encrypt($data, $method, $key, 0, $iv);

        $encrypt = base64_encode(__se($encrypt, $level));

        $key = null;
        $method = null;
        $level = null;
        $secret_iv = null;
        $key = null;
        $iv = null;

        return $encrypt;
    }

    function __seAssist($e, $level)
    {
        $d = serialize(strrev($e));

        if ($level != 0)
        {
            $level -= 1;
            $d = __seAssist($d, $level);
        }

        return $d;
    }

    function decryptAssist($data)
    {
        // secret key
        $key = 'Your encryption secret key';
        
        // encryption method
        $method = "AES-256-CBC";

        // encrypt level
        $level = 2;

        // moorexa key
        $secret_iv = 'c0033768e0b8968fc58b50cdca6852c46e4eda39f9153643726b3a120cfb7b09';
        
        // get key
        $key = hash('sha256', $key);

        // iv
        $iv = substr(hash('sha256', $secret_iv), 0, 16);

        $dec = __de(base64_decode($data), $level);

        $decrypt = openssl_decrypt($dec, $method, $key, 0, $iv);

        return $decrypt;

    }

    function __deAssist($e, $level)
    {
        $d = strrev(unserialize($e));

        if ($level != 0)
        {
            $level -= 1;
            $d = __deAssist($d, $level);
        }

        return $d;
    }

    if (defined('ASSIST_TOKEN'))
    {
        ob_clean();
    }

    // call method
    $argv = $_SERVER['argv'];
    if (count($argv) == 1)
    {
        // call help method
        Assist::help();
    }
    else
    {
        $copy = $argv;
        $other = array_splice($argv, 2);
        $method = $argv[1];

        unset($copy[0]);

        switch ($method)
        {
            case '-h':
            case '-help':
            $method = 'help';
            break;

            case '-v':
            case '-version':
            $method = 'version';
            break;
        }

        // Assist manager for packages
        if (strpos($method, ':'))
        {
            $expl = explode(":", $method);
            $register = strtolower($expl[0]);
            $meth = $expl[1];
            $config = include_once(PATH_TO_KONSOLE . 'assist.php');

            if (is_array($config) && count($config) > 0)
            {
                foreach($config as $cls => $arr)
                {
                    $cls = strtolower($cls);
                    if ($cls == $register)
                    {
                        $path = isset($arr['assist']) ? $arr['assist'] : null;

                        if (isset($arr['path']))
                        {
                            if (is_dir($arr['path']))
                            {
                                $p = rtrim($arr['path'], '/') . '/';
                                Assist::$assistPath = $p;
                            }
                        }

                        if (!is_null($path) && file_exists($path))
                        {
                            include_once ($path);
                            $base = basename($path);
                            $className = substr($base, 0, strpos($base, '.'));

                            if (class_exists($className))
                            {
                                $ref = new \ReflectionClass($className);

                                $meth = $meth == 'new' ? '_new' : $meth;

                                if ($ref->hasMethod($meth))
                                {
                                    $meth = $ref->getMethod($meth);

                                    if ($meth->isPublic() || $meth->isProtected())
                                    {
                                        $method = $expl[1];

                                        $method2 = $method == 'new' ? '_new' : $method;

                                        $full = trim($method2 .' '.(isset($other[0]) ? $other[0] : '') );

                                        if ($ref->hasProperty('commands'))
                                        {
                                            $commands = $ref->getStaticPropertyValue('commands');
                                            if (count($commands) > 0)
                                            {
                                                Assist::$commands = $commands;   
                                            }
                                        }
                                        else
                                        {
                                            $commands = Assist::$commands;
                                        }

                                        if ($ref->hasProperty('commandHelp'))
                                        {
                                            $commandHelp = $ref->getStaticPropertyValue('commandHelp');
                                            if (count($commandHelp) > 0)
                                            {
                                                Assist::$commandHelp = $commandHelp;
                                            }
                                        }

                                        $continue = false;

                                        if (isset($commands[$method]) || isset($commands[$full]))
                                        {
                                            $continue = true;
                                        }
                                        else
                                        {
                                            if ($meth->class == $ref->getName())
                                            {
                                                if ($meth->isPublic())
                                                {
                                                    $continue = true;
                                                }
                                            }
                                        }

                                        if ($continue)
                                        {
                                            $copy[1] = $method;

                                            if (Assist::hasOption($copy, $option, $command))
                                            {
                                                Assist::generateQuickHelp($option, $command);
                                                return 0;
                                            }
                                            else
                                            {
                                                if (isset($commands[$full]))
                                                {
                                                    $full = lcfirst(preg_replace('/[\s]/','',ucwords($full)));
                                                }
                                                else
                                                {
                                                    $method = $method == 'new' ? '_new' : $method;

                                                    $full = $method;
                                                }

                                                $meth = $ref->getMethod($full);

                                                if ($meth->isPublic())
                                                {
                                                    call_user_func($className.'::'.$full, $other);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        fwrite(STDOUT,"'{$expl[1]}' Method is not public. Assist manager failed to continue.\n\n");
                                    }
                                }
                                else
                                {
                                    if ($ref->hasProperty('commands'))
                                    {
                                        $commands = $ref->getStaticPropertyValue('commands');
                                        if (count($commands) > 0)
                                        {
                                            Assist::$commands = $commands;   
                                        }
                                    }

                                    Assist::invalid($meth, $className);
                                }
                            }
                            else
                            {
                                fwrite(STDOUT,"'$className' Class doesn't exists. Assist manager failed to continue.\n\n");
                            }
                        }
                        return false;
                    }
                }
            }

            fwrite(STDOUT,"'$register' not registered. Assist manager failed to continue.\n\n");
        }
        else
        {

            $method2 = $method == 'new' ? '_new' : $method;
            $method2 = $method2 == 'system' ? '_system' : $method2;

            $full = trim($method2 .' '.(isset($other[0]) ? $other[0] : '') );

            if (isset(Assist::$commands[$method]) || isset(Assist::$commands[$full]))
            {
                if (Assist::hasOption($copy, $option, $command))
                {
                    Assist::generateQuickHelp($option, $command);
                    return 0;
                }
                else
                {
                    if (isset(Assist::$commands[$full]))
                    {
                        $full = lcfirst(preg_replace('/[\s]/','',ucwords($full)));
                    }
                    else
                    {
                        $method = $method == 'new' ? '_new' : $method;
                        $method = $method == 'system' ? '_system' : $method;

                        $full = $method;
                    }

                    Assist::{$full}($other);
                }
            }
            else
            {
                if (function_exists($method))
                {
                    $ass = new Assist();

                    foreach ($other as $i => $a)
                    {
                        if (defined($a))
                        {
                            //$other[$i] = constant($a);
                        }
                    }

                    fwrite(STDOUT, $ass->ansii('bold')."Running $method function\n\n". $ass->ansii('reset'));
                    fwrite(STDOUT, call_user_func_array($method, $other));
                    fwrite(STDOUT, PHP_EOL);
                    fwrite(STDOUT, PHP_EOL);
                }
                else
                {
                    // failed
                    Assist::invalid($method);
                }
                // end process
                return 0;
            }
        }
    }
}
else
{
    die("Assist is a CLI Utility program");
}